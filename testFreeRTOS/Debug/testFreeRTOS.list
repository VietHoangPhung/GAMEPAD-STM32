
testFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800ad74  0800ad74  0001ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e4  0800b4e4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4ec  0800b4ec  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800b4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005048  200001d0  0800b6c4  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005218  0800b6c4  00025218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4ec  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004807  00000000  00000000  0003e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00042ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00044940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1c0  00000000  00000000  00046180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020947  00000000  00000000  00063340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6dc2  00000000  00000000  00083c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012aa49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a4  00000000  00000000  0012aa9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad5c 	.word	0x0800ad5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800ad5c 	.word	0x0800ad5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200001ec 	.word	0x200001ec
 80005b4:	20000240 	.word	0x20000240

080005b8 <getValueButShorter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int getValueButShorter(int channel)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	int value = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <getValueButShorter+0x64>)
 80005e6:	f001 f9fd 	bl	80019e4 <HAL_ADC_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <getValueButShorter+0x3c>
	{
		Error_Handler();
 80005f0:	f000 fb42 	bl	8000c78 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <getValueButShorter+0x64>)
 80005f6:	f001 f875 	bl	80016e4 <HAL_ADC_Start>
	//HAL_Delay(10);
	HAL_ADC_PollForConversion(&hadc1, 10);
 80005fa:	210a      	movs	r1, #10
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <getValueButShorter+0x64>)
 80005fe:	f001 f958 	bl	80018b2 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <getValueButShorter+0x64>)
 8000604:	f001 f9e0 	bl	80019c8 <HAL_ADC_GetValue>
 8000608:	4603      	mov	r3, r0
 800060a:	61fb      	str	r3, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <getValueButShorter+0x64>)
 800060e:	f001 f91d 	bl	800184c <HAL_ADC_Stop>
	return value;
 8000612:	69fb      	ldr	r3, [r7, #28]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000440 	.word	0x20000440

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b09c      	sub	sp, #112	; 0x70
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 ffb3 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f873 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f9d7 	bl	80009e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000632:	f000 f8d9 	bl	80007e8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000636:	f000 f953 	bl	80008e0 <MX_I2C3_Init>
  MX_TIM2_Init();
 800063a:	f000 f97f 	bl	800093c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800063e:	f009 fa8d 	bl	8009b5c <MX_USB_DEVICE_Init>
  ssd1306_Init();
 8000642:	f000 fb57 	bl	8000cf4 <ssd1306_Init>
  mouse_report.reportId = 0x02;
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <main+0xcc>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
  keyboard_report.reportId = 0x01;
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <main+0xd0>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of collectingTask */
  osThreadDef(collectingTask, StartCollectingTask, osPriorityNormal, 0, 128);
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <main+0xd4>)
 8000654:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  collectingTaskHandle = osThreadCreate(osThread(collectingTask), NULL);
 8000666:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f008 f84a 	bl	8008706 <osThreadCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <main+0xd8>)
 8000676:	6013      	str	r3, [r2, #0]

  /* definition and creation of mouseTask */
  osThreadDef(mouseTask, StrartMouseTask, osPriorityNormal, 0, 128);
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <main+0xdc>)
 800067a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mouseTaskHandle = osThreadCreate(osThread(mouseTask), NULL);
 800068c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f008 f837 	bl	8008706 <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <main+0xe0>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of keyboardTask */
  osThreadDef(keyboardTask, StartKeyboardTask, osPriorityNormal, 0, 128);
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <main+0xe4>)
 80006a0:	f107 041c 	add.w	r4, r7, #28
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keyboardTaskHandle = osThreadCreate(osThread(keyboardTask), NULL);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f008 f824 	bl	8008706 <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <main+0xe8>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <main+0xec>)
 80006c6:	463c      	mov	r4, r7
 80006c8:	461d      	mov	r5, r3
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 80006d6:	463b      	mov	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f008 f813 	bl	8008706 <osThreadCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <main+0xf0>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f008 f807 	bl	80086f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0xca>
 80006ec:	20000540 	.word	0x20000540
 80006f0:	20000534 	.word	0x20000534
 80006f4:	0800adac 	.word	0x0800adac
 80006f8:	20000524 	.word	0x20000524
 80006fc:	0800adc8 	.word	0x0800adc8
 8000700:	20000528 	.word	0x20000528
 8000704:	0800ade4 	.word	0x0800ade4
 8000708:	2000052c 	.word	0x2000052c
 800070c:	0800ae00 	.word	0x0800ae00
 8000710:	20000530 	.word	0x20000530

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f009 fecc 	bl	800a4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <SystemClock_Config+0xd0>)
 8000762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000788:	2319      	movs	r3, #25
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800078c:	2390      	movs	r3, #144	; 0x90
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000794:	2303      	movs	r3, #3
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fc65 	bl	800406c <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a8:	f000 fa66 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2102      	movs	r1, #2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fec7 	bl	800455c <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d4:	f000 fa50 	bl	8000c78 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_ADC1_Init+0xec>)
 80007fc:	4a36      	ldr	r2, [pc, #216]	; (80008d8 <MX_ADC1_Init+0xf0>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_ADC1_Init+0xec>)
 800080e:	2201      	movs	r2, #1
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000814:	2201      	movs	r2, #1
 8000816:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <MX_ADC1_Init+0xec>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000828:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <MX_ADC1_Init+0xf4>)
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_ADC1_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000834:	2204      	movs	r2, #4
 8000836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_ADC1_Init+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000842:	2201      	movs	r2, #1
 8000844:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	4823      	ldr	r0, [pc, #140]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000848:	f000 ff08 	bl	800165c <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 fa11 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000868:	f001 f8bc 	bl	80019e4 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000872:	f000 fa01 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000876:	2301      	movs	r3, #1
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_ADC1_Init+0xec>)
 8000884:	f001 f8ae 	bl	80019e4 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800088e:	f000 f9f3 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000892:	2302      	movs	r3, #2
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000896:	2303      	movs	r3, #3
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_ADC1_Init+0xec>)
 80008a0:	f001 f8a0 	bl	80019e4 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80008aa:	f000 f9e5 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ae:	2303      	movs	r3, #3
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_ADC1_Init+0xec>)
 80008bc:	f001 f892 	bl	80019e4 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80008c6:	f000 f9d7 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000440 	.word	0x20000440
 80008d8:	40012000 	.word	0x40012000
 80008dc:	0f000001 	.word	0x0f000001

080008e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C3_Init+0x50>)
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_I2C3_Init+0x54>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C3_Init+0x50>)
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_I2C3_Init+0x58>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C3_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C3_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_I2C3_Init+0x50>)
 80008fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000902:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C3_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_I2C3_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_I2C3_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_I2C3_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_I2C3_Init+0x50>)
 800091e:	f001 fce5 	bl	80022ec <HAL_I2C_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000928:	f000 f9a6 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000488 	.word	0x20000488
 8000934:	40005c00 	.word	0x40005c00
 8000938:	00061a80 	.word	0x00061a80

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2224      	movs	r2, #36	; 0x24
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f009 fdb8 	bl	800a4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_TIM2_Init+0xa0>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM2_Init+0xa0>)
 800096e:	22ff      	movs	r2, #255	; 0xff
 8000970:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_TIM2_Init+0xa0>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800097e:	2303      	movs	r3, #3
 8000980:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000986:	2301      	movs	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000996:	2301      	movs	r3, #1
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_TIM2_Init+0xa0>)
 80009aa:	f004 f8a5 	bl	8004af8 <HAL_TIM_Encoder_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f000 f960 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_TIM2_Init+0xa0>)
 80009c6:	f004 faed 	bl	8004fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009d0:	f000 f952 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200004dc 	.word	0x200004dc

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0xc0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_9;
 8000a4a:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_GPIO_Init+0xc4>)
 8000a60:	f001 fac0 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a64:	2340      	movs	r3, #64	; 0x40
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <MX_GPIO_Init+0xc4>)
 8000a7a:	f001 fab3 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a7e:	f24f 53e7 	movw	r3, #62951	; 0xf5e7
 8000a82:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0xc8>)
 8000a94:	f001 faa6 	bl	8001fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <StartCollectingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCollectingTask */
void StartCollectingTask(void const * argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  adc_val_0 = getValueButShorter(ADC_CHANNEL_0);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fd7f 	bl	80005b8 <getValueButShorter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <StartCollectingTask+0xc4>)
 8000ac0:	801a      	strh	r2, [r3, #0]
	  adc_val_1 = 2047;//getValueButShorter(ADC_CHANNEL_1);
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <StartCollectingTask+0xc8>)
 8000ac4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ac8:	801a      	strh	r2, [r3, #0]
	  adc_val_2 = getValueButShorter(ADC_CHANNEL_2);
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff fd74 	bl	80005b8 <getValueButShorter>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <StartCollectingTask+0xcc>)
 8000ad6:	801a      	strh	r2, [r3, #0]
	  adc_val_3 = getValueButShorter(ADC_CHANNEL_3);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f7ff fd6d 	bl	80005b8 <getValueButShorter>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <StartCollectingTask+0xd0>)
 8000ae4:	801a      	strh	r2, [r3, #0]
	  //Xu ly va scale gia tri
	  mouse_report.GD_MousePointerX = (adc_val_0 - 2047)/120;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <StartCollectingTask+0xc4>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8000aee:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <StartCollectingTask+0xd4>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	441a      	add	r2, r3
 8000af6:	1192      	asrs	r2, r2, #6
 8000af8:	17db      	asrs	r3, r3, #31
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	b25a      	sxtb	r2, r3
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <StartCollectingTask+0xd8>)
 8000b00:	709a      	strb	r2, [r3, #2]
	  mouse_report.GD_MousePointerY = (adc_val_0 - 2047)/120;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <StartCollectingTask+0xc4>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8000b0a:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <StartCollectingTask+0xd4>)
 8000b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b10:	441a      	add	r2, r3
 8000b12:	1192      	asrs	r2, r2, #6
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b25a      	sxtb	r2, r3
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <StartCollectingTask+0xd8>)
 8000b1c:	70da      	strb	r2, [r3, #3]
	  if(adc_val_0 > 4000)
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <StartCollectingTask+0xc4>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b26:	d90c      	bls.n	8000b42 <StartCollectingTask+0x96>
	  {
		  sprintf((char*)lcd_buf_2, "presased A and B");
 8000b28:	4917      	ldr	r1, [pc, #92]	; (8000b88 <StartCollectingTask+0xdc>)
 8000b2a:	4818      	ldr	r0, [pc, #96]	; (8000b8c <StartCollectingTask+0xe0>)
 8000b2c:	f009 fcd0 	bl	800a4d0 <siprintf>
		  keyboard_report.Keyboard[0] = keycode[0];
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <StartCollectingTask+0xe4>)
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <StartCollectingTask+0xe8>)
 8000b36:	70da      	strb	r2, [r3, #3]
		  keyboard_report.Keyboard[1] = keycode[1];
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <StartCollectingTask+0xe4>)
 8000b3a:	785a      	ldrb	r2, [r3, #1]
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <StartCollectingTask+0xe8>)
 8000b3e:	711a      	strb	r2, [r3, #4]
 8000b40:	e009      	b.n	8000b56 <StartCollectingTask+0xaa>
  //			  keyboard_report.Keyboard[i] = keycode[i];
  //		  }
	  }
	  else
	  {
		  sprintf((char*)lcd_buf_2, "pressed none");
 8000b42:	4915      	ldr	r1, [pc, #84]	; (8000b98 <StartCollectingTask+0xec>)
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <StartCollectingTask+0xe0>)
 8000b46:	f009 fcc3 	bl	800a4d0 <siprintf>
		  keyboard_report.Keyboard[0] = 0x00;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <StartCollectingTask+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	70da      	strb	r2, [r3, #3]
		  keyboard_report.Keyboard[1] = 0x00;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <StartCollectingTask+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	711a      	strb	r2, [r3, #4]
	  }
	  sprintf((char*)lcd_buf_1, "%d   %d", adc_val_0, adc_val_1);
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <StartCollectingTask+0xc4>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <StartCollectingTask+0xc8>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	490e      	ldr	r1, [pc, #56]	; (8000b9c <StartCollectingTask+0xf0>)
 8000b62:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <StartCollectingTask+0xf4>)
 8000b64:	f009 fcb4 	bl	800a4d0 <siprintf>
	  osDelay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f007 fe18 	bl	800879e <osDelay>
	  adc_val_0 = getValueButShorter(ADC_CHANNEL_0);
 8000b6e:	e7a1      	b.n	8000ab4 <StartCollectingTask+0x8>
 8000b70:	20000610 	.word	0x20000610
 8000b74:	20000612 	.word	0x20000612
 8000b78:	20000614 	.word	0x20000614
 8000b7c:	20000616 	.word	0x20000616
 8000b80:	88888889 	.word	0x88888889
 8000b84:	20000540 	.word	0x20000540
 8000b88:	0800ae1c 	.word	0x0800ae1c
 8000b8c:	200005ac 	.word	0x200005ac
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000534 	.word	0x20000534
 8000b98:	0800ae30 	.word	0x0800ae30
 8000b9c:	0800ae40 	.word	0x0800ae40
 8000ba0:	20000548 	.word	0x20000548

08000ba4 <StartKeyboardTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboardTask */
void StartKeyboardTask(void const * argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboardTask */
  /* Infinite loop */
  while(1)
  {
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&keyboard_report, sizeof(keyboard_report));
 8000bac:	2209      	movs	r2, #9
 8000bae:	4904      	ldr	r1, [pc, #16]	; (8000bc0 <StartKeyboardTask+0x1c>)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <StartKeyboardTask+0x20>)
 8000bb2:	f006 f907 	bl	8006dc4 <USBD_CUSTOM_HID_SendReport>
	  osDelay(5);
 8000bb6:	2005      	movs	r0, #5
 8000bb8:	f007 fdf1 	bl	800879e <osDelay>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&keyboard_report, sizeof(keyboard_report));
 8000bbc:	e7f6      	b.n	8000bac <StartKeyboardTask+0x8>
 8000bbe:	bf00      	nop
 8000bc0:	20000534 	.word	0x20000534
 8000bc4:	200047c8 	.word	0x200047c8

08000bc8 <StrartMouseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StrartMouseTask */
void StrartMouseTask(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StrartMouseTask */
  /* Infinite loop */
  while(1)
  {
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&mouse_report, sizeof(mouse_report));
 8000bd0:	2205      	movs	r2, #5
 8000bd2:	4904      	ldr	r1, [pc, #16]	; (8000be4 <StrartMouseTask+0x1c>)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <StrartMouseTask+0x20>)
 8000bd6:	f006 f8f5 	bl	8006dc4 <USBD_CUSTOM_HID_SendReport>
	  osDelay(5);
 8000bda:	2005      	movs	r0, #5
 8000bdc:	f007 fddf 	bl	800879e <osDelay>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&mouse_report, sizeof(mouse_report));
 8000be0:	e7f6      	b.n	8000bd0 <StrartMouseTask+0x8>
 8000be2:	bf00      	nop
 8000be4:	20000540 	.word	0x20000540
 8000be8:	200047c8 	.word	0x200047c8

08000bec <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  while(1)
  {
  	  ssd1306_Fill(Black);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f8e7 	bl	8000dc8 <ssd1306_Fill>
  	  ssd1306_SetCursor(1, 15);
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fa31 	bl	8001064 <ssd1306_SetCursor>
  	  ssd1306_WriteString((char*)lcd_buf_1, Font_6x8, White);
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <StartDisplayTask+0x58>)
 8000c04:	2301      	movs	r3, #1
 8000c06:	ca06      	ldmia	r2, {r1, r2}
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <StartDisplayTask+0x5c>)
 8000c0a:	f000 fa05 	bl	8001018 <ssd1306_WriteString>
  	  ssd1306_SetCursor(1, 40);
 8000c0e:	2128      	movs	r1, #40	; 0x28
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fa27 	bl	8001064 <ssd1306_SetCursor>
  	  ssd1306_WriteString((char*)lcd_buf_2, Font_6x8, White);
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <StartDisplayTask+0x58>)
 8000c18:	2301      	movs	r3, #1
 8000c1a:	ca06      	ldmia	r2, {r1, r2}
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <StartDisplayTask+0x60>)
 8000c1e:	f000 f9fb 	bl	8001018 <ssd1306_WriteString>
  	  ssd1306_SetCursor(1, 55);
 8000c22:	2137      	movs	r1, #55	; 0x37
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fa1d 	bl	8001064 <ssd1306_SetCursor>
  	  ssd1306_WriteString("testss", Font_6x8, White);
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <StartDisplayTask+0x58>)
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	ca06      	ldmia	r2, {r1, r2}
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <StartDisplayTask+0x64>)
 8000c32:	f000 f9f1 	bl	8001018 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000c36:	f000 f8eb 	bl	8000e10 <ssd1306_UpdateScreen>
	  osDelay(1);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f007 fdaf 	bl	800879e <osDelay>
  	  ssd1306_Fill(Black);
 8000c40:	e7d8      	b.n	8000bf4 <StartDisplayTask+0x8>
 8000c42:	bf00      	nop
 8000c44:	20000010 	.word	0x20000010
 8000c48:	20000548 	.word	0x20000548
 8000c4c:	200005ac 	.word	0x200005ac
 8000c50:	0800ae48 	.word	0x0800ae48

08000c54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d101      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c66:	f000 fcb5 	bl	80015d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40010000 	.word	0x40010000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>

08000c82 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af04      	add	r7, sp, #16
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2200      	movs	r2, #0
 8000cac:	2178      	movs	r1, #120	; 0x78
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <ssd1306_WriteCommand+0x2c>)
 8000cb0:	f001 fc60 	bl	8002574 <HAL_I2C_Mem_Write>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000488 	.word	0x20000488

08000cc0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	9202      	str	r2, [sp, #8]
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	2178      	movs	r1, #120	; 0x78
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <ssd1306_WriteData+0x30>)
 8000ce2:	f001 fc47 	bl	8002574 <HAL_I2C_Mem_Write>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000488 	.word	0x20000488

08000cf4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000cf8:	f7ff ffc3 	bl	8000c82 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 fc89 	bl	8001614 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f9da 	bl	80010bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000d08:	2020      	movs	r0, #32
 8000d0a:	f7ff ffc1 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ffbe 	bl	8000c90 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d14:	20b0      	movs	r0, #176	; 0xb0
 8000d16:	f7ff ffbb 	bl	8000c90 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d1a:	20c8      	movs	r0, #200	; 0xc8
 8000d1c:	f7ff ffb8 	bl	8000c90 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ffb5 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d26:	2010      	movs	r0, #16
 8000d28:	f7ff ffb2 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d2c:	2040      	movs	r0, #64	; 0x40
 8000d2e:	f7ff ffaf 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d32:	20ff      	movs	r0, #255	; 0xff
 8000d34:	f000 f9ae 	bl	8001094 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d38:	20a1      	movs	r0, #161	; 0xa1
 8000d3a:	f7ff ffa9 	bl	8000c90 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d3e:	20a6      	movs	r0, #166	; 0xa6
 8000d40:	f7ff ffa6 	bl	8000c90 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d44:	20a8      	movs	r0, #168	; 0xa8
 8000d46:	f7ff ffa3 	bl	8000c90 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000d4a:	203f      	movs	r0, #63	; 0x3f
 8000d4c:	f7ff ffa0 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d50:	20a4      	movs	r0, #164	; 0xa4
 8000d52:	f7ff ff9d 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d56:	20d3      	movs	r0, #211	; 0xd3
 8000d58:	f7ff ff9a 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff97 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d62:	20d5      	movs	r0, #213	; 0xd5
 8000d64:	f7ff ff94 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000d68:	20f0      	movs	r0, #240	; 0xf0
 8000d6a:	f7ff ff91 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d6e:	20d9      	movs	r0, #217	; 0xd9
 8000d70:	f7ff ff8e 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d74:	2022      	movs	r0, #34	; 0x22
 8000d76:	f7ff ff8b 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d7a:	20da      	movs	r0, #218	; 0xda
 8000d7c:	f7ff ff88 	bl	8000c90 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000d80:	2012      	movs	r0, #18
 8000d82:	f7ff ff85 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d86:	20db      	movs	r0, #219	; 0xdb
 8000d88:	f7ff ff82 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d8c:	2020      	movs	r0, #32
 8000d8e:	f7ff ff7f 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d92:	208d      	movs	r0, #141	; 0x8d
 8000d94:	f7ff ff7c 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d98:	2014      	movs	r0, #20
 8000d9a:	f7ff ff79 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 f98c 	bl	80010bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f80f 	bl	8000dc8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000daa:	f000 f831 	bl	8000e10 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <ssd1306_Init+0xd0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <ssd1306_Init+0xd0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000dba:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <ssd1306_Init+0xd0>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	711a      	strb	r2, [r3, #4]
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000a18 	.word	0x20000a18

08000dc8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e00d      	b.n	8000df4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <ssd1306_Fill+0x1a>
 8000dde:	2100      	movs	r1, #0
 8000de0:	e000      	b.n	8000de4 <ssd1306_Fill+0x1c>
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <ssd1306_Fill+0x44>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	460a      	mov	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfa:	d3ed      	bcc.n	8000dd8 <ssd1306_Fill+0x10>
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000618 	.word	0x20000618

08000e10 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e016      	b.n	8000e4a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3b50      	subs	r3, #80	; 0x50
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff34 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff ff31 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e2e:	2010      	movs	r0, #16
 8000e30:	f7ff ff2e 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	01db      	lsls	r3, r3, #7
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <ssd1306_UpdateScreen+0x4c>)
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff3e 	bl	8000cc0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	3301      	adds	r3, #1
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	d9e5      	bls.n	8000e1c <ssd1306_UpdateScreen+0xc>
    }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000618 	.word	0x20000618

08000e60 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	71bb      	strb	r3, [r7, #6]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db3d      	blt.n	8000ef6 <ssd1306_DrawPixel+0x96>
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e7e:	d83a      	bhi.n	8000ef6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d11a      	bne.n	8000ebc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	b2d8      	uxtb	r0, r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	01db      	lsls	r3, r3, #7
 8000e92:	4413      	add	r3, r2
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <ssd1306_DrawPixel+0xa4>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b259      	sxtb	r1, r3
 8000eac:	79fa      	ldrb	r2, [r7, #7]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <ssd1306_DrawPixel+0xa4>)
 8000eb8:	54d1      	strb	r1, [r2, r3]
 8000eba:	e01d      	b.n	8000ef8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ebc:	79fa      	ldrb	r2, [r7, #7]
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	b2d8      	uxtb	r0, r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <ssd1306_DrawPixel+0xa4>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	b259      	sxtb	r1, r3
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	01db      	lsls	r3, r3, #7
 8000eec:	4413      	add	r3, r2
 8000eee:	b2c9      	uxtb	r1, r1
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <ssd1306_DrawPixel+0xa4>)
 8000ef2:	54d1      	strb	r1, [r2, r3]
 8000ef4:	e000      	b.n	8000ef8 <ssd1306_DrawPixel+0x98>
        return;
 8000ef6:	bf00      	nop
    }
}
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000618 	.word	0x20000618

08000f08 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	1d38      	adds	r0, r7, #4
 8000f12:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f16:	461a      	mov	r2, r3
 8000f18:	4623      	mov	r3, r4
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b1f      	cmp	r3, #31
 8000f24:	d902      	bls.n	8000f2c <ssd1306_WriteChar+0x24>
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b7e      	cmp	r3, #126	; 0x7e
 8000f2a:	d901      	bls.n	8000f30 <ssd1306_WriteChar+0x28>
        return 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e06d      	b.n	800100c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f30:	4b38      	ldr	r3, [pc, #224]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	793b      	ldrb	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	2b80      	cmp	r3, #128	; 0x80
 8000f3c:	dc06      	bgt.n	8000f4c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000f3e:	4b35      	ldr	r3, [pc, #212]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000f40:	885b      	ldrh	r3, [r3, #2]
 8000f42:	461a      	mov	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f48:	2b40      	cmp	r3, #64	; 0x40
 8000f4a:	dd01      	ble.n	8000f50 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e05d      	b.n	800100c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	e04c      	b.n	8000ff0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	3b20      	subs	r3, #32
 8000f5c:	7979      	ldrb	r1, [r7, #5]
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	440b      	add	r3, r1
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	e034      	b.n	8000fe0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d012      	beq.n	8000fac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b2d8      	uxtb	r0, r3
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000f96:	885b      	ldrh	r3, [r3, #2]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	7bba      	ldrb	r2, [r7, #14]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff ff5b 	bl	8000e60 <ssd1306_DrawPixel>
 8000faa:	e016      	b.n	8000fda <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2d8      	uxtb	r0, r3
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000fbc:	885b      	ldrh	r3, [r3, #2]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2d9      	uxtb	r1, r3
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f7ff ff43 	bl	8000e60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d3c5      	bcc.n	8000f76 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d3ad      	bcc.n	8000f56 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	793b      	ldrb	r3, [r7, #4]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <ssd1306_WriteChar+0x10c>)
 8001008:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	20000a18 	.word	0x20000a18

08001018 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	1d38      	adds	r0, r7, #4
 8001022:	e880 0006 	stmia.w	r0, {r1, r2}
 8001026:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001028:	e012      	b.n	8001050 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	7818      	ldrb	r0, [r3, #0]
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	1d3a      	adds	r2, r7, #4
 8001032:	ca06      	ldmia	r2, {r1, r2}
 8001034:	f7ff ff68 	bl	8000f08 <ssd1306_WriteChar>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d002      	beq.n	800104a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	e008      	b.n	800105c <ssd1306_WriteString+0x44>
        }
        str++;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e8      	bne.n	800102a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	781b      	ldrb	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <ssd1306_SetCursor+0x2c>)
 800107a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <ssd1306_SetCursor+0x2c>)
 8001082:	805a      	strh	r2, [r3, #2]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000a18 	.word	0x20000a18

08001094 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800109e:	2381      	movs	r3, #129	; 0x81
 80010a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fdf3 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fdef 	bl	8000c90 <ssd1306_WriteCommand>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80010cc:	23af      	movs	r3, #175	; 0xaf
 80010ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <ssd1306_SetDisplayOn+0x38>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	715a      	strb	r2, [r3, #5]
 80010d6:	e004      	b.n	80010e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80010d8:	23ae      	movs	r3, #174	; 0xae
 80010da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ssd1306_SetDisplayOn+0x38>)
 80010de:	2200      	movs	r2, #0
 80010e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fdd3 	bl	8000c90 <ssd1306_WriteCommand>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000a18 	.word	0x20000a18

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_MspInit+0x54>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <HAL_MspInit+0x54>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_MspInit+0x54>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_MspInit+0x54>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_MspInit+0x54>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_MspInit+0x54>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	210f      	movs	r1, #15
 800113a:	f06f 0001 	mvn.w	r0, #1
 800113e:	f000 ff27 	bl	8001f90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_ADC_MspInit+0x7c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d127      	bne.n	80011c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011aa:	230f      	movs	r3, #15
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_ADC_MspInit+0x84>)
 80011be:	f000 ff11 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012000 	.word	0x40012000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_I2C_MspInit+0xc0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d14a      	bne.n	8001290 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_I2C_MspInit+0xc4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_I2C_MspInit+0xc4>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_I2C_MspInit+0xc4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_I2C_MspInit+0xc4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <HAL_I2C_MspInit+0xc4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_I2C_MspInit+0xc4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001238:	2312      	movs	r3, #18
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001244:	2304      	movs	r3, #4
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001250:	f000 fec8 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001254:	2310      	movs	r3, #16
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001258:	2312      	movs	r3, #18
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001264:	2309      	movs	r3, #9
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <HAL_I2C_MspInit+0xcc>)
 8001270:	f000 feb8 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_I2C_MspInit+0xc4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_I2C_MspInit+0xc4>)
 800127e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_I2C_MspInit+0xc4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40005c00 	.word	0x40005c00
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400

080012a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d149      	bne.n	800135e <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a25      	ldr	r2, [pc, #148]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800131e:	2320      	movs	r3, #32
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <HAL_TIM_Encoder_MspInit+0xc4>)
 800133a:	f000 fe53 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800133e:	2308      	movs	r3, #8
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800134e:	2301      	movs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_TIM_Encoder_MspInit+0xc8>)
 800135a:	f000 fe43 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_InitTick+0xd0>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	4a2d      	ldr	r2, [pc, #180]	; (8001444 <HAL_InitTick+0xd0>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6453      	str	r3, [r2, #68]	; 0x44
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_InitTick+0xd0>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a0:	f107 020c 	add.w	r2, r7, #12
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fab6 	bl	800491c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013b0:	f003 faa0 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 80013b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	4a23      	ldr	r2, [pc, #140]	; (8001448 <HAL_InitTick+0xd4>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	3b01      	subs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_InitTick+0xd8>)
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_InitTick+0xdc>)
 80013c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_InitTick+0xd8>)
 80013cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_InitTick+0xd8>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_InitTick+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_InitTick+0xd8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_InitTick+0xd8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <HAL_InitTick+0xd8>)
 80013ec:	f003 fac8 	bl	8004980 <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d11b      	bne.n	8001436 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013fe:	4813      	ldr	r0, [pc, #76]	; (800144c <HAL_InitTick+0xd8>)
 8001400:	f003 fb18 	bl	8004a34 <HAL_TIM_Base_Start_IT>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800140a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800140e:	2b00      	cmp	r3, #0
 8001410:	d111      	bne.n	8001436 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001412:	2019      	movs	r0, #25
 8001414:	f000 fdd8 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d808      	bhi.n	8001430 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800141e:	2200      	movs	r2, #0
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	2019      	movs	r0, #25
 8001424:	f000 fdb4 	bl	8001f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_InitTick+0xe0>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e002      	b.n	8001436 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800143a:	4618      	mov	r0, r3
 800143c:	3730      	adds	r7, #48	; 0x30
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	431bde83 	.word	0x431bde83
 800144c:	20000a20 	.word	0x20000a20
 8001450:	40010000 	.word	0x40010000
 8001454:	2000001c 	.word	0x2000001c

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800148a:	f003 fbdb 	bl	8004c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000a20 	.word	0x20000a20

08001498 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <OTG_FS_IRQHandler+0x10>)
 800149e:	f001 fcd0 	bl	8002e42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20004ca4 	.word	0x20004ca4

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f008 ff9e 	bl	800a41c <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20010000 	.word	0x20010000
 800150c:	00000400 	.word	0x00000400
 8001510:	20000a68 	.word	0x20000a68
 8001514:	20005218 	.word	0x20005218

08001518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001558:	4c0b      	ldr	r4, [pc, #44]	; (8001588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001566:	f7ff ffd7 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f008 ff5d 	bl	800a428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff f857 	bl	8000620 <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001580:	0800b4f4 	.word	0x0800b4f4
  ldr r2, =_sbss
 8001584:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001588:	20005218 	.word	0x20005218

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_Init+0x40>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_Init+0x40>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x40>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 fcde 	bl	8001f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f7ff fed8 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fd98 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000020 	.word	0x20000020
 80015f8:	20000a6c 	.word	0x20000a6c

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000a6c 	.word	0x20000a6c

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000020 	.word	0x20000020

0800165c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e033      	b.n	80016da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fd68 	bl	8001150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 faba 	bl	8001c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ca:	e001      	b.n	80016d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Start+0x1a>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e097      	b.n	800182e <HAL_ADC_Start+0x14a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d018      	beq.n	8001746 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001724:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_ADC_Start+0x158>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a45      	ldr	r2, [pc, #276]	; (8001840 <HAL_ADC_Start+0x15c>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9a      	lsrs	r2, r3, #18
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001738:	e002      	b.n	8001740 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d15f      	bne.n	8001814 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800177e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001792:	d106      	bne.n	80017a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	f023 0206 	bic.w	r2, r3, #6
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_ADC_Start+0x160>)
 80017b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d129      	bne.n	800182c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e020      	b.n	800182c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a16      	ldr	r2, [pc, #88]	; (8001848 <HAL_ADC_Start+0x164>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d11b      	bne.n	800182c <HAL_ADC_Start+0x148>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d114      	bne.n	800182c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e00b      	b.n	800182c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000018 	.word	0x20000018
 8001840:	431bde83 	.word	0x431bde83
 8001844:	40012300 	.word	0x40012300
 8001848:	40012000 	.word	0x40012000

0800184c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Stop+0x16>
 800185e:	2302      	movs	r3, #2
 8001860:	e021      	b.n	80018a6 <HAL_ADC_Stop+0x5a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ce:	d113      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018de:	d10b      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e063      	b.n	80019c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018f8:	f7ff fe80 	bl	80015fc <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018fe:	e021      	b.n	8001944 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001906:	d01d      	beq.n	8001944 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_ADC_PollForConversion+0x6c>
 800190e:	f7ff fe75 	bl	80015fc <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d212      	bcs.n	8001944 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b02      	cmp	r3, #2
 800192a:	d00b      	beq.n	8001944 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e03d      	b.n	80019c0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b02      	cmp	r3, #2
 8001950:	d1d6      	bne.n	8001900 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0212 	mvn.w	r2, #18
 800195a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d123      	bne.n	80019be <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800197a:	2b00      	cmp	r3, #0
 800197c:	d11f      	bne.n	80019be <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001996:	2b00      	cmp	r3, #0
 8001998:	d111      	bne.n	80019be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e105      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x228>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d925      	bls.n	8001a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	400a      	ands	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3b1e      	subs	r3, #30
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	e022      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	2207      	movs	r2, #7
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4403      	add	r3, r0
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d824      	bhi.n	8001af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b05      	subs	r3, #5
 8001abc:	221f      	movs	r2, #31
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	400a      	ands	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b05      	subs	r3, #5
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
 8001af2:	e04c      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d824      	bhi.n	8001b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	; 0x23
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b23      	subs	r3, #35	; 0x23
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
 8001b44:	e023      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	; 0x41
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b41      	subs	r3, #65	; 0x41
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_ADC_ConfigChannel+0x234>)
 8001b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_ADC_ConfigChannel+0x238>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <HAL_ADC_ConfigChannel+0x238>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d123      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d003      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x1e6>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b11      	cmp	r3, #17
 8001bc8:	d11b      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d111      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_ADC_ConfigChannel+0x23c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_ADC_ConfigChannel+0x240>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9a      	lsrs	r2, r3, #18
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f9      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	20000018 	.word	0x20000018
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c30:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <ADC_Init+0x1f0>)
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	021a      	lsls	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <ADC_Init+0x1f4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e00f      	b.n	8001d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0202 	bic.w	r2, r2, #2
 8001d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
 8001d40:	005a      	lsls	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	035a      	lsls	r2, r3, #13
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	e007      	b.n	8001d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	051a      	lsls	r2, r3, #20
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dde:	025a      	lsls	r2, r3, #9
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	029a      	lsls	r2, r3, #10
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40012300 	.word	0x40012300
 8001e1c:	0f000001 	.word	0x0f000001

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff4c 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa2:	f7ff ff61 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f7ff ffb1 	bl	8001f14 <NVIC_EncodePriority>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff80 	bl	8001ec0 <__NVIC_SetPriority>
}
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff54 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e159      	b.n	80022b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8148 	bne.w	80022ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a2 	beq.w	80022ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b57      	ldr	r3, [pc, #348]	; (80022cc <HAL_GPIO_Init+0x2e8>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a56      	ldr	r2, [pc, #344]	; (80022cc <HAL_GPIO_Init+0x2e8>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <HAL_GPIO_Init+0x2e8>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <HAL_GPIO_Init+0x2f0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x202>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_GPIO_Init+0x2f4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x1fe>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a47      	ldr	r2, [pc, #284]	; (80022dc <HAL_GPIO_Init+0x2f8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x1fa>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x1f6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <HAL_GPIO_Init+0x300>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x1f2>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <HAL_GPIO_Init+0x304>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_GPIO_Init+0x304>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227e:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f aea2 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e12b      	b.n	8002556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe ff60 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	; 0x24
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002350:	f002 fabc 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a81      	ldr	r2, [pc, #516]	; (8002560 <HAL_I2C_Init+0x274>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d807      	bhi.n	8002370 <HAL_I2C_Init+0x84>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a80      	ldr	r2, [pc, #512]	; (8002564 <HAL_I2C_Init+0x278>)
 8002364:	4293      	cmp	r3, r2
 8002366:	bf94      	ite	ls
 8002368:	2301      	movls	r3, #1
 800236a:	2300      	movhi	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e006      	b.n	800237e <HAL_I2C_Init+0x92>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a7d      	ldr	r2, [pc, #500]	; (8002568 <HAL_I2C_Init+0x27c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	bf94      	ite	ls
 8002378:	2301      	movls	r3, #1
 800237a:	2300      	movhi	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0e7      	b.n	8002556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a78      	ldr	r2, [pc, #480]	; (800256c <HAL_I2C_Init+0x280>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_I2C_Init+0x274>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d802      	bhi.n	80023c0 <HAL_I2C_Init+0xd4>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3301      	adds	r3, #1
 80023be:	e009      	b.n	80023d4 <HAL_I2C_Init+0xe8>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_I2C_Init+0x284>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	3301      	adds	r3, #1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	495c      	ldr	r1, [pc, #368]	; (8002560 <HAL_I2C_Init+0x274>)
 80023f0:	428b      	cmp	r3, r1
 80023f2:	d819      	bhi.n	8002428 <HAL_I2C_Init+0x13c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e59      	subs	r1, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002408:	400b      	ands	r3, r1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_I2C_Init+0x138>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e59      	subs	r1, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fbb1 f3f3 	udiv	r3, r1, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	e051      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002424:	2304      	movs	r3, #4
 8002426:	e04f      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d111      	bne.n	8002454 <HAL_I2C_Init+0x168>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e012      	b.n	800247a <HAL_I2C_Init+0x18e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x196>
 800247e:	2301      	movs	r3, #1
 8002480:	e022      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10e      	bne.n	80024a8 <HAL_I2C_Init+0x1bc>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e58      	subs	r0, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	440b      	add	r3, r1
 8002498:	fbb0 f3f3 	udiv	r3, r0, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a6:	e00f      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	0099      	lsls	r1, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	6809      	ldr	r1, [r1, #0]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6911      	ldr	r1, [r2, #16]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68d2      	ldr	r2, [r2, #12]
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	000186a0 	.word	0x000186a0
 8002564:	001e847f 	.word	0x001e847f
 8002568:	003d08ff 	.word	0x003d08ff
 800256c:	431bde83 	.word	0x431bde83
 8002570:	10624dd3 	.word	0x10624dd3

08002574 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	817b      	strh	r3, [r7, #10]
 8002586:	460b      	mov	r3, r1
 8002588:	813b      	strh	r3, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800258e:	f7ff f835 	bl	80015fc <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b20      	cmp	r3, #32
 800259e:	f040 80d9 	bne.w	8002754 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2319      	movs	r3, #25
 80025a8:	2201      	movs	r2, #1
 80025aa:	496d      	ldr	r1, [pc, #436]	; (8002760 <HAL_I2C_Mem_Write+0x1ec>)
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f971 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0cc      	b.n	8002756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Mem_Write+0x56>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0c5      	b.n	8002756 <HAL_I2C_Mem_Write+0x1e2>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d007      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2221      	movs	r2, #33	; 0x21
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a4d      	ldr	r2, [pc, #308]	; (8002764 <HAL_I2C_Mem_Write+0x1f0>)
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002632:	88f8      	ldrh	r0, [r7, #6]
 8002634:	893a      	ldrh	r2, [r7, #8]
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4603      	mov	r3, r0
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f890 	bl	8002768 <I2C_RequestMemoryWrite>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d052      	beq.n	80026f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e081      	b.n	8002756 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f9f2 	bl	8002a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b04      	cmp	r3, #4
 8002668:	d107      	bne.n	800267a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06b      	b.n	8002756 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11b      	bne.n	80026f4 <HAL_I2C_Mem_Write+0x180>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d017      	beq.n	80026f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1aa      	bne.n	8002652 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f9de 	bl	8002ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b04      	cmp	r3, #4
 8002712:	d107      	bne.n	8002724 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e016      	b.n	8002756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	00100002 	.word	0x00100002
 8002764:	ffff0000 	.word	0xffff0000

08002768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2200      	movs	r2, #0
 800279a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f878 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b8:	d103      	bne.n	80027c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e05f      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <I2C_RequestMemoryWrite+0x128>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f8b0 	bl	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e04c      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f91a 	bl	8002a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b04      	cmp	r3, #4
 8002818:	d107      	bne.n	800282a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e02b      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002834:	893b      	ldrh	r3, [r7, #8]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	e021      	b.n	8002884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002840:	893b      	ldrh	r3, [r7, #8]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8f4 	bl	8002a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e005      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e025      	b.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d021      	beq.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7fe fea5 	bl	80015fc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d116      	bne.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e023      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10d      	bne.n	8002918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	e00c      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	429a      	cmp	r2, r3
 8002936:	d0b6      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002950:	e051      	b.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d123      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800297a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e046      	b.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d021      	beq.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe fe23 	bl	80015fc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d116      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e020      	b.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10c      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	e00b      	b.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d18d      	bne.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a4c:	e02d      	b.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f878 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e02d      	b.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d021      	beq.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7fe fdc9 	bl	80015fc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e007      	b.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d1ca      	bne.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ace:	e02d      	b.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f837 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e02d      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae6:	d021      	beq.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae8:	f7fe fd88 	bl	80015fc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d1ca      	bne.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d11b      	bne.n	8002b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba4:	b08f      	sub	sp, #60	; 0x3c
 8002ba6:	af0a      	add	r7, sp, #40	; 0x28
 8002ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e10f      	b.n	8002dd4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f007 f92c 	bl	8009e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fb6d 	bl	80052d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	687e      	ldr	r6, [r7, #4]
 8002c00:	466d      	mov	r5, sp
 8002c02:	f106 0410 	add.w	r4, r6, #16
 8002c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c12:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c16:	1d33      	adds	r3, r6, #4
 8002c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f002 fa44 	bl	80050a8 <USB_CoreInit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0d0      	b.n	8002dd4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fb5b 	bl	80052f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e04a      	b.n	8002cda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	333d      	adds	r3, #61	; 0x3d
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	333c      	adds	r3, #60	; 0x3c
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	b298      	uxth	r0, r3
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	4602      	mov	r2, r0
 8002c82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3340      	adds	r3, #64	; 0x40
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3348      	adds	r3, #72	; 0x48
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334c      	adds	r3, #76	; 0x4c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d3af      	bcc.n	8002c44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e044      	b.n	8002d74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	3301      	adds	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3b5      	bcc.n	8002cea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	687e      	ldr	r6, [r7, #4]
 8002d86:	466d      	mov	r5, sp
 8002d88:	f106 0410 	add.w	r4, r6, #16
 8002d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d9c:	1d33      	adds	r3, r6, #4
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	6838      	ldr	r0, [r7, #0]
 8002da2:	f002 faf3 	bl	800538c <USB_DevInit>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e00d      	b.n	8002dd4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fc42 	bl	8006656 <USB_DevDisconnect>

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ddc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_Start+0x1c>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e020      	b.n	8002e3a <HAL_PCD_Start+0x5e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d109      	bne.n	8002e1c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d005      	beq.n	8002e1c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 fa45 	bl	80052b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fbf2 	bl	8006614 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e42:	b590      	push	{r4, r7, lr}
 8002e44:	b08d      	sub	sp, #52	; 0x34
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fcb0 	bl	80067be <USB_GetMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 848a 	bne.w	800377a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fc14 	bl	8006698 <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8480 	beq.w	8003778 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fc01 	bl	8006698 <USB_ReadInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d107      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f002 0202 	and.w	r2, r2, #2
 8002eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fbef 	bl	8006698 <USB_ReadInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d161      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0210 	bic.w	r2, r2, #16
 8002ed2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	0c5b      	lsrs	r3, r3, #17
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d124      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d035      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6a38      	ldr	r0, [r7, #32]
 8002f20:	f003 fa26 	bl	8006370 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f30:	441a      	add	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a1a      	ldr	r2, [r3, #32]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f42:	441a      	add	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	621a      	str	r2, [r3, #32]
 8002f48:	e016      	b.n	8002f78 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	0c5b      	lsrs	r3, r3, #17
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d110      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6a38      	ldr	r0, [r7, #32]
 8002f62:	f003 fa05 	bl	8006370 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f72:	441a      	add	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0210 	orr.w	r2, r2, #16
 8002f86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 fb83 	bl	8006698 <USB_ReadInterrupts>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f9c:	f040 80a7 	bne.w	80030ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fb88 	bl	80066be <USB_ReadDevAllOutEpInterrupt>
 8002fae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fb0:	e099      	b.n	80030e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 808e 	beq.w	80030da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fbac 	bl	8006726 <USB_ReadDevOutEPInterrupt>
 8002fce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2301      	movs	r3, #1
 8002fea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 feaa 	bl	8003d48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	461a      	mov	r2, r3
 800300c:	2308      	movs	r3, #8
 800300e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 ff80 	bl	8003f18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	2310      	movs	r3, #16
 8003032:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d030      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d109      	bne.n	800305e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	78db      	ldrb	r3, [r3, #3]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d108      	bne.n	800308e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2200      	movs	r2, #0
 8003080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f006 ffcb 	bl	800a024 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	461a      	mov	r2, r3
 800309c:	2302      	movs	r3, #2
 800309e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	2320      	movs	r3, #32
 80030ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d2:	461a      	mov	r2, r3
 80030d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	3301      	adds	r3, #1
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f af62 	bne.w	8002fb2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fad0 	bl	8006698 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003102:	f040 80db 	bne.w	80032bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 faf1 	bl	80066f2 <USB_ReadDevAllInEpInterrupt>
 8003110:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003116:	e0cd      	b.n	80032b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80c2 	beq.w	80032a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fb17 	bl	8006762 <USB_ReadDevInEPInterrupt>
 8003134:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d057      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	69f9      	ldr	r1, [r7, #28]
 800315c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003160:	4013      	ands	r3, r2
 8003162:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	461a      	mov	r2, r3
 8003172:	2301      	movs	r3, #1
 8003174:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d132      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334c      	adds	r3, #76	; 0x4c
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4403      	add	r3, r0
 800319e:	3348      	adds	r3, #72	; 0x48
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4419      	add	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4403      	add	r3, r0
 80031b2:	334c      	adds	r3, #76	; 0x4c
 80031b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d113      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x3a2>
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3354      	adds	r3, #84	; 0x54
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031dc:	461a      	mov	r2, r3
 80031de:	2101      	movs	r1, #1
 80031e0:	f003 fb1e 	bl	8006820 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f006 fe9f 	bl	8009f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2308      	movs	r3, #8
 800320a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003222:	461a      	mov	r2, r3
 8003224:	2310      	movs	r3, #16
 8003226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323e:	461a      	mov	r2, r3
 8003240:	2340      	movs	r3, #64	; 0x40
 8003242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d023      	beq.n	8003296 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800324e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003250:	6a38      	ldr	r0, [r7, #32]
 8003252:	f002 f9ff 	bl	8005654 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3338      	adds	r3, #56	; 0x38
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f006 fee2 	bl	800a048 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	461a      	mov	r2, r3
 8003292:	2302      	movs	r3, #2
 8003294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fcc3 	bl	8003c2e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	3301      	adds	r3, #1
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f af2e 	bne.w	8003118 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 f9e9 	bl	8006698 <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032d0:	d122      	bne.n	8003318 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032f8:	2100      	movs	r1, #0
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 feaa 	bl	8004054 <HAL_PCDEx_LPM_Callback>
 8003300:	e002      	b.n	8003308 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f006 fe80 	bl	800a008 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003316:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f9bb 	bl	8006698 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332c:	d112      	bne.n	8003354 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d102      	bne.n	8003344 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f006 fe3c 	bl	8009fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003352:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f003 f99d 	bl	8006698 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	f040 80b7 	bne.w	80034da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2110      	movs	r1, #16
 8003386:	4618      	mov	r0, r3
 8003388:	f002 f964 	bl	8005654 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003390:	e046      	b.n	8003420 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339e:	461a      	mov	r2, r3
 80033a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b6:	0151      	lsls	r1, r2, #5
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	440a      	add	r2, r1
 80033bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340a:	0151      	lsls	r1, r2, #5
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	440a      	add	r2, r1
 8003410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003418:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	3301      	adds	r3, #1
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003426:	429a      	cmp	r2, r3
 8003428:	d3b3      	bcc.n	8003392 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003438:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800343c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003456:	f043 030b 	orr.w	r3, r3, #11
 800345a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346c:	f043 030b 	orr.w	r3, r3, #11
 8003470:	6453      	str	r3, [r2, #68]	; 0x44
 8003472:	e015      	b.n	80034a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003486:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800348a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349a:	f043 030b 	orr.w	r3, r3, #11
 800349e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034c4:	461a      	mov	r2, r3
 80034c6:	f003 f9ab 	bl	8006820 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 f8da 	bl	8006698 <USB_ReadInterrupts>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ee:	d124      	bne.n	800353a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 f970 	bl	80067da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 f925 	bl	800574e <USB_GetDevSpeed>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681c      	ldr	r4, [r3, #0]
 8003510:	f001 f9d0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 8003514:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4620      	mov	r0, r4
 8003520:	f001 fe24 	bl	800516c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f006 fd2a 	bl	8009f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003538:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f003 f8aa 	bl	8006698 <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b08      	cmp	r3, #8
 800354c:	d10a      	bne.n	8003564 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f006 fd07 	bl	8009f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f002 0208 	and.w	r2, r2, #8
 8003562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 f895 	bl	8006698 <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d122      	bne.n	80035be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	e014      	b.n	80035b4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb0f 	bl	8003bcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3e5      	bcc.n	800358a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 f868 	bl	8006698 <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d2:	d13b      	bne.n	800364c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d4:	2301      	movs	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
 80035d8:	e02b      	b.n	8003632 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3340      	adds	r3, #64	; 0x40
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d115      	bne.n	800362c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003600:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	da12      	bge.n	800362c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	333f      	adds	r3, #63	; 0x3f
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fad0 	bl	8003bcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	3301      	adds	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	429a      	cmp	r2, r3
 800363a:	d3ce      	bcc.n	80035da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800364a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f003 f821 	bl	8006698 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003660:	d155      	bne.n	800370e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003662:	2301      	movs	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e045      	b.n	80036f4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d12e      	bne.n	80036ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003690:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	da2b      	bge.n	80036ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80036a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d121      	bne.n	80036ee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ea:	6053      	str	r3, [r2, #4]
            break;
 80036ec:	e007      	b.n	80036fe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	3301      	adds	r3, #1
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3b4      	bcc.n	8003668 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800370c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f002 ffc0 	bl	8006698 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d10a      	bne.n	800373a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f006 fca1 	bl	800a06c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f002 ffaa 	bl	8006698 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d115      	bne.n	800377a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f006 fc91 	bl	800a088 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	e000      	b.n	800377a <HAL_PCD_IRQHandler+0x938>
      return;
 8003778:	bf00      	nop
    }
  }
}
 800377a:	3734      	adds	r7, #52	; 0x34
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}

08003780 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PCD_SetAddress+0x1a>
 8003796:	2302      	movs	r3, #2
 8003798:	e013      	b.n	80037c2 <HAL_PCD_SetAddress+0x42>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 ff08 	bl	80065c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	4608      	mov	r0, r1
 80037d4:	4611      	mov	r1, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	4603      	mov	r3, r0
 80037da:	70fb      	strb	r3, [r7, #3]
 80037dc:	460b      	mov	r3, r1
 80037de:	803b      	strh	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da0f      	bge.n	8003810 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	3338      	adds	r3, #56	; 0x38
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	705a      	strb	r2, [r3, #1]
 800380e:	e00f      	b.n	8003830 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800383c:	883a      	ldrh	r2, [r7, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	78ba      	ldrb	r2, [r7, #2]
 8003846:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800385a:	78bb      	ldrb	r3, [r7, #2]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d102      	bne.n	8003866 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_PCD_EP_Open+0xaa>
 8003870:	2302      	movs	r3, #2
 8003872:	e00e      	b.n	8003892 <HAL_PCD_EP_Open+0xc8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f001 ff88 	bl	8005798 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003890:	7afb      	ldrb	r3, [r7, #11]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da0f      	bge.n	80038ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	3338      	adds	r3, #56	; 0x38
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	705a      	strb	r2, [r3, #1]
 80038cc:	e00f      	b.n	80038ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_PCD_EP_Close+0x6e>
 8003904:	2302      	movs	r3, #2
 8003906:	e00e      	b.n	8003926 <HAL_PCD_EP_Close+0x8c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	4618      	mov	r0, r3
 8003918:	f001 ffc6 	bl	80058a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	460b      	mov	r3, r1
 800393c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	3304      	adds	r3, #4
 8003956:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003970:	7afb      	ldrb	r3, [r7, #11]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	b2da      	uxtb	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	f002 faa5 	bl	8005ef0 <USB_EP0StartXfer>
 80039a6:	e008      	b.n	80039ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6979      	ldr	r1, [r7, #20]
 80039b6:	f002 f853 	bl	8005a60 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	460b      	mov	r3, r1
 80039d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d4:	7afb      	ldrb	r3, [r7, #11]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	3338      	adds	r3, #56	; 0x38
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2201      	movs	r2, #1
 8003a02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a1e:	7afb      	ldrb	r3, [r7, #11]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	f002 fa5b 	bl	8005ef0 <USB_EP0StartXfer>
 8003a3a:	e008      	b.n	8003a4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	f002 f809 	bl	8005a60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d901      	bls.n	8003a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e050      	b.n	8003b18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0f      	bge.n	8003a9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3338      	adds	r3, #56	; 0x38
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	705a      	strb	r2, [r3, #1]
 8003a9c:	e00d      	b.n	8003aba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_PCD_EP_SetStall+0x82>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e01e      	b.n	8003b18 <HAL_PCD_EP_SetStall+0xc0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f002 fc99 	bl	8006420 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	b2d9      	uxtb	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f002 fe89 	bl	8006820 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d901      	bls.n	8003b3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e042      	b.n	8003bc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da0f      	bge.n	8003b66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	3338      	adds	r3, #56	; 0x38
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	705a      	strb	r2, [r3, #1]
 8003b64:	e00f      	b.n	8003b86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 020f 	and.w	r2, r3, #15
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_PCD_EP_ClrStall+0x86>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e00e      	b.n	8003bc4 <HAL_PCD_EP_ClrStall+0xa4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f002 fca1 	bl	80064fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	da0c      	bge.n	8003bfa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	3338      	adds	r3, #56	; 0x38
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e00c      	b.n	8003c14 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 020f 	and.w	r2, r3, #15
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68f9      	ldr	r1, [r7, #12]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 fac0 	bl	80061a0 <USB_EPStopXfer>
 8003c20:	4603      	mov	r3, r0
 8003c22:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c24:	7afb      	ldrb	r3, [r7, #11]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	3338      	adds	r3, #56	; 0x38
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	3304      	adds	r3, #4
 8003c54:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d901      	bls.n	8003c66 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06c      	b.n	8003d40 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d902      	bls.n	8003c82 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3303      	adds	r3, #3
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c8a:	e02b      	b.n	8003ce4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d902      	bls.n	8003ca8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3303      	adds	r3, #3
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6919      	ldr	r1, [r3, #16]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f002 fb14 	bl	80062f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	441a      	add	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d809      	bhi.n	8003d0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d203      	bcs.n	8003d0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1be      	bne.n	8003c8c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d811      	bhi.n	8003d3e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2201      	movs	r2, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	6939      	ldr	r1, [r7, #16]
 8003d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	333c      	adds	r3, #60	; 0x3c
 8003d60:	3304      	adds	r3, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d17b      	bne.n	8003e76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d015      	beq.n	8003db4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4a61      	ldr	r2, [pc, #388]	; (8003f10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	f240 80b9 	bls.w	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80b3 	beq.w	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db0:	6093      	str	r3, [r2, #8]
 8003db2:	e0a7      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2320      	movs	r3, #32
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	e098      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 8093 	bne.w	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4a4b      	ldr	r2, [pc, #300]	; (8003f10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d90f      	bls.n	8003e06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	e07e      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	3304      	adds	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	0159      	lsls	r1, r3, #5
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e32:	1ad2      	subs	r2, r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d114      	bne.n	8003e68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e50:	461a      	mov	r2, r3
 8003e52:	2101      	movs	r1, #1
 8003e54:	f002 fce4 	bl	8006820 <USB_EP0_OutStart>
 8003e58:	e006      	b.n	8003e68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	441a      	add	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f006 f842 	bl	8009ef8 <HAL_PCD_DataOutStageCallback>
 8003e74:	e046      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4a26      	ldr	r2, [pc, #152]	; (8003f14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d124      	bne.n	8003ec8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	e032      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f006 f819 	bl	8009ef8 <HAL_PCD_DataOutStageCallback>
 8003ec6:	e01d      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d114      	bne.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	f002 fc94 	bl	8006820 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f005 fffa 	bl	8009ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	4f54300a 	.word	0x4f54300a
 8003f14:	4f54310a 	.word	0x4f54310a

08003f18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	333c      	adds	r3, #60	; 0x3c
 8003f30:	3304      	adds	r3, #4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d90e      	bls.n	8003f6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	461a      	mov	r2, r3
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f005 ffb1 	bl	8009ed4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d90c      	bls.n	8003f94 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d108      	bne.n	8003f94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2101      	movs	r1, #1
 8003f90:	f002 fc46 	bl	8006820 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	4f54300a 	.word	0x4f54300a

08003fa4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fc2:	883b      	ldrh	r3, [r7, #0]
 8003fc4:	0419      	lsls	r1, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd0:	e028      	b.n	8004024 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e00d      	b.n	8004002 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	3340      	adds	r3, #64	; 0x40
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	3301      	adds	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	3b01      	subs	r3, #1
 8004008:	429a      	cmp	r2, r3
 800400a:	d3ec      	bcc.n	8003fe6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800400c:	883b      	ldrh	r3, [r7, #0]
 800400e:	0418      	lsls	r0, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	3b01      	subs	r3, #1
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	4302      	orrs	r2, r0
 800401c:	3340      	adds	r3, #64	; 0x40
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e267      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d075      	beq.n	8004176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408a:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d112      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4b82      	ldr	r3, [pc, #520]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	4b7e      	ldr	r3, [pc, #504]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05b      	beq.n	8004174 <HAL_RCC_OscConfig+0x108>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d157      	bne.n	8004174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e242      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x74>
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a75      	ldr	r2, [pc, #468]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x98>
 80040ea:	4b70      	ldr	r3, [pc, #448]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6f      	ldr	r2, [pc, #444]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6c      	ldr	r2, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 8004104:	4b69      	ldr	r3, [pc, #420]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a68      	ldr	r2, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800410a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fd fa6a 	bl	80015fc <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd fa66 	bl	80015fc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e207      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xc0>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fd fa56 	bl	80015fc <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004154:	f7fd fa52 	bl	80015fc <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1f3      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	4b51      	ldr	r3, [pc, #324]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0xe8>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d063      	beq.n	800424a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	2b08      	cmp	r3, #8
 8004198:	d11c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b44      	ldr	r3, [pc, #272]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d116      	bne.n	80041d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_RCC_OscConfig+0x152>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1c7      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4937      	ldr	r1, [pc, #220]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	e03a      	b.n	800424a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_OscConfig+0x244>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fa0b 	bl	80015fc <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fd fa07 	bl	80015fc <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1a8      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4925      	ldr	r1, [pc, #148]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <HAL_RCC_OscConfig+0x244>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd f9ea 	bl	80015fc <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422c:	f7fd f9e6 	bl	80015fc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e187      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d036      	beq.n	80042c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_RCC_OscConfig+0x248>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fd f9ca 	bl	80015fc <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426c:	f7fd f9c6 	bl	80015fc <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e167      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x200>
 800428a:	e01b      	b.n	80042c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_OscConfig+0x248>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fd f9b3 	bl	80015fc <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	e00e      	b.n	80042b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429a:	f7fd f9af 	bl	80015fc <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d907      	bls.n	80042b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e150      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	42470000 	.word	0x42470000
 80042b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ea      	bne.n	800429a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8097 	beq.w	8004400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b81      	ldr	r3, [pc, #516]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	4b7d      	ldr	r3, [pc, #500]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a7c      	ldr	r2, [pc, #496]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b7a      	ldr	r3, [pc, #488]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b77      	ldr	r3, [pc, #476]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b74      	ldr	r3, [pc, #464]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a73      	ldr	r2, [pc, #460]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fd f96f 	bl	80015fc <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fd f96b 	bl	80015fc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e10c      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x2ea>
 8004348:	4b64      	ldr	r3, [pc, #400]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a63      	ldr	r2, [pc, #396]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x324>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b05      	cmp	r3, #5
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x30c>
 800435e:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a5e      	ldr	r2, [pc, #376]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a5b      	ldr	r2, [pc, #364]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0x324>
 8004378:	4b58      	ldr	r3, [pc, #352]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a57      	ldr	r2, [pc, #348]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	4b55      	ldr	r3, [pc, #340]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a54      	ldr	r2, [pc, #336]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd f930 	bl	80015fc <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fd f92c 	bl	80015fc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0cb      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	4b49      	ldr	r3, [pc, #292]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <HAL_RCC_OscConfig+0x334>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fd f91a 	bl	80015fc <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fd f916 	bl	80015fc <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0b5      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	4b3e      	ldr	r3, [pc, #248]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f4:	4b39      	ldr	r3, [pc, #228]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	4a38      	ldr	r2, [pc, #224]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a1 	beq.w	800454c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440a:	4b34      	ldr	r3, [pc, #208]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b08      	cmp	r3, #8
 8004414:	d05c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d141      	bne.n	80044a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <HAL_RCC_OscConfig+0x478>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd f8ea 	bl	80015fc <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd f8e6 	bl	80015fc <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e087      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	491b      	ldr	r1, [pc, #108]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x478>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fd f8bf 	bl	80015fc <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004482:	f7fd f8bb 	bl	80015fc <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e05c      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x416>
 80044a0:	e054      	b.n	800454c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCC_OscConfig+0x478>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fd f8a8 	bl	80015fc <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd f8a4 	bl	80015fc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e045      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x444>
 80044ce:	e03d      	b.n	800454c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e038      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40007000 	.word	0x40007000
 80044e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_RCC_OscConfig+0x4ec>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d028      	beq.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d121      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d11a      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800451e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004520:	4293      	cmp	r3, r2
 8004522:	d111      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	3b01      	subs	r3, #1
 8004532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0cc      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d90c      	bls.n	8004598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a58      	ldr	r2, [pc, #352]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d119      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d003      	beq.n	800461a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	2b03      	cmp	r3, #3
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e067      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fc ffd6 	bl	80015fc <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fc ffd2 	bl	80015fc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e04f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d20c      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f821 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490a      	ldr	r1, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fe36 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023c00 	.word	0x40023c00
 8004718:	40023800 	.word	0x40023800
 800471c:	0800b498 	.word	0x0800b498
 8004720:	20000018 	.word	0x20000018
 8004724:	2000001c 	.word	0x2000001c

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800472c:	b090      	sub	sp, #64	; 0x40
 800472e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	2300      	movs	r3, #0
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004738:	2300      	movs	r3, #0
 800473a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d00d      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x40>
 800474c:	2b08      	cmp	r3, #8
 800474e:	f200 80a1 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x16c>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x34>
 8004756:	2b04      	cmp	r3, #4
 8004758:	d003      	beq.n	8004762 <HAL_RCC_GetSysClockFreq+0x3a>
 800475a:	e09b      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b53      	ldr	r3, [pc, #332]	; (80048ac <HAL_RCC_GetSysClockFreq+0x184>)
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004760:	e09b      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004762:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004766:	e098      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004772:	4b4d      	ldr	r3, [pc, #308]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d028      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b4a      	ldr	r3, [pc, #296]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	2200      	movs	r2, #0
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	627a      	str	r2, [r7, #36]	; 0x24
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004790:	2100      	movs	r1, #0
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004794:	fb03 f201 	mul.w	r2, r3, r1
 8004798:	2300      	movs	r3, #0
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	4413      	add	r3, r2
 80047a0:	4a43      	ldr	r2, [pc, #268]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80047a2:	fba0 1202 	umull	r1, r2, r0, r2
 80047a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047a8:	460a      	mov	r2, r1
 80047aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80047ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ae:	4413      	add	r3, r2
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	2200      	movs	r2, #0
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	61fa      	str	r2, [r7, #28]
 80047ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047c2:	f7fb fd5d 	bl	8000280 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4613      	mov	r3, r2
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ce:	e053      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d0:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	099b      	lsrs	r3, r3, #6
 80047d6:	2200      	movs	r2, #0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	617a      	str	r2, [r7, #20]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047e2:	f04f 0b00 	mov.w	fp, #0
 80047e6:	4652      	mov	r2, sl
 80047e8:	465b      	mov	r3, fp
 80047ea:	f04f 0000 	mov.w	r0, #0
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	0159      	lsls	r1, r3, #5
 80047f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f8:	0150      	lsls	r0, r2, #5
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004802:	eb63 090b 	sbc.w	r9, r3, fp
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800481a:	ebb2 0408 	subs.w	r4, r2, r8
 800481e:	eb63 0509 	sbc.w	r5, r3, r9
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	00eb      	lsls	r3, r5, #3
 800482c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004830:	00e2      	lsls	r2, r4, #3
 8004832:	4614      	mov	r4, r2
 8004834:	461d      	mov	r5, r3
 8004836:	eb14 030a 	adds.w	r3, r4, sl
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	eb45 030b 	adc.w	r3, r5, fp
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484e:	4629      	mov	r1, r5
 8004850:	028b      	lsls	r3, r1, #10
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004858:	4621      	mov	r1, r4
 800485a:	028a      	lsls	r2, r1, #10
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	2200      	movs	r2, #0
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	60fa      	str	r2, [r7, #12]
 8004868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800486c:	f7fb fd08 	bl	8000280 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800489c:	4618      	mov	r0, r3
 800489e:	3740      	adds	r7, #64	; 0x40
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	017d7840 	.word	0x017d7840

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000018 	.word	0x20000018

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	0800b4a8 	.word	0x0800b4a8

080048f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048f8:	f7ff ffdc 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0b5b      	lsrs	r3, r3, #13
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	0800b4a8 	.word	0x0800b4a8

0800491c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	220f      	movs	r2, #15
 800492a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_RCC_GetClockConfig+0x5c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_RCC_GetClockConfig+0x5c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RCC_GetClockConfig+0x5c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_GetClockConfig+0x5c>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_RCC_GetClockConfig+0x60>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	601a      	str	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	40023c00 	.word	0x40023c00

08004980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e041      	b.n	8004a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f839 	bl	8004a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f000 fa70 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d001      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e044      	b.n	8004ad6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_TIM_Base_Start_IT+0xb8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d111      	bne.n	8004ac4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d010      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e007      	b.n	8004ad4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40000c00 	.word	0x40000c00
 8004af4:	40014000 	.word	0x40014000

08004af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e097      	b.n	8004c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fc fbc1 	bl	80012a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f000 f9a9 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b98:	f023 030c 	bic.w	r3, r3, #12
 8004b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	4313      	orrs	r3, r2
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0202 	mvn.w	r2, #2
 8004c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8ee 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8e0 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8f1 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0204 	mvn.w	r2, #4
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8c4 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8b6 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8c7 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0208 	mvn.w	r2, #8
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f89a 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f88c 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f89d 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f870 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f862 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f873 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d10e      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d107      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0201 	mvn.w	r2, #1
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb ff46 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f950 	bl	8005094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f838 	bl	8004e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d10e      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d107      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0220 	mvn.w	r2, #32
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f91a 	bl	8005080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <TIM_Base_SetConfig+0xe4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00f      	beq.n	8004edc <TIM_Base_SetConfig+0x38>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d00b      	beq.n	8004edc <TIM_Base_SetConfig+0x38>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a31      	ldr	r2, [pc, #196]	; (8004f8c <TIM_Base_SetConfig+0xe8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_Base_SetConfig+0x38>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a30      	ldr	r2, [pc, #192]	; (8004f90 <TIM_Base_SetConfig+0xec>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_Base_SetConfig+0x38>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <TIM_Base_SetConfig+0xf0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d108      	bne.n	8004eee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a25      	ldr	r2, [pc, #148]	; (8004f88 <TIM_Base_SetConfig+0xe4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01b      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d017      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <TIM_Base_SetConfig+0xe8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <TIM_Base_SetConfig+0xec>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00f      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <TIM_Base_SetConfig+0xf0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1f      	ldr	r2, [pc, #124]	; (8004f98 <TIM_Base_SetConfig+0xf4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <TIM_Base_SetConfig+0xf8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_Base_SetConfig+0x8a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <TIM_Base_SetConfig+0xfc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d108      	bne.n	8004f40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <TIM_Base_SetConfig+0xe4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d103      	bne.n	8004f74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	615a      	str	r2, [r3, #20]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e050      	b.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d018      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d013      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a16      	ldr	r2, [pc, #88]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10c      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40014000 	.word	0x40014000

08005080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a8:	b084      	sub	sp, #16
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	f107 001c 	add.w	r0, r7, #28
 80050b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d122      	bne.n	8005106 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fbee 	bl	80068dc <USB_CoreReset>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	e01a      	b.n	800513c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 fbe2 	bl	80068dc <USB_CoreReset>
 8005118:	4603      	mov	r3, r0
 800511a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
 800512e:	e005      	b.n	800513c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10b      	bne.n	800515a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f043 0206 	orr.w	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005166:	b004      	add	sp, #16
 8005168:	4770      	bx	lr
	...

0800516c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d165      	bne.n	800524c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4a41      	ldr	r2, [pc, #260]	; (8005288 <USB_SetTurnaroundTime+0x11c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d906      	bls.n	8005196 <USB_SetTurnaroundTime+0x2a>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a40      	ldr	r2, [pc, #256]	; (800528c <USB_SetTurnaroundTime+0x120>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d202      	bcs.n	8005196 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005190:	230f      	movs	r3, #15
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e062      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4a3c      	ldr	r2, [pc, #240]	; (800528c <USB_SetTurnaroundTime+0x120>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d306      	bcc.n	80051ac <USB_SetTurnaroundTime+0x40>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a3b      	ldr	r2, [pc, #236]	; (8005290 <USB_SetTurnaroundTime+0x124>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d202      	bcs.n	80051ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051a6:	230e      	movs	r3, #14
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e057      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <USB_SetTurnaroundTime+0x124>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d306      	bcc.n	80051c2 <USB_SetTurnaroundTime+0x56>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a37      	ldr	r2, [pc, #220]	; (8005294 <USB_SetTurnaroundTime+0x128>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d202      	bcs.n	80051c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051bc:	230d      	movs	r3, #13
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e04c      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4a33      	ldr	r2, [pc, #204]	; (8005294 <USB_SetTurnaroundTime+0x128>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d306      	bcc.n	80051d8 <USB_SetTurnaroundTime+0x6c>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a32      	ldr	r2, [pc, #200]	; (8005298 <USB_SetTurnaroundTime+0x12c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051d2:	230c      	movs	r3, #12
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e041      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a2f      	ldr	r2, [pc, #188]	; (8005298 <USB_SetTurnaroundTime+0x12c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d906      	bls.n	80051ee <USB_SetTurnaroundTime+0x82>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a2e      	ldr	r2, [pc, #184]	; (800529c <USB_SetTurnaroundTime+0x130>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d802      	bhi.n	80051ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051e8:	230b      	movs	r3, #11
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e036      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <USB_SetTurnaroundTime+0x130>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d906      	bls.n	8005204 <USB_SetTurnaroundTime+0x98>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <USB_SetTurnaroundTime+0x134>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d802      	bhi.n	8005204 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051fe:	230a      	movs	r3, #10
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e02b      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <USB_SetTurnaroundTime+0x134>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d906      	bls.n	800521a <USB_SetTurnaroundTime+0xae>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a25      	ldr	r2, [pc, #148]	; (80052a4 <USB_SetTurnaroundTime+0x138>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d202      	bcs.n	800521a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005214:	2309      	movs	r3, #9
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e020      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <USB_SetTurnaroundTime+0x138>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d306      	bcc.n	8005230 <USB_SetTurnaroundTime+0xc4>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <USB_SetTurnaroundTime+0x13c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d802      	bhi.n	8005230 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800522a:	2308      	movs	r3, #8
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e015      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <USB_SetTurnaroundTime+0x13c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d906      	bls.n	8005246 <USB_SetTurnaroundTime+0xda>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <USB_SetTurnaroundTime+0x140>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d202      	bcs.n	8005246 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005240:	2307      	movs	r3, #7
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e00a      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005246:	2306      	movs	r3, #6
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e007      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005252:	2309      	movs	r3, #9
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e001      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005258:	2309      	movs	r3, #9
 800525a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	00d8acbf 	.word	0x00d8acbf
 800528c:	00e4e1c0 	.word	0x00e4e1c0
 8005290:	00f42400 	.word	0x00f42400
 8005294:	01067380 	.word	0x01067380
 8005298:	011a499f 	.word	0x011a499f
 800529c:	01312cff 	.word	0x01312cff
 80052a0:	014ca43f 	.word	0x014ca43f
 80052a4:	016e3600 	.word	0x016e3600
 80052a8:	01a6ab1f 	.word	0x01a6ab1f
 80052ac:	01e84800 	.word	0x01e84800

080052b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d115      	bne.n	8005342 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005322:	2001      	movs	r0, #1
 8005324:	f7fc f976 	bl	8001614 <HAL_Delay>
      ms++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 fa45 	bl	80067be <USB_GetMode>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d01e      	beq.n	8005378 <USB_SetCurrentMode+0x84>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b31      	cmp	r3, #49	; 0x31
 800533e:	d9f0      	bls.n	8005322 <USB_SetCurrentMode+0x2e>
 8005340:	e01a      	b.n	8005378 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005354:	2001      	movs	r0, #1
 8005356:	f7fc f95d 	bl	8001614 <HAL_Delay>
      ms++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 fa2c 	bl	80067be <USB_GetMode>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <USB_SetCurrentMode+0x84>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b31      	cmp	r3, #49	; 0x31
 8005370:	d9f0      	bls.n	8005354 <USB_SetCurrentMode+0x60>
 8005372:	e001      	b.n	8005378 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e005      	b.n	8005384 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b32      	cmp	r3, #50	; 0x32
 800537c:	d101      	bne.n	8005382 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800538c:	b084      	sub	sp, #16
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800539a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e009      	b.n	80053c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	3340      	adds	r3, #64	; 0x40
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	2200      	movs	r2, #0
 80053b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3301      	adds	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b0e      	cmp	r3, #14
 80053c4:	d9f2      	bls.n	80053ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11c      	bne.n	8005406 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
 8005404:	e00b      	b.n	800541e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005424:	461a      	mov	r2, r3
 8005426:	2300      	movs	r3, #0
 8005428:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	4619      	mov	r1, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	461a      	mov	r2, r3
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10c      	bne.n	800545e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800544a:	2100      	movs	r1, #0
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f965 	bl	800571c <USB_SetDevSpeed>
 8005452:	e008      	b.n	8005466 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005454:	2101      	movs	r1, #1
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f960 	bl	800571c <USB_SetDevSpeed>
 800545c:	e003      	b.n	8005466 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800545e:	2103      	movs	r1, #3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f95b 	bl	800571c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005466:	2110      	movs	r1, #16
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8f3 	bl	8005654 <USB_FlushTxFifo>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f91f 	bl	80056bc <USB_FlushRxFifo>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e043      	b.n	800553a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c8:	d118      	bne.n	80054fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e013      	b.n	800550e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	461a      	mov	r2, r3
 80054f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e008      	b.n	800550e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3301      	adds	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	429a      	cmp	r2, r3
 8005540:	d3b7      	bcc.n	80054b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e043      	b.n	80055d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555e:	d118      	bne.n	8005592 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	461a      	mov	r2, r3
 8005574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e013      	b.n	80055a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	461a      	mov	r2, r3
 800558a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	e008      	b.n	80055a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	3301      	adds	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d3b7      	bcc.n	8005548 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f043 0210 	orr.w	r2, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <USB_DevInit+0x2c4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f043 0208 	orr.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d107      	bne.n	8005640 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr
 8005650:	803c3800 	.word	0x803c3800

08005654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <USB_FlushTxFifo+0x64>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e01b      	b.n	80056ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	daf2      	bge.n	8005662 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	019b      	lsls	r3, r3, #6
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <USB_FlushTxFifo+0x64>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e006      	b.n	80056ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d0f0      	beq.n	800568c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	00030d40 	.word	0x00030d40

080056bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a11      	ldr	r2, [pc, #68]	; (8005718 <USB_FlushRxFifo+0x5c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e018      	b.n	800570c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	daf2      	bge.n	80056c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2210      	movs	r2, #16
 80056ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a08      	ldr	r2, [pc, #32]	; (8005718 <USB_FlushRxFifo+0x5c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e006      	b.n	800570c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d0f0      	beq.n	80056ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	00030d40 	.word	0x00030d40

0800571c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573c:	4313      	orrs	r3, r2
 800573e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0306 	and.w	r3, r3, #6
 8005766:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800576e:	2300      	movs	r3, #0
 8005770:	75fb      	strb	r3, [r7, #23]
 8005772:	e00a      	b.n	800578a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d002      	beq.n	8005780 <USB_GetDevSpeed+0x32>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b06      	cmp	r3, #6
 800577e:	d102      	bne.n	8005786 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005780:	2302      	movs	r3, #2
 8005782:	75fb      	strb	r3, [r7, #23]
 8005784:	e001      	b.n	800578a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005786:	230f      	movs	r3, #15
 8005788:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d13a      	bne.n	800582a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	2101      	movs	r1, #1
 80057c6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d155      	bne.n	8005898 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	791b      	ldrb	r3, [r3, #4]
 8005806:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005808:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	059b      	lsls	r3, r3, #22
 800580e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005810:	4313      	orrs	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e036      	b.n	8005898 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	69da      	ldr	r2, [r3, #28]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005848:	4313      	orrs	r3, r2
 800584a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11a      	bne.n	8005898 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800587e:	430b      	orrs	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d161      	bne.n	8005988 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	d11f      	bne.n	800591c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800591a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	43db      	mvns	r3, r3
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593c:	4013      	ands	r3, r2
 800593e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	b29b      	uxth	r3, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005960:	4013      	ands	r3, r2
 8005962:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	0159      	lsls	r1, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	440b      	add	r3, r1
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	4619      	mov	r1, r3
 8005980:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <USB_DeactivateEndpoint+0x1b0>)
 8005982:	4013      	ands	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
 8005986:	e060      	b.n	8005a4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599e:	d11f      	bne.n	80059e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	2101      	movs	r1, #1
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	43db      	mvns	r3, r3
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a00:	4013      	ands	r3, r2
 8005a02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a24:	4013      	ands	r3, r2
 8005a26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	0159      	lsls	r1, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	4619      	mov	r1, r3
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <USB_DeactivateEndpoint+0x1b4>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	ec337800 	.word	0xec337800
 8005a5c:	eff37800 	.word	0xeff37800

08005a60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	f040 815c 	bne.w	8005d3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d132      	bne.n	8005af0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	0cdb      	lsrs	r3, r3, #19
 8005aea:	04db      	lsls	r3, r3, #19
 8005aec:	6113      	str	r3, [r2, #16]
 8005aee:	e074      	b.n	8005bda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	0cdb      	lsrs	r3, r3, #19
 8005b0c:	04db      	lsls	r3, r3, #19
 8005b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	440b      	add	r3, r1
 8005b4c:	1e59      	subs	r1, r3, #1
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b58:	4b9d      	ldr	r3, [pc, #628]	; (8005dd0 <USB_EPStartXfer+0x370>)
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	0148      	lsls	r0, r1, #5
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	4401      	add	r1, r0
 8005b64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b82:	69b9      	ldr	r1, [r7, #24]
 8005b84:	0148      	lsls	r0, r1, #5
 8005b86:	69f9      	ldr	r1, [r7, #28]
 8005b88:	4401      	add	r1, r0
 8005b8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	791b      	ldrb	r3, [r3, #4]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d11f      	bne.n	8005bda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d14b      	bne.n	8005c78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	791b      	ldrb	r3, [r3, #4]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d128      	bne.n	8005c56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e00f      	b.n	8005c56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e133      	b.n	8005ee0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d015      	beq.n	8005ccc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 811b 	beq.w	8005ee0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	2101      	movs	r1, #1
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	69f9      	ldr	r1, [r7, #28]
 8005cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	634b      	str	r3, [r1, #52]	; 0x34
 8005cca:	e109      	b.n	8005ee0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d110      	bne.n	8005cfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e00f      	b.n	8005d1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6919      	ldr	r1, [r3, #16]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	b298      	uxth	r0, r3
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4603      	mov	r3, r0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fade 	bl	80062f4 <USB_WritePacket>
 8005d38:	e0d2      	b.n	8005ee0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d54:	0cdb      	lsrs	r3, r3, #19
 8005d56:	04db      	lsls	r3, r3, #19
 8005d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d126      	bne.n	8005dd4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9c:	69b9      	ldr	r1, [r7, #24]
 8005d9e:	0148      	lsls	r0, r1, #5
 8005da0:	69f9      	ldr	r1, [r7, #28]
 8005da2:	4401      	add	r1, r0
 8005da4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005da8:	4313      	orrs	r3, r2
 8005daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dca:	6113      	str	r3, [r2, #16]
 8005dcc:	e03a      	b.n	8005e44 <USB_EPStartXfer+0x3e4>
 8005dce:	bf00      	nop
 8005dd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	1e5a      	subs	r2, r3, #1
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	8afa      	ldrh	r2, [r7, #22]
 8005df0:	fb03 f202 	mul.w	r2, r3, r2
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	8afb      	ldrh	r3, [r7, #22]
 8005e08:	04d9      	lsls	r1, r3, #19
 8005e0a:	4b38      	ldr	r3, [pc, #224]	; (8005eec <USB_EPStartXfer+0x48c>)
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	69b9      	ldr	r1, [r7, #24]
 8005e10:	0148      	lsls	r0, r1, #5
 8005e12:	69f9      	ldr	r1, [r7, #28]
 8005e14:	4401      	add	r1, r0
 8005e16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	0148      	lsls	r0, r1, #5
 8005e38:	69f9      	ldr	r1, [r7, #28]
 8005e3a:	4401      	add	r1, r0
 8005e3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e40:	4313      	orrs	r3, r2
 8005e42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10d      	bne.n	8005e66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6919      	ldr	r1, [r3, #16]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	460a      	mov	r2, r1
 8005e64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	791b      	ldrb	r3, [r3, #4]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d128      	bne.n	8005ec0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d110      	bne.n	8005ea0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e00f      	b.n	8005ec0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	1ff80000 	.word	0x1ff80000

08005ef0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 80ce 	bne.w	80060ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d132      	bne.n	8005f80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	0cdb      	lsrs	r3, r3, #19
 8005f7a:	04db      	lsls	r3, r3, #19
 8005f7c:	6113      	str	r3, [r2, #16]
 8005f7e:	e04e      	b.n	800601e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	0cdb      	lsrs	r3, r3, #19
 8005f9c:	04db      	lsls	r3, r3, #19
 8005f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d903      	bls.n	8005fd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600e:	6939      	ldr	r1, [r7, #16]
 8006010:	0148      	lsls	r0, r1, #5
 8006012:	6979      	ldr	r1, [r7, #20]
 8006014:	4401      	add	r1, r0
 8006016:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800601a:	4313      	orrs	r3, r2
 800601c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d11e      	bne.n	8006062 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e097      	b.n	8006192 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	440a      	add	r2, r1
 8006078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006080:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8083 	beq.w	8006192 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f303 	lsl.w	r3, r1, r3
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a8:	4313      	orrs	r3, r2
 80060aa:	634b      	str	r3, [r1, #52]	; 0x34
 80060ac:	e071      	b.n	8006192 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c8:	0cdb      	lsrs	r3, r3, #19
 80060ca:	04db      	lsls	r3, r3, #19
 80060cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006140:	6939      	ldr	r1, [r7, #16]
 8006142:	0148      	lsls	r0, r1, #5
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	4401      	add	r1, r0
 8006148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800614c:	4313      	orrs	r3, r2
 800614e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10d      	bne.n	8006172 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6919      	ldr	r1, [r3, #16]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	460a      	mov	r2, r1
 8006170:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006190:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d14a      	bne.n	8006254 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d6:	f040 8086 	bne.w	80062e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f242 7210 	movw	r2, #10000	; 0x2710
 800622e:	4293      	cmp	r3, r2
 8006230:	d902      	bls.n	8006238 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
          break;
 8006236:	e056      	b.n	80062e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006250:	d0e7      	beq.n	8006222 <USB_EPStopXfer+0x82>
 8006252:	e048      	b.n	80062e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800626c:	d13b      	bne.n	80062e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006290:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f242 7210 	movw	r2, #10000	; 0x2710
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d902      	bls.n	80062cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
          break;
 80062ca:	e00c      	b.n	80062e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e4:	d0e7      	beq.n	80062b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b089      	sub	sp, #36	; 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	460b      	mov	r3, r1
 8006304:	71fb      	strb	r3, [r7, #7]
 8006306:	4613      	mov	r3, r2
 8006308:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006312:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	d123      	bne.n	8006362 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800631a:	88bb      	ldrh	r3, [r7, #4]
 800631c:	3303      	adds	r3, #3
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e018      	b.n	800635a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	031a      	lsls	r2, r3, #12
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006334:	461a      	mov	r2, r3
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3301      	adds	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	3301      	adds	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	3301      	adds	r3, #1
 8006352:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	3301      	adds	r3, #1
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	429a      	cmp	r2, r3
 8006360:	d3e2      	bcc.n	8006328 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3724      	adds	r7, #36	; 0x24
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006370:	b480      	push	{r7}
 8006372:	b08b      	sub	sp, #44	; 0x2c
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	089b      	lsrs	r3, r3, #2
 800638a:	b29b      	uxth	r3, r3
 800638c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	623b      	str	r3, [r7, #32]
 800639a:	e014      	b.n	80063c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	3301      	adds	r3, #1
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	3301      	adds	r3, #1
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	3301      	adds	r3, #1
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	3301      	adds	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	3301      	adds	r3, #1
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3e6      	bcc.n	800639c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063ce:	8bfb      	ldrh	r3, [r7, #30]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01e      	beq.n	8006412 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063de:	461a      	mov	r2, r3
 80063e0:	f107 0310 	add.w	r3, r7, #16
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	701a      	strb	r2, [r3, #0]
      i++;
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	3301      	adds	r3, #1
 80063fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	3301      	adds	r3, #1
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006406:	8bfb      	ldrh	r3, [r7, #30]
 8006408:	3b01      	subs	r3, #1
 800640a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800640c:	8bfb      	ldrh	r3, [r7, #30]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1ea      	bne.n	80063e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006414:	4618      	mov	r0, r3
 8006416:	372c      	adds	r7, #44	; 0x2c
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d12c      	bne.n	8006496 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	db12      	blt.n	8006474 <USB_EPSetStall+0x54>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00f      	beq.n	8006474 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006472:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e02b      	b.n	80064ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	db12      	blt.n	80064ce <USB_EPSetStall+0xae>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00f      	beq.n	80064ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d128      	bne.n	800656a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006536:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	791b      	ldrb	r3, [r3, #4]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d003      	beq.n	8006548 <USB_EPClearStall+0x4c>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	791b      	ldrb	r3, [r3, #4]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d138      	bne.n	80065ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e027      	b.n	80065ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006588:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	791b      	ldrb	r3, [r3, #4]
 800658e:	2b03      	cmp	r3, #3
 8006590:	d003      	beq.n	800659a <USB_EPClearStall+0x9e>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d10f      	bne.n	80065ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006642:	f023 0302 	bic.w	r3, r3, #2
 8006646:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006670:	f023 0303 	bic.w	r3, r3, #3
 8006674:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066b0:	68fb      	ldr	r3, [r7, #12]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	0c1b      	lsrs	r3, r3, #16
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	b29b      	uxth	r3, r3
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4013      	ands	r3, r2
 8006752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006754:	68bb      	ldr	r3, [r7, #8]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006762:	b480      	push	{r7}
 8006764:	b087      	sub	sp, #28
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	01db      	lsls	r3, r3, #7
 8006794:	b2db      	uxtb	r3, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4013      	ands	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067b0:	68bb      	ldr	r3, [r7, #8]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f003 0301 	and.w	r3, r3, #1
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067f8:	f023 0307 	bic.w	r3, r3, #7
 80067fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	460b      	mov	r3, r1
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	333c      	adds	r3, #60	; 0x3c
 8006836:	3304      	adds	r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4a26      	ldr	r2, [pc, #152]	; (80068d8 <USB_EP0_OutStart+0xb8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d90a      	bls.n	800685a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006854:	d101      	bne.n	800685a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e037      	b.n	80068ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	461a      	mov	r2, r3
 8006862:	2300      	movs	r3, #0
 8006864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006888:	f043 0318 	orr.w	r3, r3, #24
 800688c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d10f      	bne.n	80068c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	4f54300a 	.word	0x4f54300a

080068dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <USB_CoreReset+0x64>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e01b      	b.n	8006932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	daf2      	bge.n	80068e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f043 0201 	orr.w	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <USB_CoreReset+0x64>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e006      	b.n	8006932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d0f0      	beq.n	8006912 <USB_CoreReset+0x36>

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	00030d40 	.word	0x00030d40

08006944 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006950:	2054      	movs	r0, #84	; 0x54
 8006952:	f003 fd1f 	bl	800a394 <USBD_static_malloc>
 8006956:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	; 0xb0
 8006968:	2100      	movs	r1, #0
 800696a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800696e:	2302      	movs	r3, #2
 8006970:	e08b      	b.n	8006a8a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	32b0      	adds	r2, #176	; 0xb0
 800697c:	68f9      	ldr	r1, [r7, #12]
 800697e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	32b0      	adds	r2, #176	; 0xb0
 800698c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7c1b      	ldrb	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d11b      	bne.n	80069d6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800699e:	4b3d      	ldr	r3, [pc, #244]	; (8006a94 <USBD_CUSTOM_HID_Init+0x150>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 020f 	and.w	r2, r3, #15
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	3326      	adds	r3, #38	; 0x26
 80069b4:	2205      	movs	r2, #5
 80069b6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80069b8:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <USBD_CUSTOM_HID_Init+0x154>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80069d0:	2205      	movs	r2, #5
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e01a      	b.n	8006a0c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80069d6:	4b2f      	ldr	r3, [pc, #188]	; (8006a94 <USBD_CUSTOM_HID_Init+0x150>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 020f 	and.w	r2, r3, #15
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	3326      	adds	r3, #38	; 0x26
 80069ec:	2205      	movs	r2, #5
 80069ee:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80069f0:	4b29      	ldr	r3, [pc, #164]	; (8006a98 <USBD_CUSTOM_HID_Init+0x154>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f003 020f 	and.w	r2, r3, #15
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006a08:	2205      	movs	r2, #5
 8006a0a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006a0c:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <USBD_CUSTOM_HID_Init+0x150>)
 8006a0e:	7819      	ldrb	r1, [r3, #0]
 8006a10:	2302      	movs	r3, #2
 8006a12:	2203      	movs	r2, #3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f003 fbac 	bl	800a172 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006a1a:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <USBD_CUSTOM_HID_Init+0x150>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 020f 	and.w	r2, r3, #15
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	2201      	movs	r2, #1
 8006a32:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <USBD_CUSTOM_HID_Init+0x154>)
 8006a36:	7819      	ldrb	r1, [r3, #0]
 8006a38:	2302      	movs	r3, #2
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f003 fb98 	bl	800a172 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <USBD_CUSTOM_HID_Init+0x154>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	33b0      	adds	r3, #176	; 0xb0
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <USBD_CUSTOM_HID_Init+0x154>)
 8006a7c:	7819      	ldrb	r1, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	2340      	movs	r3, #64	; 0x40
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f003 fc64 	bl	800a350 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	2000009e 	.word	0x2000009e
 8006a98:	2000009f 	.word	0x2000009f

08006a9c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006aa8:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f003 fb85 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006ab4:	4b34      	ldr	r3, [pc, #208]	; (8006b88 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3324      	adds	r3, #36	; 0x24
 8006aca:	2200      	movs	r2, #0
 8006acc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006ace:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3326      	adds	r3, #38	; 0x26
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006ae8:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f003 fb65 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006b10:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 020f 	and.w	r2, r3, #15
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006b28:	2200      	movs	r2, #0
 8006b2a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32b0      	adds	r2, #176	; 0xb0
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01f      	beq.n	8006b7e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	33b0      	adds	r3, #176	; 0xb0
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	32b0      	adds	r2, #176	; 0xb0
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f003 fc25 	bl	800a3b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	32b0      	adds	r2, #176	; 0xb0
 8006b70:	2100      	movs	r1, #0
 8006b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	2000009e 	.word	0x2000009e
 8006b8c:	2000009f 	.word	0x2000009f

08006b90 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	32b0      	adds	r2, #176	; 0xb0
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e0f8      	b.n	8006db6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d056      	beq.n	8006c7e <USBD_CUSTOM_HID_Setup+0xee>
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	f040 80e8 	bne.w	8006da6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	3b02      	subs	r3, #2
 8006bdc:	2b09      	cmp	r3, #9
 8006bde:	d846      	bhi.n	8006c6e <USBD_CUSTOM_HID_Setup+0xde>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <USBD_CUSTOM_HID_Setup+0x58>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c1f 	.word	0x08006c1f
 8006bf0:	08006c6f 	.word	0x08006c6f
 8006bf4:	08006c6f 	.word	0x08006c6f
 8006bf8:	08006c6f 	.word	0x08006c6f
 8006bfc:	08006c6f 	.word	0x08006c6f
 8006c00:	08006c6f 	.word	0x08006c6f
 8006c04:	08006c51 	.word	0x08006c51
 8006c08:	08006c2f 	.word	0x08006c2f
 8006c0c:	08006c11 	.word	0x08006c11
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006c1c:	e02e      	b.n	8006c7c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3340      	adds	r3, #64	; 0x40
 8006c22:	2201      	movs	r2, #1
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fcce 	bl	80085c8 <USBD_CtlSendData>
          break;
 8006c2c:	e026      	b.n	8006c7c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006c3e:	e01d      	b.n	8006c7c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3344      	adds	r3, #68	; 0x44
 8006c44:	2201      	movs	r2, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fcbd 	bl	80085c8 <USBD_CtlSendData>
          break;
 8006c4e:	e015      	b.n	8006c7c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2201      	movs	r2, #1
 8006c54:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006c56:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	88db      	ldrh	r3, [r3, #6]
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	bf28      	it	cs
 8006c60:	2340      	movcs	r3, #64	; 0x40
 8006c62:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006c64:	461a      	mov	r2, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fcda 	bl	8008620 <USBD_CtlPrepareRx>
          break;
 8006c6c:	e006      	b.n	8006c7c <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fc38 	bl	80084e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c76:	2303      	movs	r3, #3
 8006c78:	75fb      	strb	r3, [r7, #23]
          break;
 8006c7a:	bf00      	nop
      }
      break;
 8006c7c:	e09a      	b.n	8006db4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b0b      	cmp	r3, #11
 8006c84:	f200 8086 	bhi.w	8006d94 <USBD_CUSTOM_HID_Setup+0x204>
 8006c88:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <USBD_CUSTOM_HID_Setup+0x100>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006da3 	.word	0x08006da3
 8006c98:	08006d95 	.word	0x08006d95
 8006c9c:	08006d95 	.word	0x08006d95
 8006ca0:	08006d95 	.word	0x08006d95
 8006ca4:	08006d95 	.word	0x08006d95
 8006ca8:	08006ceb 	.word	0x08006ceb
 8006cac:	08006d95 	.word	0x08006d95
 8006cb0:	08006d95 	.word	0x08006d95
 8006cb4:	08006d95 	.word	0x08006d95
 8006cb8:	08006d43 	.word	0x08006d43
 8006cbc:	08006d6d 	.word	0x08006d6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d107      	bne.n	8006cdc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ccc:	f107 030e 	add.w	r3, r7, #14
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fc77 	bl	80085c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cda:	e063      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fc01 	bl	80084e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce8:	e05c      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	885b      	ldrh	r3, [r3, #2]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b22      	cmp	r3, #34	; 0x22
 8006cf4:	d110      	bne.n	8006d18 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b65      	cmp	r3, #101	; 0x65
 8006cfc:	bf28      	it	cs
 8006cfe:	2365      	movcs	r3, #101	; 0x65
 8006d00:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	33b0      	adds	r3, #176	; 0xb0
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	e00d      	b.n	8006d34 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	885b      	ldrh	r3, [r3, #2]
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b21      	cmp	r3, #33	; 0x21
 8006d22:	d107      	bne.n	8006d34 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006d24:	4b26      	ldr	r3, [pc, #152]	; (8006dc0 <USBD_CUSTOM_HID_Setup+0x230>)
 8006d26:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	88db      	ldrh	r3, [r3, #6]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	bf28      	it	cs
 8006d30:	2309      	movcs	r3, #9
 8006d32:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d34:	8bfb      	ldrh	r3, [r7, #30]
 8006d36:	461a      	mov	r2, r3
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fc44 	bl	80085c8 <USBD_CtlSendData>
          break;
 8006d40:	e030      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d107      	bne.n	8006d5e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3348      	adds	r3, #72	; 0x48
 8006d52:	2201      	movs	r2, #1
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fc36 	bl	80085c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d5c:	e022      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fbc0 	bl	80084e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d66:	2303      	movs	r3, #3
 8006d68:	75fb      	strb	r3, [r7, #23]
          break;
 8006d6a:	e01b      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d106      	bne.n	8006d86 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	885b      	ldrh	r3, [r3, #2]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d84:	e00e      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fbac 	bl	80084e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	75fb      	strb	r3, [r7, #23]
          break;
 8006d92:	e007      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fba5 	bl	80084e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	75fb      	strb	r3, [r7, #23]
          break;
 8006da0:	e000      	b.n	8006da4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006da2:	bf00      	nop
      }
      break;
 8006da4:	e006      	b.n	8006db4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fb9c 	bl	80084e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
      break;
 8006db2:	bf00      	nop
  }
  return (uint8_t)ret;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000088 	.word	0x20000088

08006dc4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	32b0      	adds	r2, #176	; 0xb0
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e021      	b.n	8006e2c <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	32b0      	adds	r2, #176	; 0xb0
 8006df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d112      	bne.n	8006e2a <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <USBD_CUSTOM_HID_SendReport+0x70>)
 8006e18:	7819      	ldrb	r1, [r3, #0]
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f003 fa75 	bl	800a30e <USBD_LL_Transmit>
 8006e24:	e001      	b.n	8006e2a <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	2000009e 	.word	0x2000009e

08006e38 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006e40:	2181      	movs	r1, #129	; 0x81
 8006e42:	4815      	ldr	r0, [pc, #84]	; (8006e98 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006e44:	f000 fd17 	bl	8007876 <USBD_GetEpDesc>
 8006e48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	4812      	ldr	r0, [pc, #72]	; (8006e98 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006e4e:	f000 fd12 	bl	8007876 <USBD_GetEpDesc>
 8006e52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f042 0202 	orr.w	r2, r2, #2
 8006e62:	711a      	strb	r2, [r3, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f042 0202 	orr.w	r2, r2, #2
 8006e7c:	711a      	strb	r2, [r3, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2205      	movs	r2, #5
 8006e86:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2229      	movs	r2, #41	; 0x29
 8006e8c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e8e:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	2000005c 	.word	0x2000005c

08006e9c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006ea4:	2181      	movs	r1, #129	; 0x81
 8006ea6:	4815      	ldr	r0, [pc, #84]	; (8006efc <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006ea8:	f000 fce5 	bl	8007876 <USBD_GetEpDesc>
 8006eac:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006eae:	2101      	movs	r1, #1
 8006eb0:	4812      	ldr	r0, [pc, #72]	; (8006efc <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006eb2:	f000 fce0 	bl	8007876 <USBD_GetEpDesc>
 8006eb6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f042 0202 	orr.w	r2, r2, #2
 8006ec6:	711a      	strb	r2, [r3, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2205      	movs	r2, #5
 8006ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f042 0202 	orr.w	r2, r2, #2
 8006ee0:	711a      	strb	r2, [r3, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2205      	movs	r2, #5
 8006eea:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2229      	movs	r2, #41	; 0x29
 8006ef0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006ef2:	4b02      	ldr	r3, [pc, #8]	; (8006efc <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	2000005c 	.word	0x2000005c

08006f00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006f08:	2181      	movs	r1, #129	; 0x81
 8006f0a:	4815      	ldr	r0, [pc, #84]	; (8006f60 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006f0c:	f000 fcb3 	bl	8007876 <USBD_GetEpDesc>
 8006f10:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006f12:	2101      	movs	r1, #1
 8006f14:	4812      	ldr	r0, [pc, #72]	; (8006f60 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006f16:	f000 fcae 	bl	8007876 <USBD_GetEpDesc>
 8006f1a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f042 0202 	orr.w	r2, r2, #2
 8006f2a:	711a      	strb	r2, [r3, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2205      	movs	r2, #5
 8006f34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f042 0202 	orr.w	r2, r2, #2
 8006f44:	711a      	strb	r2, [r3, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2205      	movs	r2, #5
 8006f4e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2229      	movs	r2, #41	; 0x29
 8006f54:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006f56:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	2000005c 	.word	0x2000005c

08006f64 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	32b0      	adds	r2, #176	; 0xb0
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	32b0      	adds	r2, #176	; 0xb0
 8006fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e017      	b.n	8006fe4 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	32b0      	adds	r2, #176	; 0xb0
 8006fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	33b0      	adds	r3, #176	; 0xb0
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	7810      	ldrb	r0, [r2, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	7852      	ldrb	r2, [r2, #1]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	32b0      	adds	r2, #176	; 0xb0
 8006ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007006:	2303      	movs	r3, #3
 8007008:	e00f      	b.n	800702a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32b0      	adds	r2, #176	; 0xb0
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800701c:	7819      	ldrb	r1, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f003 f994 	bl	800a350 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	2000009f 	.word	0x2000009f

08007038 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32b0      	adds	r2, #176	; 0xb0
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007056:	2303      	movs	r3, #3
 8007058:	e016      	b.n	8007088 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	2b01      	cmp	r3, #1
 8007060:	d111      	bne.n	8007086 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	33b0      	adds	r3, #176	; 0xb0
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	7810      	ldrb	r0, [r2, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	7852      	ldrb	r2, [r2, #1]
 800707c:	4611      	mov	r1, r2
 800707e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	220a      	movs	r2, #10
 800709c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000094 	.word	0x20000094

080070b0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e009      	b.n	80070d8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	33b0      	adds	r3, #176	; 0xb0
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e01f      	b.n	800713c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	79fa      	ldrb	r2, [r7, #7]
 800712e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f002 ffb7 	bl	800a0a4 <USBD_LL_Init>
 8007136:	4603      	mov	r3, r0
 8007138:	75fb      	strb	r3, [r7, #23]

  return ret;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007158:	2303      	movs	r3, #3
 800715a:	e025      	b.n	80071a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32ae      	adds	r2, #174	; 0xae
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00f      	beq.n	8007198 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32ae      	adds	r2, #174	; 0xae
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	f107 020e 	add.w	r2, r7, #14
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f002 ffbf 	bl	800a13c <USBD_LL_Start>
 80071be:	4603      	mov	r3, r0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d009      	beq.n	800720c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	4611      	mov	r1, r2
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	78fa      	ldrb	r2, [r7, #3]
 8007230:	4611      	mov	r1, r2
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f908 	bl	8008472 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007270:	461a      	mov	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2b02      	cmp	r3, #2
 8007284:	d01a      	beq.n	80072bc <USBD_LL_SetupStage+0x72>
 8007286:	2b02      	cmp	r3, #2
 8007288:	d822      	bhi.n	80072d0 <USBD_LL_SetupStage+0x86>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <USBD_LL_SetupStage+0x4a>
 800728e:	2b01      	cmp	r3, #1
 8007290:	d00a      	beq.n	80072a8 <USBD_LL_SetupStage+0x5e>
 8007292:	e01d      	b.n	80072d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fb5f 	bl	8007960 <USBD_StdDevReq>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]
      break;
 80072a6:	e020      	b.n	80072ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fbc7 	bl	8007a44 <USBD_StdItfReq>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ba:	e016      	b.n	80072ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc29 	bl	8007b1c <USBD_StdEPReq>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
      break;
 80072ce:	e00c      	b.n	80072ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 ff8c 	bl	800a1fc <USBD_LL_StallEP>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
      break;
 80072e8:	bf00      	nop
  }

  return ret;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	460b      	mov	r3, r1
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d16e      	bne.n	80073ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007312:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800731a:	2b03      	cmp	r3, #3
 800731c:	f040 8098 	bne.w	8007450 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	429a      	cmp	r2, r3
 800732a:	d913      	bls.n	8007354 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	4293      	cmp	r3, r2
 8007344:	bf28      	it	cs
 8007346:	4613      	movcs	r3, r2
 8007348:	461a      	mov	r2, r3
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 f984 	bl	800865a <USBD_CtlContinueRx>
 8007352:	e07d      	b.n	8007450 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2b02      	cmp	r3, #2
 8007360:	d014      	beq.n	800738c <USBD_LL_DataOutStage+0x98>
 8007362:	2b02      	cmp	r3, #2
 8007364:	d81d      	bhi.n	80073a2 <USBD_LL_DataOutStage+0xae>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <USBD_LL_DataOutStage+0x7c>
 800736a:	2b01      	cmp	r3, #1
 800736c:	d003      	beq.n	8007376 <USBD_LL_DataOutStage+0x82>
 800736e:	e018      	b.n	80073a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	75bb      	strb	r3, [r7, #22]
            break;
 8007374:	e018      	b.n	80073a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fa5e 	bl	8007842 <USBD_CoreFindIF>
 8007386:	4603      	mov	r3, r0
 8007388:	75bb      	strb	r3, [r7, #22]
            break;
 800738a:	e00d      	b.n	80073a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007392:	b2db      	uxtb	r3, r3
 8007394:	4619      	mov	r1, r3
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 fa60 	bl	800785c <USBD_CoreFindEP>
 800739c:	4603      	mov	r3, r0
 800739e:	75bb      	strb	r3, [r7, #22]
            break;
 80073a0:	e002      	b.n	80073a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75bb      	strb	r3, [r7, #22]
            break;
 80073a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80073a8:	7dbb      	ldrb	r3, [r7, #22]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d119      	bne.n	80073e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d113      	bne.n	80073e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80073ba:	7dba      	ldrb	r2, [r7, #22]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	32ae      	adds	r2, #174	; 0xae
 80073c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80073ca:	7dba      	ldrb	r2, [r7, #22]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80073d2:	7dba      	ldrb	r2, [r7, #22]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	32ae      	adds	r2, #174	; 0xae
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 f94a 	bl	800867c <USBD_CtlSendStatus>
 80073e8:	e032      	b.n	8007450 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	4619      	mov	r1, r3
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 fa31 	bl	800785c <USBD_CoreFindEP>
 80073fa:	4603      	mov	r3, r0
 80073fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fe:	7dbb      	ldrb	r3, [r7, #22]
 8007400:	2bff      	cmp	r3, #255	; 0xff
 8007402:	d025      	beq.n	8007450 <USBD_LL_DataOutStage+0x15c>
 8007404:	7dbb      	ldrb	r3, [r7, #22]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d122      	bne.n	8007450 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b03      	cmp	r3, #3
 8007414:	d117      	bne.n	8007446 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007416:	7dba      	ldrb	r2, [r7, #22]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	32ae      	adds	r2, #174	; 0xae
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00f      	beq.n	8007446 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007426:	7dba      	ldrb	r2, [r7, #22]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800742e:	7dba      	ldrb	r2, [r7, #22]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	32ae      	adds	r2, #174	; 0xae
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	7afa      	ldrb	r2, [r7, #11]
 800743c:	4611      	mov	r1, r2
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	e000      	b.n	8007452 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	460b      	mov	r3, r1
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d16f      	bne.n	800754e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3314      	adds	r3, #20
 8007472:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800747a:	2b02      	cmp	r3, #2
 800747c:	d15a      	bne.n	8007534 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	d914      	bls.n	80074b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	461a      	mov	r2, r3
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f001 f8ac 	bl	80085fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a6:	2300      	movs	r3, #0
 80074a8:	2200      	movs	r2, #0
 80074aa:	2100      	movs	r1, #0
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f002 ff4f 	bl	800a350 <USBD_LL_PrepareReceive>
 80074b2:	e03f      	b.n	8007534 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d11c      	bne.n	80074fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d316      	bcc.n	80074fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d20f      	bcs.n	80074fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f001 f88d 	bl	80085fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	2100      	movs	r1, #0
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f002 ff2c 	bl	800a350 <USBD_LL_PrepareReceive>
 80074f8:	e01c      	b.n	8007534 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b03      	cmp	r3, #3
 8007504:	d10f      	bne.n	8007526 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f002 fe67 	bl	800a1fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f001 f8b7 	bl	80086a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d03a      	beq.n	80075b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff fe42 	bl	80071c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800754c:	e032      	b.n	80075b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f97f 	bl	800785c <USBD_CoreFindEP>
 800755e:	4603      	mov	r3, r0
 8007560:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007562:	7dfb      	ldrb	r3, [r7, #23]
 8007564:	2bff      	cmp	r3, #255	; 0xff
 8007566:	d025      	beq.n	80075b4 <USBD_LL_DataInStage+0x15a>
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d122      	bne.n	80075b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b03      	cmp	r3, #3
 8007578:	d11c      	bne.n	80075b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800757a:	7dfa      	ldrb	r2, [r7, #23]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	32ae      	adds	r2, #174	; 0xae
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d014      	beq.n	80075b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800758a:	7dfa      	ldrb	r2, [r7, #23]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007592:	7dfa      	ldrb	r2, [r7, #23]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	32ae      	adds	r2, #174	; 0xae
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	7afa      	ldrb	r2, [r7, #11]
 80075a0:	4611      	mov	r1, r2
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	4798      	blx	r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80075aa:	7dbb      	ldrb	r3, [r7, #22]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80075b0:	7dbb      	ldrb	r3, [r7, #22]
 80075b2:	e000      	b.n	80075b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d014      	beq.n	8007624 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00e      	beq.n	8007624 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6852      	ldr	r2, [r2, #4]
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	4611      	mov	r1, r2
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007624:	2340      	movs	r3, #64	; 0x40
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f002 fda1 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2240      	movs	r2, #64	; 0x40
 800763c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	2200      	movs	r2, #0
 8007644:	2180      	movs	r1, #128	; 0x80
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f002 fd93 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2240      	movs	r2, #64	; 0x40
 8007656:	621a      	str	r2, [r3, #32]

  return ret;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	78fa      	ldrb	r2, [r7, #3]
 8007672:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007690:	b2da      	uxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2204      	movs	r2, #4
 800769c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d106      	bne.n	80076d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d110      	bne.n	8007714 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	32ae      	adds	r2, #174	; 0xae
 8007734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800773c:	2303      	movs	r3, #3
 800773e:	e01c      	b.n	800777a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b03      	cmp	r3, #3
 800774a:	d115      	bne.n	8007778 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32ae      	adds	r2, #174	; 0xae
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32ae      	adds	r2, #174	; 0xae
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	4611      	mov	r1, r2
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	32ae      	adds	r2, #174	; 0xae
 8007798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e01c      	b.n	80077de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d115      	bne.n	80077dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	32ae      	adds	r2, #174	; 0xae
 80077ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32ae      	adds	r2, #174	; 0xae
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	4611      	mov	r1, r2
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	4611      	mov	r1, r2
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800784e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007868:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	885b      	ldrh	r3, [r3, #2]
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	429a      	cmp	r2, r3
 800789c:	d920      	bls.n	80078e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80078a6:	e013      	b.n	80078d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80078a8:	f107 030a 	add.w	r3, r7, #10
 80078ac:	4619      	mov	r1, r3
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f000 f81b 	bl	80078ea <USBD_GetNextDesc>
 80078b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d108      	bne.n	80078d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	789b      	ldrb	r3, [r3, #2]
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d008      	beq.n	80078de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	885b      	ldrh	r3, [r3, #2]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	897b      	ldrh	r3, [r7, #10]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d8e5      	bhi.n	80078a8 <USBD_GetEpDesc+0x32>
 80078dc:	e000      	b.n	80078e0 <USBD_GetEpDesc+0x6a>
          break;
 80078de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80078e0:	693b      	ldr	r3, [r7, #16]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	4413      	add	r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4413      	add	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007916:	68fb      	ldr	r3, [r7, #12]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3301      	adds	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007942:	8a3b      	ldrh	r3, [r7, #16]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	b21a      	sxth	r2, r3
 8007948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800794c:	4313      	orrs	r3, r2
 800794e:	b21b      	sxth	r3, r3
 8007950:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007952:	89fb      	ldrh	r3, [r7, #14]
}
 8007954:	4618      	mov	r0, r3
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d005      	beq.n	8007986 <USBD_StdDevReq+0x26>
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d857      	bhi.n	8007a2e <USBD_StdDevReq+0xce>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00f      	beq.n	80079a2 <USBD_StdDevReq+0x42>
 8007982:	2b20      	cmp	r3, #32
 8007984:	d153      	bne.n	8007a2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	32ae      	adds	r2, #174	; 0xae
 8007990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]
      break;
 80079a0:	e04a      	b.n	8007a38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d83b      	bhi.n	8007a22 <USBD_StdDevReq+0xc2>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <USBD_StdDevReq+0x50>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007a19 	.word	0x08007a19
 80079b8:	08007a23 	.word	0x08007a23
 80079bc:	08007a0f 	.word	0x08007a0f
 80079c0:	08007a23 	.word	0x08007a23
 80079c4:	080079e3 	.word	0x080079e3
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	08007a23 	.word	0x08007a23
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	080079ed 	.word	0x080079ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa3c 	bl	8007e58 <USBD_GetDescriptor>
          break;
 80079e0:	e024      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fba1 	bl	800812c <USBD_SetAddress>
          break;
 80079ea:	e01f      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fbe0 	bl	80081b4 <USBD_SetConfig>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]
          break;
 80079f8:	e018      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc83 	bl	8008308 <USBD_GetConfig>
          break;
 8007a02:	e013      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fcb4 	bl	8008374 <USBD_GetStatus>
          break;
 8007a0c:	e00e      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fce3 	bl	80083dc <USBD_SetFeature>
          break;
 8007a16:	e009      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fd07 	bl	800842e <USBD_ClrFeature>
          break;
 8007a20:	e004      	b.n	8007a2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fd5e 	bl	80084e6 <USBD_CtlError>
          break;
 8007a2a:	bf00      	nop
      }
      break;
 8007a2c:	e004      	b.n	8007a38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fd58 	bl	80084e6 <USBD_CtlError>
      break;
 8007a36:	bf00      	nop
  }

  return ret;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop

08007a44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d005      	beq.n	8007a6a <USBD_StdItfReq+0x26>
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d852      	bhi.n	8007b08 <USBD_StdItfReq+0xc4>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <USBD_StdItfReq+0x26>
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	d14e      	bne.n	8007b08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d840      	bhi.n	8007afa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	889b      	ldrh	r3, [r3, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d836      	bhi.n	8007af0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	889b      	ldrh	r3, [r3, #4]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fed9 	bl	8007842 <USBD_CoreFindIF>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2bff      	cmp	r3, #255	; 0xff
 8007a98:	d01d      	beq.n	8007ad6 <USBD_StdItfReq+0x92>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d11a      	bne.n	8007ad6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007aa0:	7bba      	ldrb	r2, [r7, #14]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	32ae      	adds	r2, #174	; 0xae
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00f      	beq.n	8007ad0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ab0:	7bba      	ldrb	r2, [r7, #14]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ab8:	7bba      	ldrb	r2, [r7, #14]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	32ae      	adds	r2, #174	; 0xae
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ace:	e004      	b.n	8007ada <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ad4:	e001      	b.n	8007ada <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	88db      	ldrh	r3, [r3, #6]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d110      	bne.n	8007b04 <USBD_StdItfReq+0xc0>
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10d      	bne.n	8007b04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fdc7 	bl	800867c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007aee:	e009      	b.n	8007b04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fcf7 	bl	80084e6 <USBD_CtlError>
          break;
 8007af8:	e004      	b.n	8007b04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fcf2 	bl	80084e6 <USBD_CtlError>
          break;
 8007b02:	e000      	b.n	8007b06 <USBD_StdItfReq+0xc2>
          break;
 8007b04:	bf00      	nop
      }
      break;
 8007b06:	e004      	b.n	8007b12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fceb 	bl	80084e6 <USBD_CtlError>
      break;
 8007b10:	bf00      	nop
  }

  return ret;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	889b      	ldrh	r3, [r3, #4]
 8007b2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b38:	2b40      	cmp	r3, #64	; 0x40
 8007b3a:	d007      	beq.n	8007b4c <USBD_StdEPReq+0x30>
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	f200 817f 	bhi.w	8007e40 <USBD_StdEPReq+0x324>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d02a      	beq.n	8007b9c <USBD_StdEPReq+0x80>
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	f040 817a 	bne.w	8007e40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fe83 	bl	800785c <USBD_CoreFindEP>
 8007b56:	4603      	mov	r3, r0
 8007b58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b5a:	7b7b      	ldrb	r3, [r7, #13]
 8007b5c:	2bff      	cmp	r3, #255	; 0xff
 8007b5e:	f000 8174 	beq.w	8007e4a <USBD_StdEPReq+0x32e>
 8007b62:	7b7b      	ldrb	r3, [r7, #13]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 8170 	bne.w	8007e4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007b6a:	7b7a      	ldrb	r2, [r7, #13]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b72:	7b7a      	ldrb	r2, [r7, #13]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	32ae      	adds	r2, #174	; 0xae
 8007b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8163 	beq.w	8007e4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b84:	7b7a      	ldrb	r2, [r7, #13]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	32ae      	adds	r2, #174	; 0xae
 8007b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b9a:	e156      	b.n	8007e4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d008      	beq.n	8007bb6 <USBD_StdEPReq+0x9a>
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	f300 8145 	bgt.w	8007e34 <USBD_StdEPReq+0x318>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 809b 	beq.w	8007ce6 <USBD_StdEPReq+0x1ca>
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d03c      	beq.n	8007c2e <USBD_StdEPReq+0x112>
 8007bb4:	e13e      	b.n	8007e34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d002      	beq.n	8007bc8 <USBD_StdEPReq+0xac>
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d016      	beq.n	8007bf4 <USBD_StdEPReq+0xd8>
 8007bc6:	e02c      	b.n	8007c22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <USBD_StdEPReq+0xce>
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d00a      	beq.n	8007bea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f002 fb0f 	bl	800a1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bde:	2180      	movs	r1, #128	; 0x80
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f002 fb0b 	bl	800a1fc <USBD_LL_StallEP>
 8007be6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007be8:	e020      	b.n	8007c2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc7a 	bl	80084e6 <USBD_CtlError>
              break;
 8007bf2:	e01b      	b.n	8007c2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	885b      	ldrh	r3, [r3, #2]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10e      	bne.n	8007c1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <USBD_StdEPReq+0xfe>
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b80      	cmp	r3, #128	; 0x80
 8007c06:	d008      	beq.n	8007c1a <USBD_StdEPReq+0xfe>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	88db      	ldrh	r3, [r3, #6]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f002 faf1 	bl	800a1fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fd2e 	bl	800867c <USBD_CtlSendStatus>

              break;
 8007c20:	e004      	b.n	8007c2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fc5e 	bl	80084e6 <USBD_CtlError>
              break;
 8007c2a:	bf00      	nop
          }
          break;
 8007c2c:	e107      	b.n	8007e3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d002      	beq.n	8007c40 <USBD_StdEPReq+0x124>
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d016      	beq.n	8007c6c <USBD_StdEPReq+0x150>
 8007c3e:	e04b      	b.n	8007cd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00d      	beq.n	8007c62 <USBD_StdEPReq+0x146>
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d00a      	beq.n	8007c62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f002 fad3 	bl	800a1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c56:	2180      	movs	r1, #128	; 0x80
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f002 facf 	bl	800a1fc <USBD_LL_StallEP>
 8007c5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c60:	e040      	b.n	8007ce4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fc3e 	bl	80084e6 <USBD_CtlError>
              break;
 8007c6a:	e03b      	b.n	8007ce4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d136      	bne.n	8007ce2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f002 fad9 	bl	800a23a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fcf7 	bl	800867c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fde2 	bl	800785c <USBD_CoreFindEP>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c9c:	7b7b      	ldrb	r3, [r7, #13]
 8007c9e:	2bff      	cmp	r3, #255	; 0xff
 8007ca0:	d01f      	beq.n	8007ce2 <USBD_StdEPReq+0x1c6>
 8007ca2:	7b7b      	ldrb	r3, [r7, #13]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11c      	bne.n	8007ce2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ca8:	7b7a      	ldrb	r2, [r7, #13]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007cb0:	7b7a      	ldrb	r2, [r7, #13]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	32ae      	adds	r2, #174	; 0xae
 8007cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d010      	beq.n	8007ce2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cc0:	7b7a      	ldrb	r2, [r7, #13]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32ae      	adds	r2, #174	; 0xae
 8007cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4798      	blx	r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007cd6:	e004      	b.n	8007ce2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fc03 	bl	80084e6 <USBD_CtlError>
              break;
 8007ce0:	e000      	b.n	8007ce4 <USBD_StdEPReq+0x1c8>
              break;
 8007ce2:	bf00      	nop
          }
          break;
 8007ce4:	e0ab      	b.n	8007e3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d002      	beq.n	8007cf8 <USBD_StdEPReq+0x1dc>
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d032      	beq.n	8007d5c <USBD_StdEPReq+0x240>
 8007cf6:	e097      	b.n	8007e28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <USBD_StdEPReq+0x1f2>
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b80      	cmp	r3, #128	; 0x80
 8007d02:	d004      	beq.n	8007d0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fbed 	bl	80084e6 <USBD_CtlError>
                break;
 8007d0c:	e091      	b.n	8007e32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da0b      	bge.n	8007d2e <USBD_StdEPReq+0x212>
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	3310      	adds	r3, #16
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	4413      	add	r3, r2
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	e00b      	b.n	8007d46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	3304      	adds	r3, #4
 8007d46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2202      	movs	r2, #2
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fc37 	bl	80085c8 <USBD_CtlSendData>
              break;
 8007d5a:	e06a      	b.n	8007e32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da11      	bge.n	8007d88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	f003 020f 	and.w	r2, r3, #15
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	3324      	adds	r3, #36	; 0x24
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d117      	bne.n	8007dae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fbb0 	bl	80084e6 <USBD_CtlError>
                  break;
 8007d86:	e054      	b.n	8007e32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	f003 020f 	and.w	r2, r3, #15
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d104      	bne.n	8007dae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fb9d 	bl	80084e6 <USBD_CtlError>
                  break;
 8007dac:	e041      	b.n	8007e32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da0b      	bge.n	8007dce <USBD_StdEPReq+0x2b2>
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	3310      	adds	r3, #16
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	3304      	adds	r3, #4
 8007dcc:	e00b      	b.n	8007de6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	4413      	add	r3, r2
 8007de4:	3304      	adds	r3, #4
 8007de6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <USBD_StdEPReq+0x2d8>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d103      	bne.n	8007dfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e00e      	b.n	8007e1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f002 fa39 	bl	800a278 <USBD_LL_IsStallEP>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e002      	b.n	8007e1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fbd1 	bl	80085c8 <USBD_CtlSendData>
              break;
 8007e26:	e004      	b.n	8007e32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb5b 	bl	80084e6 <USBD_CtlError>
              break;
 8007e30:	bf00      	nop
          }
          break;
 8007e32:	e004      	b.n	8007e3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fb55 	bl	80084e6 <USBD_CtlError>
          break;
 8007e3c:	bf00      	nop
      }
      break;
 8007e3e:	e005      	b.n	8007e4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb4f 	bl	80084e6 <USBD_CtlError>
      break;
 8007e48:	e000      	b.n	8007e4c <USBD_StdEPReq+0x330>
      break;
 8007e4a:	bf00      	nop
  }

  return ret;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	885b      	ldrh	r3, [r3, #2]
 8007e72:	0a1b      	lsrs	r3, r3, #8
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	2b06      	cmp	r3, #6
 8007e7a:	f200 8128 	bhi.w	80080ce <USBD_GetDescriptor+0x276>
 8007e7e:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <USBD_GetDescriptor+0x2c>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007ef9 	.word	0x08007ef9
 8007e90:	080080cf 	.word	0x080080cf
 8007e94:	080080cf 	.word	0x080080cf
 8007e98:	0800806f 	.word	0x0800806f
 8007e9c:	0800809b 	.word	0x0800809b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	7c12      	ldrb	r2, [r2, #16]
 8007eac:	f107 0108 	add.w	r1, r7, #8
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	60f8      	str	r0, [r7, #12]
      break;
 8007eb6:	e112      	b.n	80080de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7c1b      	ldrb	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10d      	bne.n	8007edc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	f107 0208 	add.w	r2, r7, #8
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007eda:	e100      	b.n	80080de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	f107 0208 	add.w	r2, r7, #8
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
 8007eec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	701a      	strb	r2, [r3, #0]
      break;
 8007ef6:	e0f2      	b.n	80080de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	f200 80ac 	bhi.w	800805c <USBD_GetDescriptor+0x204>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <USBD_GetDescriptor+0xb4>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f25 	.word	0x08007f25
 8007f10:	08007f59 	.word	0x08007f59
 8007f14:	08007f8d 	.word	0x08007f8d
 8007f18:	08007fc1 	.word	0x08007fc1
 8007f1c:	08007ff5 	.word	0x08007ff5
 8007f20:	08008029 	.word	0x08008029
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	7c12      	ldrb	r2, [r2, #16]
 8007f3c:	f107 0108 	add.w	r1, r7, #8
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f46:	e091      	b.n	800806c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 facb 	bl	80084e6 <USBD_CtlError>
            err++;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3301      	adds	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]
          break;
 8007f56:	e089      	b.n	800806c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7c12      	ldrb	r2, [r2, #16]
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7a:	e077      	b.n	800806c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fab1 	bl	80084e6 <USBD_CtlError>
            err++;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	3301      	adds	r3, #1
 8007f88:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8a:	e06f      	b.n	800806c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	7c12      	ldrb	r2, [r2, #16]
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fae:	e05d      	b.n	800806c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa97 	bl	80084e6 <USBD_CtlError>
            err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fbe:	e055      	b.n	800806c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	7c12      	ldrb	r2, [r2, #16]
 8007fd8:	f107 0108 	add.w	r1, r7, #8
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4798      	blx	r3
 8007fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe2:	e043      	b.n	800806c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa7d 	bl	80084e6 <USBD_CtlError>
            err++;
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff2:	e03b      	b.n	800806c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7c12      	ldrb	r2, [r2, #16]
 800800c:	f107 0108 	add.w	r1, r7, #8
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008016:	e029      	b.n	800806c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa63 	bl	80084e6 <USBD_CtlError>
            err++;
 8008020:	7afb      	ldrb	r3, [r7, #11]
 8008022:	3301      	adds	r3, #1
 8008024:	72fb      	strb	r3, [r7, #11]
          break;
 8008026:	e021      	b.n	800806c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	7c12      	ldrb	r2, [r2, #16]
 8008040:	f107 0108 	add.w	r1, r7, #8
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
 8008048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804a:	e00f      	b.n	800806c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa49 	bl	80084e6 <USBD_CtlError>
            err++;
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	3301      	adds	r3, #1
 8008058:	72fb      	strb	r3, [r7, #11]
          break;
 800805a:	e007      	b.n	800806c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa41 	bl	80084e6 <USBD_CtlError>
          err++;
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	3301      	adds	r3, #1
 8008068:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800806a:	bf00      	nop
      }
      break;
 800806c:	e037      	b.n	80080de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7c1b      	ldrb	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807e:	f107 0208 	add.w	r2, r7, #8
 8008082:	4610      	mov	r0, r2
 8008084:	4798      	blx	r3
 8008086:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008088:	e029      	b.n	80080de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa2a 	bl	80084e6 <USBD_CtlError>
        err++;
 8008092:	7afb      	ldrb	r3, [r7, #11]
 8008094:	3301      	adds	r3, #1
 8008096:	72fb      	strb	r3, [r7, #11]
      break;
 8008098:	e021      	b.n	80080de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	7c1b      	ldrb	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10d      	bne.n	80080be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	f107 0208 	add.w	r2, r7, #8
 80080ae:	4610      	mov	r0, r2
 80080b0:	4798      	blx	r3
 80080b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	2207      	movs	r2, #7
 80080ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080bc:	e00f      	b.n	80080de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fa10 	bl	80084e6 <USBD_CtlError>
        err++;
 80080c6:	7afb      	ldrb	r3, [r7, #11]
 80080c8:	3301      	adds	r3, #1
 80080ca:	72fb      	strb	r3, [r7, #11]
      break;
 80080cc:	e007      	b.n	80080de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa08 	bl	80084e6 <USBD_CtlError>
      err++;
 80080d6:	7afb      	ldrb	r3, [r7, #11]
 80080d8:	3301      	adds	r3, #1
 80080da:	72fb      	strb	r3, [r7, #11]
      break;
 80080dc:	bf00      	nop
  }

  if (err != 0U)
 80080de:	7afb      	ldrb	r3, [r7, #11]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d11e      	bne.n	8008122 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	88db      	ldrh	r3, [r3, #6]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d016      	beq.n	800811a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080ec:	893b      	ldrh	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00e      	beq.n	8008110 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88da      	ldrh	r2, [r3, #6]
 80080f6:	893b      	ldrh	r3, [r7, #8]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	bf28      	it	cs
 80080fc:	4613      	movcs	r3, r2
 80080fe:	b29b      	uxth	r3, r3
 8008100:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008102:	893b      	ldrh	r3, [r7, #8]
 8008104:	461a      	mov	r2, r3
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa5d 	bl	80085c8 <USBD_CtlSendData>
 800810e:	e009      	b.n	8008124 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9e7 	bl	80084e6 <USBD_CtlError>
 8008118:	e004      	b.n	8008124 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 faae 	bl	800867c <USBD_CtlSendStatus>
 8008120:	e000      	b.n	8008124 <USBD_GetDescriptor+0x2cc>
    return;
 8008122:	bf00      	nop
  }
}
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop

0800812c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	889b      	ldrh	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d131      	bne.n	80081a2 <USBD_SetAddress+0x76>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d12d      	bne.n	80081a2 <USBD_SetAddress+0x76>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	2b7f      	cmp	r3, #127	; 0x7f
 800814c:	d829      	bhi.n	80081a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	885b      	ldrh	r3, [r3, #2]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008158:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b03      	cmp	r3, #3
 8008164:	d104      	bne.n	8008170 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f9bc 	bl	80084e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816e:	e01d      	b.n	80081ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7bfa      	ldrb	r2, [r7, #15]
 8008174:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f002 f8a7 	bl	800a2d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa7a 	bl	800867c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008196:	e009      	b.n	80081ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a0:	e004      	b.n	80081ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f99e 	bl	80084e6 <USBD_CtlError>
  }
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	4b4e      	ldr	r3, [pc, #312]	; (8008304 <USBD_SetConfig+0x150>)
 80081ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081cc:	4b4d      	ldr	r3, [pc, #308]	; (8008304 <USBD_SetConfig+0x150>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d905      	bls.n	80081e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f985 	bl	80084e6 <USBD_CtlError>
    return USBD_FAIL;
 80081dc:	2303      	movs	r3, #3
 80081de:	e08c      	b.n	80082fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d002      	beq.n	80081f2 <USBD_SetConfig+0x3e>
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d029      	beq.n	8008244 <USBD_SetConfig+0x90>
 80081f0:	e075      	b.n	80082de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081f2:	4b44      	ldr	r3, [pc, #272]	; (8008304 <USBD_SetConfig+0x150>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d020      	beq.n	800823c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80081fa:	4b42      	ldr	r3, [pc, #264]	; (8008304 <USBD_SetConfig+0x150>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008204:	4b3f      	ldr	r3, [pc, #252]	; (8008304 <USBD_SetConfig+0x150>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fe ffe7 	bl	80071de <USBD_SetClassConfig>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d008      	beq.n	800822c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f962 	bl	80084e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2202      	movs	r2, #2
 8008226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800822a:	e065      	b.n	80082f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fa25 	bl	800867c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2203      	movs	r2, #3
 8008236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800823a:	e05d      	b.n	80082f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa1d 	bl	800867c <USBD_CtlSendStatus>
      break;
 8008242:	e059      	b.n	80082f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008244:	4b2f      	ldr	r3, [pc, #188]	; (8008304 <USBD_SetConfig+0x150>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d112      	bne.n	8008272 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008254:	4b2b      	ldr	r3, [pc, #172]	; (8008304 <USBD_SetConfig+0x150>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800825e:	4b29      	ldr	r3, [pc, #164]	; (8008304 <USBD_SetConfig+0x150>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7fe ffd6 	bl	8007216 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa06 	bl	800867c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008270:	e042      	b.n	80082f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <USBD_SetConfig+0x150>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d02a      	beq.n	80082d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7fe ffc4 	bl	8007216 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800828e:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <USBD_SetConfig+0x150>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008298:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <USBD_SetConfig+0x150>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fe ff9d 	bl	80071de <USBD_SetClassConfig>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00f      	beq.n	80082ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f918 	bl	80084e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fe ffa9 	bl	8007216 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082cc:	e014      	b.n	80082f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f9d4 	bl	800867c <USBD_CtlSendStatus>
      break;
 80082d4:	e010      	b.n	80082f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f9d0 	bl	800867c <USBD_CtlSendStatus>
      break;
 80082dc:	e00c      	b.n	80082f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f900 	bl	80084e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082e6:	4b07      	ldr	r3, [pc, #28]	; (8008304 <USBD_SetConfig+0x150>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fe ff92 	bl	8007216 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082f2:	2303      	movs	r3, #3
 80082f4:	73fb      	strb	r3, [r7, #15]
      break;
 80082f6:	bf00      	nop
  }

  return ret;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000a70 	.word	0x20000a70

08008308 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88db      	ldrh	r3, [r3, #6]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d004      	beq.n	8008324 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f8e2 	bl	80084e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008322:	e023      	b.n	800836c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	dc02      	bgt.n	8008336 <USBD_GetConfig+0x2e>
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc03      	bgt.n	800833c <USBD_GetConfig+0x34>
 8008334:	e015      	b.n	8008362 <USBD_GetConfig+0x5a>
 8008336:	2b03      	cmp	r3, #3
 8008338:	d00b      	beq.n	8008352 <USBD_GetConfig+0x4a>
 800833a:	e012      	b.n	8008362 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3308      	adds	r3, #8
 8008346:	2201      	movs	r2, #1
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f93c 	bl	80085c8 <USBD_CtlSendData>
        break;
 8008350:	e00c      	b.n	800836c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3304      	adds	r3, #4
 8008356:	2201      	movs	r2, #1
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f934 	bl	80085c8 <USBD_CtlSendData>
        break;
 8008360:	e004      	b.n	800836c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f8be 	bl	80084e6 <USBD_CtlError>
        break;
 800836a:	bf00      	nop
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008384:	b2db      	uxtb	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	2b02      	cmp	r3, #2
 800838a:	d81e      	bhi.n	80083ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	88db      	ldrh	r3, [r3, #6]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d004      	beq.n	800839e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f8a5 	bl	80084e6 <USBD_CtlError>
        break;
 800839c:	e01a      	b.n	80083d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f043 0202 	orr.w	r2, r3, #2
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	330c      	adds	r3, #12
 80083be:	2202      	movs	r2, #2
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f900 	bl	80085c8 <USBD_CtlSendData>
      break;
 80083c8:	e004      	b.n	80083d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f88a 	bl	80084e6 <USBD_CtlError>
      break;
 80083d2:	bf00      	nop
  }
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	885b      	ldrh	r3, [r3, #2]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d107      	bne.n	80083fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f940 	bl	800867c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80083fc:	e013      	b.n	8008426 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d10b      	bne.n	800841e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	889b      	ldrh	r3, [r3, #4]
 800840a:	0a1b      	lsrs	r3, r3, #8
 800840c:	b29b      	uxth	r3, r3
 800840e:	b2da      	uxtb	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f930 	bl	800867c <USBD_CtlSendStatus>
}
 800841c:	e003      	b.n	8008426 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f860 	bl	80084e6 <USBD_CtlError>
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843e:	b2db      	uxtb	r3, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	2b02      	cmp	r3, #2
 8008444:	d80b      	bhi.n	800845e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	885b      	ldrh	r3, [r3, #2]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d10c      	bne.n	8008468 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f910 	bl	800867c <USBD_CtlSendStatus>
      }
      break;
 800845c:	e004      	b.n	8008468 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f840 	bl	80084e6 <USBD_CtlError>
      break;
 8008466:	e000      	b.n	800846a <USBD_ClrFeature+0x3c>
      break;
 8008468:	bf00      	nop
  }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	781a      	ldrb	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	781a      	ldrb	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fa41 	bl	8007924 <SWAPBYTE>
 80084a2:	4603      	mov	r3, r0
 80084a4:	461a      	mov	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff fa34 	bl	8007924 <SWAPBYTE>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3301      	adds	r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fa27 	bl	8007924 <SWAPBYTE>
 80084d6:	4603      	mov	r3, r0
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	80da      	strh	r2, [r3, #6]
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084f0:	2180      	movs	r1, #128	; 0x80
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fe82 	bl	800a1fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084f8:	2100      	movs	r1, #0
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fe7e 	bl	800a1fc <USBD_LL_StallEP>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d036      	beq.n	800858c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008522:	6938      	ldr	r0, [r7, #16]
 8008524:	f000 f836 	bl	8008594 <USBD_GetLen>
 8008528:	4603      	mov	r3, r0
 800852a:	3301      	adds	r3, #1
 800852c:	b29b      	uxth	r3, r3
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	4413      	add	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	701a      	strb	r2, [r3, #0]
  idx++;
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	3301      	adds	r3, #1
 8008546:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	2203      	movs	r2, #3
 8008550:	701a      	strb	r2, [r3, #0]
  idx++;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	3301      	adds	r3, #1
 8008556:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008558:	e013      	b.n	8008582 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	4413      	add	r3, r2
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3301      	adds	r3, #1
 800856a:	613b      	str	r3, [r7, #16]
    idx++;
 800856c:	7dfb      	ldrb	r3, [r7, #23]
 800856e:	3301      	adds	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	4413      	add	r3, r2
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
    idx++;
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	3301      	adds	r3, #1
 8008580:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e7      	bne.n	800855a <USBD_GetString+0x52>
 800858a:	e000      	b.n	800858e <USBD_GetString+0x86>
    return;
 800858c:	bf00      	nop
  }
}
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085a4:	e005      	b.n	80085b2 <USBD_GetLen+0x1e>
  {
    len++;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	3301      	adds	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f5      	bne.n	80085a6 <USBD_GetLen+0x12>
  }

  return len;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	2100      	movs	r1, #0
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f001 fe8d 	bl	800a30e <USBD_LL_Transmit>

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	2100      	movs	r1, #0
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f001 fe7c 	bl	800a30e <USBD_LL_Transmit>

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2203      	movs	r2, #3
 8008630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	2100      	movs	r1, #0
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f001 fe80 	bl	800a350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	2100      	movs	r1, #0
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f001 fe6f 	bl	800a350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2204      	movs	r2, #4
 8008688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800868c:	2300      	movs	r3, #0
 800868e:	2200      	movs	r2, #0
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fe3b 	bl	800a30e <USBD_LL_Transmit>

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2205      	movs	r2, #5
 80086ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b2:	2300      	movs	r3, #0
 80086b4:	2200      	movs	r2, #0
 80086b6:	2100      	movs	r1, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fe49 	bl	800a350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80086d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086da:	2b84      	cmp	r3, #132	; 0x84
 80086dc:	d005      	beq.n	80086ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80086de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	3303      	adds	r3, #3
 80086e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80086ea:	68fb      	ldr	r3, [r7, #12]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80086fc:	f000 fade 	bl	8008cbc <vTaskStartScheduler>
  
  return osOK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	bd80      	pop	{r7, pc}

08008706 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008708:	b089      	sub	sp, #36	; 0x24
 800870a:	af04      	add	r7, sp, #16
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d020      	beq.n	800875a <osThreadCreate+0x54>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01c      	beq.n	800875a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685c      	ldr	r4, [r3, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681d      	ldr	r5, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691e      	ldr	r6, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff ffc8 	bl	80086c8 <makeFreeRtosPriority>
 8008738:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	9100      	str	r1, [sp, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	4632      	mov	r2, r6
 800874c:	4629      	mov	r1, r5
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f8ed 	bl	800892e <xTaskCreateStatic>
 8008754:	4603      	mov	r3, r0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e01c      	b.n	8008794 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685c      	ldr	r4, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008766:	b29e      	uxth	r6, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff ffaa 	bl	80086c8 <makeFreeRtosPriority>
 8008774:	4602      	mov	r2, r0
 8008776:	f107 030c 	add.w	r3, r7, #12
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	9200      	str	r2, [sp, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	4632      	mov	r2, r6
 8008782:	4629      	mov	r1, r5
 8008784:	4620      	mov	r0, r4
 8008786:	f000 f92f 	bl	80089e8 <xTaskCreate>
 800878a:	4603      	mov	r3, r0
 800878c:	2b01      	cmp	r3, #1
 800878e:	d001      	beq.n	8008794 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	e000      	b.n	8008796 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008794:	68fb      	ldr	r3, [r7, #12]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800879e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <osDelay+0x16>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	e000      	b.n	80087b6 <osDelay+0x18>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fa4c 	bl	8008c54 <vTaskDelay>
  
  return osOK;
 80087bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f103 0208 	add.w	r2, r3, #8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f04f 32ff 	mov.w	r2, #4294967295
 80087de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f103 0208 	add.w	r2, r3, #8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f103 0208 	add.w	r2, r3, #8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	601a      	str	r2, [r3, #0]
}
 800885c:	bf00      	nop
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d103      	bne.n	8008888 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e00c      	b.n	80088a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3308      	adds	r3, #8
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	e002      	b.n	8008896 <vListInsert+0x2e>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d2f6      	bcs.n	8008890 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088da:	b480      	push	{r7}
 80088dc:	b085      	sub	sp, #20
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6892      	ldr	r2, [r2, #8]
 80088f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6852      	ldr	r2, [r2, #4]
 80088fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d103      	bne.n	800890e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	1e5a      	subs	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800892e:	b580      	push	{r7, lr}
 8008930:	b08e      	sub	sp, #56	; 0x38
 8008932:	af04      	add	r7, sp, #16
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <xTaskCreateStatic+0x46>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	61fb      	str	r3, [r7, #28]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008974:	2354      	movs	r3, #84	; 0x54
 8008976:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b54      	cmp	r3, #84	; 0x54
 800897c:	d00a      	beq.n	8008994 <xTaskCreateStatic+0x66>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	61bb      	str	r3, [r7, #24]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008994:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01e      	beq.n	80089da <xTaskCreateStatic+0xac>
 800899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01b      	beq.n	80089da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089b4:	2300      	movs	r3, #0
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f850 	bl	8008a72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d4:	f000 f8d4 	bl	8008b80 <prvAddNewTaskToReadyList>
 80089d8:	e001      	b.n	80089de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089de:	697b      	ldr	r3, [r7, #20]
	}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3728      	adds	r7, #40	; 0x28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08c      	sub	sp, #48	; 0x30
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fec3 	bl	8009788 <pvPortMalloc>
 8008a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00e      	beq.n	8008a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a0a:	2054      	movs	r0, #84	; 0x54
 8008a0c:	f000 febc 	bl	8009788 <pvPortMalloc>
 8008a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8008a1e:	e005      	b.n	8008a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a20:	6978      	ldr	r0, [r7, #20]
 8008a22:	f000 ff7d 	bl	8009920 <vPortFree>
 8008a26:	e001      	b.n	8008a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d017      	beq.n	8008a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	9302      	str	r3, [sp, #8]
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f80e 	bl	8008a72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a56:	69f8      	ldr	r0, [r7, #28]
 8008a58:	f000 f892 	bl	8008b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e002      	b.n	8008a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
 8008a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a68:	69bb      	ldr	r3, [r7, #24]
	}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b088      	sub	sp, #32
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f023 0307 	bic.w	r3, r3, #7
 8008a98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <prvInitialiseNewTask+0x48>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	617b      	str	r3, [r7, #20]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01f      	beq.n	8008b00 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	e012      	b.n	8008aec <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	7819      	ldrb	r1, [r3, #0]
 8008ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3334      	adds	r3, #52	; 0x34
 8008ad6:	460a      	mov	r2, r1
 8008ad8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d006      	beq.n	8008af4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	61fb      	str	r3, [r7, #28]
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	2b0f      	cmp	r3, #15
 8008af0:	d9e9      	bls.n	8008ac6 <prvInitialiseNewTask+0x54>
 8008af2:	e000      	b.n	8008af6 <prvInitialiseNewTask+0x84>
			{
				break;
 8008af4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008afe:	e003      	b.n	8008b08 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	2b06      	cmp	r3, #6
 8008b0c:	d901      	bls.n	8008b12 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b0e:	2306      	movs	r3, #6
 8008b10:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	2200      	movs	r2, #0
 8008b22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	3304      	adds	r3, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fe6c 	bl	8008806 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	3318      	adds	r3, #24
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff fe67 	bl	8008806 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	f1c3 0207 	rsb	r2, r3, #7
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	2200      	movs	r2, #0
 8008b52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	69b8      	ldr	r0, [r7, #24]
 8008b62:	f000 fc05 	bl	8009370 <pxPortInitialiseStack>
 8008b66:	4602      	mov	r2, r0
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b78:	bf00      	nop
 8008b7a:	3720      	adds	r7, #32
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b88:	f000 fd1c 	bl	80095c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b8c:	4b2a      	ldr	r3, [pc, #168]	; (8008c38 <prvAddNewTaskToReadyList+0xb8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a29      	ldr	r2, [pc, #164]	; (8008c38 <prvAddNewTaskToReadyList+0xb8>)
 8008b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b96:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <prvAddNewTaskToReadyList+0xbc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b9e:	4a27      	ldr	r2, [pc, #156]	; (8008c3c <prvAddNewTaskToReadyList+0xbc>)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ba4:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <prvAddNewTaskToReadyList+0xb8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d110      	bne.n	8008bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bac:	f000 fabc 	bl	8009128 <prvInitialiseTaskLists>
 8008bb0:	e00d      	b.n	8008bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bb2:	4b23      	ldr	r3, [pc, #140]	; (8008c40 <prvAddNewTaskToReadyList+0xc0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d109      	bne.n	8008bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bba:	4b20      	ldr	r3, [pc, #128]	; (8008c3c <prvAddNewTaskToReadyList+0xbc>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d802      	bhi.n	8008bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bc8:	4a1c      	ldr	r2, [pc, #112]	; (8008c3c <prvAddNewTaskToReadyList+0xbc>)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bce:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <prvAddNewTaskToReadyList+0xc4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <prvAddNewTaskToReadyList+0xc4>)
 8008bd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	2201      	movs	r2, #1
 8008bde:	409a      	lsls	r2, r3
 8008be0:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <prvAddNewTaskToReadyList+0xc8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <prvAddNewTaskToReadyList+0xc8>)
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <prvAddNewTaskToReadyList+0xcc>)
 8008bf8:	441a      	add	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7ff fe0d 	bl	8008820 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c06:	f000 fd0d 	bl	8009624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <prvAddNewTaskToReadyList+0xc0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00e      	beq.n	8008c30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c12:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <prvAddNewTaskToReadyList+0xbc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d207      	bcs.n	8008c30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <prvAddNewTaskToReadyList+0xd0>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000b74 	.word	0x20000b74
 8008c3c:	20000a74 	.word	0x20000a74
 8008c40:	20000b80 	.word	0x20000b80
 8008c44:	20000b90 	.word	0x20000b90
 8008c48:	20000b7c 	.word	0x20000b7c
 8008c4c:	20000a78 	.word	0x20000a78
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d017      	beq.n	8008c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c66:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <vTaskDelay+0x60>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <vTaskDelay+0x30>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	60bb      	str	r3, [r7, #8]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c84:	f000 f87a 	bl	8008d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c88:	2100      	movs	r1, #0
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fb0a 	bl	80092a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c90:	f000 f882 	bl	8008d98 <xTaskResumeAll>
 8008c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d107      	bne.n	8008cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <vTaskDelay+0x64>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000b9c 	.word	0x20000b9c
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	; 0x28
 8008cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cca:	463a      	mov	r2, r7
 8008ccc:	1d39      	adds	r1, r7, #4
 8008cce:	f107 0308 	add.w	r3, r7, #8
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f7 fc56 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	9202      	str	r2, [sp, #8]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	460a      	mov	r2, r1
 8008cea:	491e      	ldr	r1, [pc, #120]	; (8008d64 <vTaskStartScheduler+0xa8>)
 8008cec:	481e      	ldr	r0, [pc, #120]	; (8008d68 <vTaskStartScheduler+0xac>)
 8008cee:	f7ff fe1e 	bl	800892e <xTaskCreateStatic>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4a1d      	ldr	r2, [pc, #116]	; (8008d6c <vTaskStartScheduler+0xb0>)
 8008cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <vTaskStartScheduler+0xb0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d00:	2301      	movs	r3, #1
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e001      	b.n	8008d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d116      	bne.n	8008d3e <vTaskStartScheduler+0x82>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d24:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <vTaskStartScheduler+0xb4>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <vTaskStartScheduler+0xb8>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d32:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <vTaskStartScheduler+0xbc>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d38:	f000 fba2 	bl	8009480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d3c:	e00e      	b.n	8008d5c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d44:	d10a      	bne.n	8008d5c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60fb      	str	r3, [r7, #12]
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <vTaskStartScheduler+0x9e>
}
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	0800ae50 	.word	0x0800ae50
 8008d68:	080090f9 	.word	0x080090f9
 8008d6c:	20000b98 	.word	0x20000b98
 8008d70:	20000b94 	.word	0x20000b94
 8008d74:	20000b80 	.word	0x20000b80
 8008d78:	20000b78 	.word	0x20000b78

08008d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d80:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <vTaskSuspendAll+0x18>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	4a03      	ldr	r2, [pc, #12]	; (8008d94 <vTaskSuspendAll+0x18>)
 8008d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20000b9c 	.word	0x20000b9c

08008d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008da6:	4b41      	ldr	r3, [pc, #260]	; (8008eac <xTaskResumeAll+0x114>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	603b      	str	r3, [r7, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dc4:	f000 fbfe 	bl	80095c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dc8:	4b38      	ldr	r3, [pc, #224]	; (8008eac <xTaskResumeAll+0x114>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	4a37      	ldr	r2, [pc, #220]	; (8008eac <xTaskResumeAll+0x114>)
 8008dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd2:	4b36      	ldr	r3, [pc, #216]	; (8008eac <xTaskResumeAll+0x114>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d161      	bne.n	8008e9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dda:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <xTaskResumeAll+0x118>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d05d      	beq.n	8008e9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008de2:	e02e      	b.n	8008e42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de4:	4b33      	ldr	r3, [pc, #204]	; (8008eb4 <xTaskResumeAll+0x11c>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fd72 	bl	80088da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fd6d 	bl	80088da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	2201      	movs	r2, #1
 8008e06:	409a      	lsls	r2, r3
 8008e08:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <xTaskResumeAll+0x120>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	4a2a      	ldr	r2, [pc, #168]	; (8008eb8 <xTaskResumeAll+0x120>)
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <xTaskResumeAll+0x124>)
 8008e20:	441a      	add	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4619      	mov	r1, r3
 8008e28:	4610      	mov	r0, r2
 8008e2a:	f7ff fcf9 	bl	8008820 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <xTaskResumeAll+0x128>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d302      	bcc.n	8008e42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e3c:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <xTaskResumeAll+0x12c>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e42:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <xTaskResumeAll+0x11c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1cc      	bne.n	8008de4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e50:	f000 fa08 	bl	8009264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e54:	4b1c      	ldr	r3, [pc, #112]	; (8008ec8 <xTaskResumeAll+0x130>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d010      	beq.n	8008e82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e60:	f000 f836 	bl	8008ed0 <xTaskIncrementTick>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008e6a:	4b16      	ldr	r3, [pc, #88]	; (8008ec4 <xTaskResumeAll+0x12c>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f1      	bne.n	8008e60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008e7c:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <xTaskResumeAll+0x130>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e82:	4b10      	ldr	r3, [pc, #64]	; (8008ec4 <xTaskResumeAll+0x12c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <xTaskResumeAll+0x134>)
 8008e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e9e:	f000 fbc1 	bl	8009624 <vPortExitCritical>

	return xAlreadyYielded;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20000b9c 	.word	0x20000b9c
 8008eb0:	20000b74 	.word	0x20000b74
 8008eb4:	20000b34 	.word	0x20000b34
 8008eb8:	20000b7c 	.word	0x20000b7c
 8008ebc:	20000a78 	.word	0x20000a78
 8008ec0:	20000a74 	.word	0x20000a74
 8008ec4:	20000b88 	.word	0x20000b88
 8008ec8:	20000b84 	.word	0x20000b84
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eda:	4b4e      	ldr	r3, [pc, #312]	; (8009014 <xTaskIncrementTick+0x144>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f040 808e 	bne.w	8009000 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ee4:	4b4c      	ldr	r3, [pc, #304]	; (8009018 <xTaskIncrementTick+0x148>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008eec:	4a4a      	ldr	r2, [pc, #296]	; (8009018 <xTaskIncrementTick+0x148>)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d120      	bne.n	8008f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ef8:	4b48      	ldr	r3, [pc, #288]	; (800901c <xTaskIncrementTick+0x14c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	603b      	str	r3, [r7, #0]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <xTaskIncrementTick+0x46>
 8008f18:	4b40      	ldr	r3, [pc, #256]	; (800901c <xTaskIncrementTick+0x14c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	4b40      	ldr	r3, [pc, #256]	; (8009020 <xTaskIncrementTick+0x150>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a3e      	ldr	r2, [pc, #248]	; (800901c <xTaskIncrementTick+0x14c>)
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4a3e      	ldr	r2, [pc, #248]	; (8009020 <xTaskIncrementTick+0x150>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	4b3d      	ldr	r3, [pc, #244]	; (8009024 <xTaskIncrementTick+0x154>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	4a3c      	ldr	r2, [pc, #240]	; (8009024 <xTaskIncrementTick+0x154>)
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	f000 f995 	bl	8009264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f3a:	4b3b      	ldr	r3, [pc, #236]	; (8009028 <xTaskIncrementTick+0x158>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d348      	bcc.n	8008fd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f44:	4b35      	ldr	r3, [pc, #212]	; (800901c <xTaskIncrementTick+0x14c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4e:	4b36      	ldr	r3, [pc, #216]	; (8009028 <xTaskIncrementTick+0x158>)
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	601a      	str	r2, [r3, #0]
					break;
 8008f56:	e03e      	b.n	8008fd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f58:	4b30      	ldr	r3, [pc, #192]	; (800901c <xTaskIncrementTick+0x14c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d203      	bcs.n	8008f78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f70:	4a2d      	ldr	r2, [pc, #180]	; (8009028 <xTaskIncrementTick+0x158>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f76:	e02e      	b.n	8008fd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff fcac 	bl	80088da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	3318      	adds	r3, #24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff fca3 	bl	80088da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	2201      	movs	r2, #1
 8008f9a:	409a      	lsls	r2, r3
 8008f9c:	4b23      	ldr	r3, [pc, #140]	; (800902c <xTaskIncrementTick+0x15c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	4a22      	ldr	r2, [pc, #136]	; (800902c <xTaskIncrementTick+0x15c>)
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <xTaskIncrementTick+0x160>)
 8008fb4:	441a      	add	r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f7ff fc2f 	bl	8008820 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <xTaskIncrementTick+0x164>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3b9      	bcc.n	8008f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fd4:	e7b6      	b.n	8008f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fd6:	4b17      	ldr	r3, [pc, #92]	; (8009034 <xTaskIncrementTick+0x164>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fdc:	4914      	ldr	r1, [pc, #80]	; (8009030 <xTaskIncrementTick+0x160>)
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d901      	bls.n	8008ff2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <xTaskIncrementTick+0x168>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d007      	beq.n	800900a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e004      	b.n	800900a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <xTaskIncrementTick+0x16c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	4a0d      	ldr	r2, [pc, #52]	; (800903c <xTaskIncrementTick+0x16c>)
 8009008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800900a:	697b      	ldr	r3, [r7, #20]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20000b9c 	.word	0x20000b9c
 8009018:	20000b78 	.word	0x20000b78
 800901c:	20000b2c 	.word	0x20000b2c
 8009020:	20000b30 	.word	0x20000b30
 8009024:	20000b8c 	.word	0x20000b8c
 8009028:	20000b94 	.word	0x20000b94
 800902c:	20000b7c 	.word	0x20000b7c
 8009030:	20000a78 	.word	0x20000a78
 8009034:	20000a74 	.word	0x20000a74
 8009038:	20000b88 	.word	0x20000b88
 800903c:	20000b84 	.word	0x20000b84

08009040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009046:	4b27      	ldr	r3, [pc, #156]	; (80090e4 <vTaskSwitchContext+0xa4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800904e:	4b26      	ldr	r3, [pc, #152]	; (80090e8 <vTaskSwitchContext+0xa8>)
 8009050:	2201      	movs	r2, #1
 8009052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009054:	e03f      	b.n	80090d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009056:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <vTaskSwitchContext+0xa8>)
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905c:	4b23      	ldr	r3, [pc, #140]	; (80090ec <vTaskSwitchContext+0xac>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	fab3 f383 	clz	r3, r3
 8009068:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	f1c3 031f 	rsb	r3, r3, #31
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	491f      	ldr	r1, [pc, #124]	; (80090f0 <vTaskSwitchContext+0xb0>)
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	607b      	str	r3, [r7, #4]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <vTaskSwitchContext+0x5a>
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4a12      	ldr	r2, [pc, #72]	; (80090f0 <vTaskSwitchContext+0xb0>)
 80090a8:	4413      	add	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	605a      	str	r2, [r3, #4]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3308      	adds	r3, #8
 80090be:	429a      	cmp	r2, r3
 80090c0:	d104      	bne.n	80090cc <vTaskSwitchContext+0x8c>
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	605a      	str	r2, [r3, #4]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4a08      	ldr	r2, [pc, #32]	; (80090f4 <vTaskSwitchContext+0xb4>)
 80090d4:	6013      	str	r3, [r2, #0]
}
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000b9c 	.word	0x20000b9c
 80090e8:	20000b88 	.word	0x20000b88
 80090ec:	20000b7c 	.word	0x20000b7c
 80090f0:	20000a78 	.word	0x20000a78
 80090f4:	20000a74 	.word	0x20000a74

080090f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009100:	f000 f852 	bl	80091a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <prvIdleTask+0x28>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d9f9      	bls.n	8009100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <prvIdleTask+0x2c>)
 800910e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800911c:	e7f0      	b.n	8009100 <prvIdleTask+0x8>
 800911e:	bf00      	nop
 8009120:	20000a78 	.word	0x20000a78
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800912e:	2300      	movs	r3, #0
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	e00c      	b.n	800914e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4a12      	ldr	r2, [pc, #72]	; (8009188 <prvInitialiseTaskLists+0x60>)
 8009140:	4413      	add	r3, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7ff fb3f 	bl	80087c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3301      	adds	r3, #1
 800914c:	607b      	str	r3, [r7, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b06      	cmp	r3, #6
 8009152:	d9ef      	bls.n	8009134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009154:	480d      	ldr	r0, [pc, #52]	; (800918c <prvInitialiseTaskLists+0x64>)
 8009156:	f7ff fb36 	bl	80087c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800915a:	480d      	ldr	r0, [pc, #52]	; (8009190 <prvInitialiseTaskLists+0x68>)
 800915c:	f7ff fb33 	bl	80087c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009160:	480c      	ldr	r0, [pc, #48]	; (8009194 <prvInitialiseTaskLists+0x6c>)
 8009162:	f7ff fb30 	bl	80087c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009166:	480c      	ldr	r0, [pc, #48]	; (8009198 <prvInitialiseTaskLists+0x70>)
 8009168:	f7ff fb2d 	bl	80087c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800916c:	480b      	ldr	r0, [pc, #44]	; (800919c <prvInitialiseTaskLists+0x74>)
 800916e:	f7ff fb2a 	bl	80087c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvInitialiseTaskLists+0x78>)
 8009174:	4a05      	ldr	r2, [pc, #20]	; (800918c <prvInitialiseTaskLists+0x64>)
 8009176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <prvInitialiseTaskLists+0x7c>)
 800917a:	4a05      	ldr	r2, [pc, #20]	; (8009190 <prvInitialiseTaskLists+0x68>)
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000a78 	.word	0x20000a78
 800918c:	20000b04 	.word	0x20000b04
 8009190:	20000b18 	.word	0x20000b18
 8009194:	20000b34 	.word	0x20000b34
 8009198:	20000b48 	.word	0x20000b48
 800919c:	20000b60 	.word	0x20000b60
 80091a0:	20000b2c 	.word	0x20000b2c
 80091a4:	20000b30 	.word	0x20000b30

080091a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091ae:	e019      	b.n	80091e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091b0:	f000 fa08 	bl	80095c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <prvCheckTasksWaitingTermination+0x50>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff fb8a 	bl	80088da <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <prvCheckTasksWaitingTermination+0x54>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	4a0b      	ldr	r2, [pc, #44]	; (80091fc <prvCheckTasksWaitingTermination+0x54>)
 80091ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <prvCheckTasksWaitingTermination+0x58>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4a0a      	ldr	r2, [pc, #40]	; (8009200 <prvCheckTasksWaitingTermination+0x58>)
 80091d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091da:	f000 fa23 	bl	8009624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f810 	bl	8009204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <prvCheckTasksWaitingTermination+0x58>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e1      	bne.n	80091b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000b48 	.word	0x20000b48
 80091fc:	20000b74 	.word	0x20000b74
 8009200:	20000b5c 	.word	0x20000b5c

08009204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009212:	2b00      	cmp	r3, #0
 8009214:	d108      	bne.n	8009228 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fb80 	bl	8009920 <vPortFree>
				vPortFree( pxTCB );
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb7d 	bl	8009920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009226:	e018      	b.n	800925a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800922e:	2b01      	cmp	r3, #1
 8009230:	d103      	bne.n	800923a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb74 	bl	8009920 <vPortFree>
	}
 8009238:	e00f      	b.n	800925a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009240:	2b02      	cmp	r3, #2
 8009242:	d00a      	beq.n	800925a <prvDeleteTCB+0x56>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	60fb      	str	r3, [r7, #12]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <prvDeleteTCB+0x54>
	}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <prvResetNextTaskUnblockTime+0x38>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009274:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <prvResetNextTaskUnblockTime+0x3c>)
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800927c:	e008      	b.n	8009290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <prvResetNextTaskUnblockTime+0x38>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <prvResetNextTaskUnblockTime+0x3c>)
 800928e:	6013      	str	r3, [r2, #0]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20000b2c 	.word	0x20000b2c
 80092a0:	20000b94 	.word	0x20000b94

080092a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092ae:	4b29      	ldr	r3, [pc, #164]	; (8009354 <prvAddCurrentTaskToDelayedList+0xb0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b4:	4b28      	ldr	r3, [pc, #160]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fb0d 	bl	80088da <uxListRemove>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092c6:	4b24      	ldr	r3, [pc, #144]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	2201      	movs	r2, #1
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	43da      	mvns	r2, r3
 80092d4:	4b21      	ldr	r3, [pc, #132]	; (800935c <prvAddCurrentTaskToDelayedList+0xb8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4013      	ands	r3, r2
 80092da:	4a20      	ldr	r2, [pc, #128]	; (800935c <prvAddCurrentTaskToDelayedList+0xb8>)
 80092dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d10a      	bne.n	80092fc <prvAddCurrentTaskToDelayedList+0x58>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ec:	4b1a      	ldr	r3, [pc, #104]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3304      	adds	r3, #4
 80092f2:	4619      	mov	r1, r3
 80092f4:	481a      	ldr	r0, [pc, #104]	; (8009360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80092f6:	f7ff fa93 	bl	8008820 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092fa:	e026      	b.n	800934a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4413      	add	r3, r2
 8009302:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009304:	4b14      	ldr	r3, [pc, #80]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d209      	bcs.n	8009328 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009314:	4b13      	ldr	r3, [pc, #76]	; (8009364 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3304      	adds	r3, #4
 800931e:	4619      	mov	r1, r3
 8009320:	4610      	mov	r0, r2
 8009322:	f7ff faa1 	bl	8008868 <vListInsert>
}
 8009326:	e010      	b.n	800934a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009328:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <prvAddCurrentTaskToDelayedList+0xc4>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3304      	adds	r3, #4
 8009332:	4619      	mov	r1, r3
 8009334:	4610      	mov	r0, r2
 8009336:	f7ff fa97 	bl	8008868 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800933a:	4b0c      	ldr	r3, [pc, #48]	; (800936c <prvAddCurrentTaskToDelayedList+0xc8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	429a      	cmp	r2, r3
 8009342:	d202      	bcs.n	800934a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009344:	4a09      	ldr	r2, [pc, #36]	; (800936c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6013      	str	r3, [r2, #0]
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20000b78 	.word	0x20000b78
 8009358:	20000a74 	.word	0x20000a74
 800935c:	20000b7c 	.word	0x20000b7c
 8009360:	20000b60 	.word	0x20000b60
 8009364:	20000b30 	.word	0x20000b30
 8009368:	20000b2c 	.word	0x20000b2c
 800936c:	20000b94 	.word	0x20000b94

08009370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3b04      	subs	r3, #4
 8009380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3b04      	subs	r3, #4
 800938e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f023 0201 	bic.w	r2, r3, #1
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3b04      	subs	r3, #4
 800939e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093a0:	4a0c      	ldr	r2, [pc, #48]	; (80093d4 <pxPortInitialiseStack+0x64>)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3b14      	subs	r3, #20
 80093aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3b04      	subs	r3, #4
 80093b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f06f 0202 	mvn.w	r2, #2
 80093be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3b20      	subs	r3, #32
 80093c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093c6:	68fb      	ldr	r3, [r7, #12]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	080093d9 	.word	0x080093d9

080093d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093e2:	4b12      	ldr	r3, [pc, #72]	; (800942c <prvTaskExitError+0x54>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ea:	d00a      	beq.n	8009402 <prvTaskExitError+0x2a>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <prvTaskExitError+0x28>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	60bb      	str	r3, [r7, #8]
}
 8009414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009416:	bf00      	nop
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0fc      	beq.n	8009418 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	200000a0 	.word	0x200000a0

08009430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <pxCurrentTCBConst2>)
 8009432:	6819      	ldr	r1, [r3, #0]
 8009434:	6808      	ldr	r0, [r1, #0]
 8009436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943a:	f380 8809 	msr	PSP, r0
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f04f 0000 	mov.w	r0, #0
 8009446:	f380 8811 	msr	BASEPRI, r0
 800944a:	4770      	bx	lr
 800944c:	f3af 8000 	nop.w

08009450 <pxCurrentTCBConst2>:
 8009450:	20000a74 	.word	0x20000a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop

08009458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009458:	4808      	ldr	r0, [pc, #32]	; (800947c <prvPortStartFirstTask+0x24>)
 800945a:	6800      	ldr	r0, [r0, #0]
 800945c:	6800      	ldr	r0, [r0, #0]
 800945e:	f380 8808 	msr	MSP, r0
 8009462:	f04f 0000 	mov.w	r0, #0
 8009466:	f380 8814 	msr	CONTROL, r0
 800946a:	b662      	cpsie	i
 800946c:	b661      	cpsie	f
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	df00      	svc	0
 8009478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800947a:	bf00      	nop
 800947c:	e000ed08 	.word	0xe000ed08

08009480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009486:	4b46      	ldr	r3, [pc, #280]	; (80095a0 <xPortStartScheduler+0x120>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a46      	ldr	r2, [pc, #280]	; (80095a4 <xPortStartScheduler+0x124>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10a      	bne.n	80094a6 <xPortStartScheduler+0x26>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	613b      	str	r3, [r7, #16]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094a6:	4b3e      	ldr	r3, [pc, #248]	; (80095a0 <xPortStartScheduler+0x120>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a3f      	ldr	r2, [pc, #252]	; (80095a8 <xPortStartScheduler+0x128>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d10a      	bne.n	80094c6 <xPortStartScheduler+0x46>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	60fb      	str	r3, [r7, #12]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094c6:	4b39      	ldr	r3, [pc, #228]	; (80095ac <xPortStartScheduler+0x12c>)
 80094c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	22ff      	movs	r2, #255	; 0xff
 80094d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	4b31      	ldr	r3, [pc, #196]	; (80095b0 <xPortStartScheduler+0x130>)
 80094ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094ee:	4b31      	ldr	r3, [pc, #196]	; (80095b4 <xPortStartScheduler+0x134>)
 80094f0:	2207      	movs	r2, #7
 80094f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094f4:	e009      	b.n	800950a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80094f6:	4b2f      	ldr	r3, [pc, #188]	; (80095b4 <xPortStartScheduler+0x134>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	4a2d      	ldr	r2, [pc, #180]	; (80095b4 <xPortStartScheduler+0x134>)
 80094fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	b2db      	uxtb	r3, r3
 8009508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009512:	2b80      	cmp	r3, #128	; 0x80
 8009514:	d0ef      	beq.n	80094f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009516:	4b27      	ldr	r3, [pc, #156]	; (80095b4 <xPortStartScheduler+0x134>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f1c3 0307 	rsb	r3, r3, #7
 800951e:	2b04      	cmp	r3, #4
 8009520:	d00a      	beq.n	8009538 <xPortStartScheduler+0xb8>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	60bb      	str	r3, [r7, #8]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009538:	4b1e      	ldr	r3, [pc, #120]	; (80095b4 <xPortStartScheduler+0x134>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	4a1d      	ldr	r2, [pc, #116]	; (80095b4 <xPortStartScheduler+0x134>)
 8009540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009542:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <xPortStartScheduler+0x134>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800954a:	4a1a      	ldr	r2, [pc, #104]	; (80095b4 <xPortStartScheduler+0x134>)
 800954c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009556:	4b18      	ldr	r3, [pc, #96]	; (80095b8 <xPortStartScheduler+0x138>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <xPortStartScheduler+0x138>)
 800955c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <xPortStartScheduler+0x138>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <xPortStartScheduler+0x138>)
 8009568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800956c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800956e:	f000 f8dd 	bl	800972c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009572:	4b12      	ldr	r3, [pc, #72]	; (80095bc <xPortStartScheduler+0x13c>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009578:	f000 f8fc 	bl	8009774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800957c:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <xPortStartScheduler+0x140>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a0f      	ldr	r2, [pc, #60]	; (80095c0 <xPortStartScheduler+0x140>)
 8009582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009588:	f7ff ff66 	bl	8009458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800958c:	f7ff fd58 	bl	8009040 <vTaskSwitchContext>
	prvTaskExitError();
 8009590:	f7ff ff22 	bl	80093d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	e000ed00 	.word	0xe000ed00
 80095a4:	410fc271 	.word	0x410fc271
 80095a8:	410fc270 	.word	0x410fc270
 80095ac:	e000e400 	.word	0xe000e400
 80095b0:	20000ba0 	.word	0x20000ba0
 80095b4:	20000ba4 	.word	0x20000ba4
 80095b8:	e000ed20 	.word	0xe000ed20
 80095bc:	200000a0 	.word	0x200000a0
 80095c0:	e000ef34 	.word	0xe000ef34

080095c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	607b      	str	r3, [r7, #4]
}
 80095dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095de:	4b0f      	ldr	r3, [pc, #60]	; (800961c <vPortEnterCritical+0x58>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	4a0d      	ldr	r2, [pc, #52]	; (800961c <vPortEnterCritical+0x58>)
 80095e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <vPortEnterCritical+0x58>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d10f      	bne.n	8009610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <vPortEnterCritical+0x5c>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <vPortEnterCritical+0x4c>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	603b      	str	r3, [r7, #0]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <vPortEnterCritical+0x4a>
	}
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	200000a0 	.word	0x200000a0
 8009620:	e000ed04 	.word	0xe000ed04

08009624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <vPortExitCritical+0x50>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10a      	bne.n	8009648 <vPortExitCritical+0x24>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	607b      	str	r3, [r7, #4]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009648:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <vPortExitCritical+0x50>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3b01      	subs	r3, #1
 800964e:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vPortExitCritical+0x50>)
 8009650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009652:	4b08      	ldr	r3, [pc, #32]	; (8009674 <vPortExitCritical+0x50>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d105      	bne.n	8009666 <vPortExitCritical+0x42>
 800965a:	2300      	movs	r3, #0
 800965c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009666:	bf00      	nop
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	200000a0 	.word	0x200000a0
	...

08009680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009680:	f3ef 8009 	mrs	r0, PSP
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <pxCurrentTCBConst>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	f01e 0f10 	tst.w	lr, #16
 8009690:	bf08      	it	eq
 8009692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	6010      	str	r0, [r2, #0]
 800969c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096a4:	f380 8811 	msr	BASEPRI, r0
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f7ff fcc6 	bl	8009040 <vTaskSwitchContext>
 80096b4:	f04f 0000 	mov.w	r0, #0
 80096b8:	f380 8811 	msr	BASEPRI, r0
 80096bc:	bc09      	pop	{r0, r3}
 80096be:	6819      	ldr	r1, [r3, #0]
 80096c0:	6808      	ldr	r0, [r1, #0]
 80096c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c6:	f01e 0f10 	tst.w	lr, #16
 80096ca:	bf08      	it	eq
 80096cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096d0:	f380 8809 	msr	PSP, r0
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst>:
 80096e0:	20000a74 	.word	0x20000a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009702:	f7ff fbe5 	bl	8008ed0 <xTaskIncrementTick>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800970c:	4b06      	ldr	r3, [pc, #24]	; (8009728 <SysTick_Handler+0x40>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f383 8811 	msr	BASEPRI, r3
}
 800971e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <vPortSetupTimerInterrupt+0x34>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009736:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <vPortSetupTimerInterrupt+0x38>)
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800973c:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <vPortSetupTimerInterrupt+0x3c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a0a      	ldr	r2, [pc, #40]	; (800976c <vPortSetupTimerInterrupt+0x40>)
 8009742:	fba2 2303 	umull	r2, r3, r2, r3
 8009746:	099b      	lsrs	r3, r3, #6
 8009748:	4a09      	ldr	r2, [pc, #36]	; (8009770 <vPortSetupTimerInterrupt+0x44>)
 800974a:	3b01      	subs	r3, #1
 800974c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800974e:	4b04      	ldr	r3, [pc, #16]	; (8009760 <vPortSetupTimerInterrupt+0x34>)
 8009750:	2207      	movs	r2, #7
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	e000e010 	.word	0xe000e010
 8009764:	e000e018 	.word	0xe000e018
 8009768:	20000018 	.word	0x20000018
 800976c:	10624dd3 	.word	0x10624dd3
 8009770:	e000e014 	.word	0xe000e014

08009774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009784 <vPortEnableVFP+0x10>
 8009778:	6801      	ldr	r1, [r0, #0]
 800977a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800977e:	6001      	str	r1, [r0, #0]
 8009780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009782:	bf00      	nop
 8009784:	e000ed88 	.word	0xe000ed88

08009788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	; 0x28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009790:	2300      	movs	r3, #0
 8009792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009794:	f7ff faf2 	bl	8008d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009798:	4b5b      	ldr	r3, [pc, #364]	; (8009908 <pvPortMalloc+0x180>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097a0:	f000 f920 	bl	80099e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097a4:	4b59      	ldr	r3, [pc, #356]	; (800990c <pvPortMalloc+0x184>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 8093 	bne.w	80098d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d01d      	beq.n	80097f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097b8:	2208      	movs	r2, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d014      	beq.n	80097f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f023 0307 	bic.w	r3, r3, #7
 80097d0:	3308      	adds	r3, #8
 80097d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <pvPortMalloc+0x6c>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	617b      	str	r3, [r7, #20]
}
 80097f0:	bf00      	nop
 80097f2:	e7fe      	b.n	80097f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d06e      	beq.n	80098d8 <pvPortMalloc+0x150>
 80097fa:	4b45      	ldr	r3, [pc, #276]	; (8009910 <pvPortMalloc+0x188>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	d869      	bhi.n	80098d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009804:	4b43      	ldr	r3, [pc, #268]	; (8009914 <pvPortMalloc+0x18c>)
 8009806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009808:	4b42      	ldr	r3, [pc, #264]	; (8009914 <pvPortMalloc+0x18c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800980e:	e004      	b.n	800981a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d903      	bls.n	800982c <pvPortMalloc+0xa4>
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1f1      	bne.n	8009810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800982c:	4b36      	ldr	r3, [pc, #216]	; (8009908 <pvPortMalloc+0x180>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009832:	429a      	cmp	r2, r3
 8009834:	d050      	beq.n	80098d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2208      	movs	r2, #8
 800983c:	4413      	add	r3, r2
 800983e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	2308      	movs	r3, #8
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	429a      	cmp	r2, r3
 8009856:	d91f      	bls.n	8009898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <pvPortMalloc+0xf8>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	613b      	str	r3, [r7, #16]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	1ad2      	subs	r2, r2, r3
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009892:	69b8      	ldr	r0, [r7, #24]
 8009894:	f000 f908 	bl	8009aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009898:	4b1d      	ldr	r3, [pc, #116]	; (8009910 <pvPortMalloc+0x188>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <pvPortMalloc+0x188>)
 80098a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098a6:	4b1a      	ldr	r3, [pc, #104]	; (8009910 <pvPortMalloc+0x188>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4b1b      	ldr	r3, [pc, #108]	; (8009918 <pvPortMalloc+0x190>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d203      	bcs.n	80098ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098b2:	4b17      	ldr	r3, [pc, #92]	; (8009910 <pvPortMalloc+0x188>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a18      	ldr	r2, [pc, #96]	; (8009918 <pvPortMalloc+0x190>)
 80098b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	4b13      	ldr	r3, [pc, #76]	; (800990c <pvPortMalloc+0x184>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	431a      	orrs	r2, r3
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	2200      	movs	r2, #0
 80098cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <pvPortMalloc+0x194>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a11      	ldr	r2, [pc, #68]	; (800991c <pvPortMalloc+0x194>)
 80098d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098d8:	f7ff fa5e 	bl	8008d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <pvPortMalloc+0x174>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	60fb      	str	r3, [r7, #12]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <pvPortMalloc+0x172>
	return pvReturn;
 80098fc:	69fb      	ldr	r3, [r7, #28]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3728      	adds	r7, #40	; 0x28
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200047b0 	.word	0x200047b0
 800990c:	200047c4 	.word	0x200047c4
 8009910:	200047b4 	.word	0x200047b4
 8009914:	200047a8 	.word	0x200047a8
 8009918:	200047b8 	.word	0x200047b8
 800991c:	200047bc 	.word	0x200047bc

08009920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d04d      	beq.n	80099ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009932:	2308      	movs	r3, #8
 8009934:	425b      	negs	r3, r3
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4413      	add	r3, r2
 800993a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <vPortFree+0xb8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4013      	ands	r3, r2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <vPortFree+0x44>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	60fb      	str	r3, [r7, #12]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00a      	beq.n	8009982 <vPortFree+0x62>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	60bb      	str	r3, [r7, #8]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <vPortFree+0xb8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4013      	ands	r3, r2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01e      	beq.n	80099ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d11a      	bne.n	80099ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	4b0e      	ldr	r3, [pc, #56]	; (80099d8 <vPortFree+0xb8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	43db      	mvns	r3, r3
 80099a2:	401a      	ands	r2, r3
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099a8:	f7ff f9e8 	bl	8008d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <vPortFree+0xbc>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4413      	add	r3, r2
 80099b6:	4a09      	ldr	r2, [pc, #36]	; (80099dc <vPortFree+0xbc>)
 80099b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ba:	6938      	ldr	r0, [r7, #16]
 80099bc:	f000 f874 	bl	8009aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099c0:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <vPortFree+0xc0>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3301      	adds	r3, #1
 80099c6:	4a06      	ldr	r2, [pc, #24]	; (80099e0 <vPortFree+0xc0>)
 80099c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099ca:	f7ff f9e5 	bl	8008d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ce:	bf00      	nop
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	200047c4 	.word	0x200047c4
 80099dc:	200047b4 	.word	0x200047b4
 80099e0:	200047c0 	.word	0x200047c0

080099e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099f0:	4b27      	ldr	r3, [pc, #156]	; (8009a90 <prvHeapInit+0xac>)
 80099f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00c      	beq.n	8009a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3307      	adds	r3, #7
 8009a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f023 0307 	bic.w	r3, r3, #7
 8009a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	4a1f      	ldr	r2, [pc, #124]	; (8009a90 <prvHeapInit+0xac>)
 8009a14:	4413      	add	r3, r2
 8009a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a1c:	4a1d      	ldr	r2, [pc, #116]	; (8009a94 <prvHeapInit+0xb0>)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a22:	4b1c      	ldr	r3, [pc, #112]	; (8009a94 <prvHeapInit+0xb0>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a30:	2208      	movs	r2, #8
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4a15      	ldr	r2, [pc, #84]	; (8009a98 <prvHeapInit+0xb4>)
 8009a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <prvHeapInit+0xb4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a4e:	4b12      	ldr	r3, [pc, #72]	; (8009a98 <prvHeapInit+0xb4>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	1ad2      	subs	r2, r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a64:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <prvHeapInit+0xb4>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <prvHeapInit+0xb8>)
 8009a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <prvHeapInit+0xbc>)
 8009a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <prvHeapInit+0xc0>)
 8009a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a82:	601a      	str	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	20000ba8 	.word	0x20000ba8
 8009a94:	200047a8 	.word	0x200047a8
 8009a98:	200047b0 	.word	0x200047b0
 8009a9c:	200047b8 	.word	0x200047b8
 8009aa0:	200047b4 	.word	0x200047b4
 8009aa4:	200047c4 	.word	0x200047c4

08009aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ab0:	4b28      	ldr	r3, [pc, #160]	; (8009b54 <prvInsertBlockIntoFreeList+0xac>)
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e002      	b.n	8009abc <prvInsertBlockIntoFreeList+0x14>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d8f7      	bhi.n	8009ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d108      	bne.n	8009aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	441a      	add	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	441a      	add	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d118      	bne.n	8009b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <prvInsertBlockIntoFreeList+0xb0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d00d      	beq.n	8009b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	441a      	add	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	e008      	b.n	8009b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b26:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <prvInsertBlockIntoFreeList+0xb0>)
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	e003      	b.n	8009b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d002      	beq.n	8009b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b46:	bf00      	nop
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	200047a8 	.word	0x200047a8
 8009b58:	200047b0 	.word	0x200047b0

08009b5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b60:	2200      	movs	r2, #0
 8009b62:	4912      	ldr	r1, [pc, #72]	; (8009bac <MX_USB_DEVICE_Init+0x50>)
 8009b64:	4812      	ldr	r0, [pc, #72]	; (8009bb0 <MX_USB_DEVICE_Init+0x54>)
 8009b66:	f7fd fabd 	bl	80070e4 <USBD_Init>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b70:	f7f7 f882 	bl	8000c78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b74:	490f      	ldr	r1, [pc, #60]	; (8009bb4 <MX_USB_DEVICE_Init+0x58>)
 8009b76:	480e      	ldr	r0, [pc, #56]	; (8009bb0 <MX_USB_DEVICE_Init+0x54>)
 8009b78:	f7fd fae4 	bl	8007144 <USBD_RegisterClass>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b82:	f7f7 f879 	bl	8000c78 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b86:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <MX_USB_DEVICE_Init+0x5c>)
 8009b88:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <MX_USB_DEVICE_Init+0x54>)
 8009b8a:	f7fd fa91 	bl	80070b0 <USBD_CUSTOM_HID_RegisterInterface>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b94:	f7f7 f870 	bl	8000c78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b98:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <MX_USB_DEVICE_Init+0x54>)
 8009b9a:	f7fd fb09 	bl	80071b0 <USBD_Start>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ba4:	f7f7 f868 	bl	8000c78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ba8:	bf00      	nop
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	2000011c 	.word	0x2000011c
 8009bb0:	200047c8 	.word	0x200047c8
 8009bb4:	20000024 	.word	0x20000024
 8009bb8:	2000010c 	.word	0x2000010c

08009bbc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009bd0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	460a      	mov	r2, r1
 8009be6:	71fb      	strb	r3, [r7, #7]
 8009be8:	4613      	mov	r3, r2
 8009bea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8009bec:	4806      	ldr	r0, [pc, #24]	; (8009c08 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8009bee:	f7fd f9fd 	bl	8006fec <USBD_CUSTOM_HID_ReceivePacket>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8009bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfc:	e000      	b.n	8009c00 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8009bfe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	200047c8 	.word	0x200047c8

08009c0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2212      	movs	r2, #18
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20000138 	.word	0x20000138

08009c30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	2000014c 	.word	0x2000014c

08009c54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4907      	ldr	r1, [pc, #28]	; (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c6a:	4808      	ldr	r0, [pc, #32]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c6c:	f7fe fc4c 	bl	8008508 <USBD_GetString>
 8009c70:	e004      	b.n	8009c7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4904      	ldr	r1, [pc, #16]	; (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c76:	4805      	ldr	r0, [pc, #20]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c78:	f7fe fc46 	bl	8008508 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c7c:	4b02      	ldr	r3, [pc, #8]	; (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20004aa4 	.word	0x20004aa4
 8009c8c:	0800ae58 	.word	0x0800ae58

08009c90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	4904      	ldr	r1, [pc, #16]	; (8009cb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ca0:	4804      	ldr	r0, [pc, #16]	; (8009cb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ca2:	f7fe fc31 	bl	8008508 <USBD_GetString>
  return USBD_StrDesc;
 8009ca6:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20004aa4 	.word	0x20004aa4
 8009cb4:	0800ae68 	.word	0x0800ae68

08009cb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	221a      	movs	r2, #26
 8009cc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cca:	f000 f843 	bl	8009d54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cce:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20000150 	.word	0x20000150

08009cdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4907      	ldr	r1, [pc, #28]	; (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cf2:	4808      	ldr	r0, [pc, #32]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cf4:	f7fe fc08 	bl	8008508 <USBD_GetString>
 8009cf8:	e004      	b.n	8009d04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	4904      	ldr	r1, [pc, #16]	; (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d00:	f7fe fc02 	bl	8008508 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d04:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20004aa4 	.word	0x20004aa4
 8009d14:	0800ae7c 	.word	0x0800ae7c

08009d18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	4907      	ldr	r1, [pc, #28]	; (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d2e:	4808      	ldr	r0, [pc, #32]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d30:	f7fe fbea 	bl	8008508 <USBD_GetString>
 8009d34:	e004      	b.n	8009d40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	4904      	ldr	r1, [pc, #16]	; (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d3a:	4805      	ldr	r0, [pc, #20]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d3c:	f7fe fbe4 	bl	8008508 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d40:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20004aa4 	.word	0x20004aa4
 8009d50:	0800ae90 	.word	0x0800ae90

08009d54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <Get_SerialNum+0x44>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <Get_SerialNum+0x48>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d66:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <Get_SerialNum+0x4c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	4909      	ldr	r1, [pc, #36]	; (8009da4 <Get_SerialNum+0x50>)
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f814 	bl	8009dac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d84:	2204      	movs	r2, #4
 8009d86:	4908      	ldr	r1, [pc, #32]	; (8009da8 <Get_SerialNum+0x54>)
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f000 f80f 	bl	8009dac <IntToUnicode>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	1fff7a10 	.word	0x1fff7a10
 8009d9c:	1fff7a14 	.word	0x1fff7a14
 8009da0:	1fff7a18 	.word	0x1fff7a18
 8009da4:	20000152 	.word	0x20000152
 8009da8:	20000162 	.word	0x20000162

08009dac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]
 8009dc2:	e027      	b.n	8009e14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0f1b      	lsrs	r3, r3, #28
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d80b      	bhi.n	8009de4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	0f1b      	lsrs	r3, r3, #28
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	440b      	add	r3, r1
 8009ddc:	3230      	adds	r2, #48	; 0x30
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e00a      	b.n	8009dfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0f1b      	lsrs	r3, r3, #28
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	440b      	add	r3, r1
 8009df4:	3237      	adds	r2, #55	; 0x37
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	3301      	adds	r3, #1
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	4413      	add	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	3301      	adds	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
 8009e14:	7dfa      	ldrb	r2, [r7, #23]
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d3d3      	bcc.n	8009dc4 <IntToUnicode+0x18>
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	; 0x28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e34:	f107 0314 	add.w	r3, r7, #20
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	609a      	str	r2, [r3, #8]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e4c:	d13a      	bne.n	8009ec4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e56:	4a1d      	ldr	r2, [pc, #116]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e70:	2302      	movs	r3, #2
 8009e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e7c:	230a      	movs	r3, #10
 8009e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e80:	f107 0314 	add.w	r3, r7, #20
 8009e84:	4619      	mov	r1, r3
 8009e86:	4812      	ldr	r0, [pc, #72]	; (8009ed0 <HAL_PCD_MspInit+0xa4>)
 8009e88:	f7f8 f8ac 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e90:	4a0e      	ldr	r2, [pc, #56]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e96:	6353      	str	r3, [r2, #52]	; 0x34
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea0:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8009ea8:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2105      	movs	r1, #5
 8009eb8:	2043      	movs	r0, #67	; 0x43
 8009eba:	f7f8 f869 	bl	8001f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ebe:	2043      	movs	r0, #67	; 0x43
 8009ec0:	f7f8 f882 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3728      	adds	r7, #40	; 0x28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	40020000 	.word	0x40020000

08009ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4610      	mov	r0, r2
 8009eec:	f7fd f9ad 	bl	800724a <USBD_LL_SetupStage>
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f7fd f9e7 	bl	80072f4 <USBD_LL_DataOutStage>
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f40:	78fa      	ldrb	r2, [r7, #3]
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4613      	mov	r3, r2
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	334c      	adds	r3, #76	; 0x4c
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7fd fa80 	bl	800745a <USBD_LL_DataInStage>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fd fbb4 	bl	80076de <USBD_LL_SOF>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f86:	2301      	movs	r3, #1
 8009f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d001      	beq.n	8009f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f92:	f7f6 fe71 	bl	8000c78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f9c:	7bfa      	ldrb	r2, [r7, #15]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fd fb5e 	bl	8007662 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fd fb06 	bl	80075be <USBD_LL_Reset>
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fd fb59 	bl	8007682 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ff0:	4b04      	ldr	r3, [pc, #16]	; (800a004 <HAL_PCD_SuspendCallback+0x48>)
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	4a03      	ldr	r2, [pc, #12]	; (800a004 <HAL_PCD_SuspendCallback+0x48>)
 8009ff6:	f043 0306 	orr.w	r3, r3, #6
 8009ffa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000ed00 	.word	0xe000ed00

0800a008 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a016:	4618      	mov	r0, r3
 800a018:	f7fd fb49 	bl	80076ae <USBD_LL_Resume>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fd fba1 	bl	8007782 <USBD_LL_IsoOUTIncomplete>
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fd fb5d 	bl	800771e <USBD_LL_IsoINIncomplete>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fd fbb3 	bl	80077e6 <USBD_LL_DevConnected>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a096:	4618      	mov	r0, r3
 800a098:	f7fd fbb0 	bl	80077fc <USBD_LL_DevDisconnected>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d13c      	bne.n	800a12e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0b4:	4a20      	ldr	r2, [pc, #128]	; (800a138 <USBD_LL_Init+0x94>)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <USBD_LL_Init+0x94>)
 800a0c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <USBD_LL_Init+0x94>)
 800a0c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <USBD_LL_Init+0x94>)
 800a0ce:	2204      	movs	r2, #4
 800a0d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0d2:	4b19      	ldr	r3, [pc, #100]	; (800a138 <USBD_LL_Init+0x94>)
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0d8:	4b17      	ldr	r3, [pc, #92]	; (800a138 <USBD_LL_Init+0x94>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0de:	4b16      	ldr	r3, [pc, #88]	; (800a138 <USBD_LL_Init+0x94>)
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a0e4:	4b14      	ldr	r3, [pc, #80]	; (800a138 <USBD_LL_Init+0x94>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a0ea:	4b13      	ldr	r3, [pc, #76]	; (800a138 <USBD_LL_Init+0x94>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a0f0:	4b11      	ldr	r3, [pc, #68]	; (800a138 <USBD_LL_Init+0x94>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a0f6:	4b10      	ldr	r3, [pc, #64]	; (800a138 <USBD_LL_Init+0x94>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	; (800a138 <USBD_LL_Init+0x94>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a102:	480d      	ldr	r0, [pc, #52]	; (800a138 <USBD_LL_Init+0x94>)
 800a104:	f7f8 fd4d 	bl	8002ba2 <HAL_PCD_Init>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a10e:	f7f6 fdb3 	bl	8000c78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a112:	2180      	movs	r1, #128	; 0x80
 800a114:	4808      	ldr	r0, [pc, #32]	; (800a138 <USBD_LL_Init+0x94>)
 800a116:	f7f9 ff8c 	bl	8004032 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a11a:	2240      	movs	r2, #64	; 0x40
 800a11c:	2100      	movs	r1, #0
 800a11e:	4806      	ldr	r0, [pc, #24]	; (800a138 <USBD_LL_Init+0x94>)
 800a120:	f7f9 ff40 	bl	8003fa4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a124:	2280      	movs	r2, #128	; 0x80
 800a126:	2101      	movs	r1, #1
 800a128:	4803      	ldr	r0, [pc, #12]	; (800a138 <USBD_LL_Init+0x94>)
 800a12a:	f7f9 ff3b 	bl	8003fa4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20004ca4 	.word	0x20004ca4

0800a13c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a152:	4618      	mov	r0, r3
 800a154:	f7f8 fe42 	bl	8002ddc <HAL_PCD_Start>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f930 	bl	800a3c4 <USBD_Get_USB_Status>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a168:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	461a      	mov	r2, r3
 800a180:	4603      	mov	r3, r0
 800a182:	70fb      	strb	r3, [r7, #3]
 800a184:	460b      	mov	r3, r1
 800a186:	70bb      	strb	r3, [r7, #2]
 800a188:	4613      	mov	r3, r2
 800a18a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a19a:	78bb      	ldrb	r3, [r7, #2]
 800a19c:	883a      	ldrh	r2, [r7, #0]
 800a19e:	78f9      	ldrb	r1, [r7, #3]
 800a1a0:	f7f9 fb13 	bl	80037ca <HAL_PCD_EP_Open>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f90a 	bl	800a3c4 <USBD_Get_USB_Status>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f9 fb5c 	bl	800389a <HAL_PCD_EP_Close>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 f8eb 	bl	800a3c4 <USBD_Get_USB_Status>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f9 fc1c 	bl	8003a58 <HAL_PCD_EP_SetStall>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f8cc 	bl	800a3c4 <USBD_Get_USB_Status>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a230:	7bbb      	ldrb	r3, [r7, #14]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7f9 fc61 	bl	8003b20 <HAL_PCD_EP_ClrStall>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f8ad 	bl	800a3c4 <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a28a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a28c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a290:	2b00      	cmp	r3, #0
 800a292:	da0b      	bge.n	800a2ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	333e      	adds	r3, #62	; 0x3e
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	e00b      	b.n	800a2c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2b2:	68f9      	ldr	r1, [r7, #12]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f9 fa46 	bl	8003780 <HAL_PCD_SetAddress>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f862 	bl	800a3c4 <USBD_Get_USB_Status>
 800a300:	4603      	mov	r3, r0
 800a302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a304:	7bbb      	ldrb	r3, [r7, #14]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
 800a31a:	460b      	mov	r3, r1
 800a31c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a32c:	7af9      	ldrb	r1, [r7, #11]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	f7f9 fb47 	bl	80039c4 <HAL_PCD_EP_Transmit>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f841 	bl	800a3c4 <USBD_Get_USB_Status>
 800a342:	4603      	mov	r3, r0
 800a344:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a346:	7dbb      	ldrb	r3, [r7, #22]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	460b      	mov	r3, r1
 800a35e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a36e:	7af9      	ldrb	r1, [r7, #11]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	f7f9 fadb 	bl	800392e <HAL_PCD_EP_Receive>
 800a378:	4603      	mov	r3, r0
 800a37a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f820 	bl	800a3c4 <USBD_Get_USB_Status>
 800a384:	4603      	mov	r3, r0
 800a386:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a388:	7dbb      	ldrb	r3, [r7, #22]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a39c:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <USBD_static_malloc+0x18>)
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	200051b0 	.word	0x200051b0

0800a3b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]

}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3d2:	79fb      	ldrb	r3, [r7, #7]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d817      	bhi.n	800a408 <USBD_Get_USB_Status+0x44>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <USBD_Get_USB_Status+0x1c>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a3f7 	.word	0x0800a3f7
 800a3e8:	0800a3fd 	.word	0x0800a3fd
 800a3ec:	0800a403 	.word	0x0800a403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f4:	e00b      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3fa:	e008      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a400:	e005      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a402:	2303      	movs	r3, #3
 800a404:	73fb      	strb	r3, [r7, #15]
    break;
 800a406:	e002      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a408:	2303      	movs	r3, #3
 800a40a:	73fb      	strb	r3, [r7, #15]
    break;
 800a40c:	bf00      	nop
  }
  return usb_status;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <__errno>:
 800a41c:	4b01      	ldr	r3, [pc, #4]	; (800a424 <__errno+0x8>)
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	2000016c 	.word	0x2000016c

0800a428 <__libc_init_array>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	4d0d      	ldr	r5, [pc, #52]	; (800a460 <__libc_init_array+0x38>)
 800a42c:	4c0d      	ldr	r4, [pc, #52]	; (800a464 <__libc_init_array+0x3c>)
 800a42e:	1b64      	subs	r4, r4, r5
 800a430:	10a4      	asrs	r4, r4, #2
 800a432:	2600      	movs	r6, #0
 800a434:	42a6      	cmp	r6, r4
 800a436:	d109      	bne.n	800a44c <__libc_init_array+0x24>
 800a438:	4d0b      	ldr	r5, [pc, #44]	; (800a468 <__libc_init_array+0x40>)
 800a43a:	4c0c      	ldr	r4, [pc, #48]	; (800a46c <__libc_init_array+0x44>)
 800a43c:	f000 fc8e 	bl	800ad5c <_init>
 800a440:	1b64      	subs	r4, r4, r5
 800a442:	10a4      	asrs	r4, r4, #2
 800a444:	2600      	movs	r6, #0
 800a446:	42a6      	cmp	r6, r4
 800a448:	d105      	bne.n	800a456 <__libc_init_array+0x2e>
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a450:	4798      	blx	r3
 800a452:	3601      	adds	r6, #1
 800a454:	e7ee      	b.n	800a434 <__libc_init_array+0xc>
 800a456:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45a:	4798      	blx	r3
 800a45c:	3601      	adds	r6, #1
 800a45e:	e7f2      	b.n	800a446 <__libc_init_array+0x1e>
 800a460:	0800b4ec 	.word	0x0800b4ec
 800a464:	0800b4ec 	.word	0x0800b4ec
 800a468:	0800b4ec 	.word	0x0800b4ec
 800a46c:	0800b4f0 	.word	0x0800b4f0

0800a470 <memcpy>:
 800a470:	440a      	add	r2, r1
 800a472:	4291      	cmp	r1, r2
 800a474:	f100 33ff 	add.w	r3, r0, #4294967295
 800a478:	d100      	bne.n	800a47c <memcpy+0xc>
 800a47a:	4770      	bx	lr
 800a47c:	b510      	push	{r4, lr}
 800a47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a482:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a486:	4291      	cmp	r1, r2
 800a488:	d1f9      	bne.n	800a47e <memcpy+0xe>
 800a48a:	bd10      	pop	{r4, pc}

0800a48c <memmove>:
 800a48c:	4288      	cmp	r0, r1
 800a48e:	b510      	push	{r4, lr}
 800a490:	eb01 0402 	add.w	r4, r1, r2
 800a494:	d902      	bls.n	800a49c <memmove+0x10>
 800a496:	4284      	cmp	r4, r0
 800a498:	4623      	mov	r3, r4
 800a49a:	d807      	bhi.n	800a4ac <memmove+0x20>
 800a49c:	1e43      	subs	r3, r0, #1
 800a49e:	42a1      	cmp	r1, r4
 800a4a0:	d008      	beq.n	800a4b4 <memmove+0x28>
 800a4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4aa:	e7f8      	b.n	800a49e <memmove+0x12>
 800a4ac:	4402      	add	r2, r0
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	428a      	cmp	r2, r1
 800a4b2:	d100      	bne.n	800a4b6 <memmove+0x2a>
 800a4b4:	bd10      	pop	{r4, pc}
 800a4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4be:	e7f7      	b.n	800a4b0 <memmove+0x24>

0800a4c0 <memset>:
 800a4c0:	4402      	add	r2, r0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d100      	bne.n	800a4ca <memset+0xa>
 800a4c8:	4770      	bx	lr
 800a4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ce:	e7f9      	b.n	800a4c4 <memset+0x4>

0800a4d0 <siprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b500      	push	{lr}
 800a4d4:	b09c      	sub	sp, #112	; 0x70
 800a4d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4d8:	9002      	str	r0, [sp, #8]
 800a4da:	9006      	str	r0, [sp, #24]
 800a4dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4e0:	4809      	ldr	r0, [pc, #36]	; (800a508 <siprintf+0x38>)
 800a4e2:	9107      	str	r1, [sp, #28]
 800a4e4:	9104      	str	r1, [sp, #16]
 800a4e6:	4909      	ldr	r1, [pc, #36]	; (800a50c <siprintf+0x3c>)
 800a4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ec:	9105      	str	r1, [sp, #20]
 800a4ee:	6800      	ldr	r0, [r0, #0]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	a902      	add	r1, sp, #8
 800a4f4:	f000 f868 	bl	800a5c8 <_svfiprintf_r>
 800a4f8:	9b02      	ldr	r3, [sp, #8]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	b01c      	add	sp, #112	; 0x70
 800a500:	f85d eb04 	ldr.w	lr, [sp], #4
 800a504:	b003      	add	sp, #12
 800a506:	4770      	bx	lr
 800a508:	2000016c 	.word	0x2000016c
 800a50c:	ffff0208 	.word	0xffff0208

0800a510 <__ssputs_r>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	688e      	ldr	r6, [r1, #8]
 800a516:	429e      	cmp	r6, r3
 800a518:	4682      	mov	sl, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	4690      	mov	r8, r2
 800a51e:	461f      	mov	r7, r3
 800a520:	d838      	bhi.n	800a594 <__ssputs_r+0x84>
 800a522:	898a      	ldrh	r2, [r1, #12]
 800a524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a528:	d032      	beq.n	800a590 <__ssputs_r+0x80>
 800a52a:	6825      	ldr	r5, [r4, #0]
 800a52c:	6909      	ldr	r1, [r1, #16]
 800a52e:	eba5 0901 	sub.w	r9, r5, r1
 800a532:	6965      	ldr	r5, [r4, #20]
 800a534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a53c:	3301      	adds	r3, #1
 800a53e:	444b      	add	r3, r9
 800a540:	106d      	asrs	r5, r5, #1
 800a542:	429d      	cmp	r5, r3
 800a544:	bf38      	it	cc
 800a546:	461d      	movcc	r5, r3
 800a548:	0553      	lsls	r3, r2, #21
 800a54a:	d531      	bpl.n	800a5b0 <__ssputs_r+0xa0>
 800a54c:	4629      	mov	r1, r5
 800a54e:	f000 fb3b 	bl	800abc8 <_malloc_r>
 800a552:	4606      	mov	r6, r0
 800a554:	b950      	cbnz	r0, 800a56c <__ssputs_r+0x5c>
 800a556:	230c      	movs	r3, #12
 800a558:	f8ca 3000 	str.w	r3, [sl]
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a562:	81a3      	strh	r3, [r4, #12]
 800a564:	f04f 30ff 	mov.w	r0, #4294967295
 800a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	464a      	mov	r2, r9
 800a570:	f7ff ff7e 	bl	800a470 <memcpy>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	6126      	str	r6, [r4, #16]
 800a582:	6165      	str	r5, [r4, #20]
 800a584:	444e      	add	r6, r9
 800a586:	eba5 0509 	sub.w	r5, r5, r9
 800a58a:	6026      	str	r6, [r4, #0]
 800a58c:	60a5      	str	r5, [r4, #8]
 800a58e:	463e      	mov	r6, r7
 800a590:	42be      	cmp	r6, r7
 800a592:	d900      	bls.n	800a596 <__ssputs_r+0x86>
 800a594:	463e      	mov	r6, r7
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	4632      	mov	r2, r6
 800a59a:	4641      	mov	r1, r8
 800a59c:	f7ff ff76 	bl	800a48c <memmove>
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	1b9b      	subs	r3, r3, r6
 800a5a4:	60a3      	str	r3, [r4, #8]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	4433      	add	r3, r6
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e7db      	b.n	800a568 <__ssputs_r+0x58>
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	f000 fb7d 	bl	800acb0 <_realloc_r>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d1e1      	bne.n	800a580 <__ssputs_r+0x70>
 800a5bc:	6921      	ldr	r1, [r4, #16]
 800a5be:	4650      	mov	r0, sl
 800a5c0:	f000 fa96 	bl	800aaf0 <_free_r>
 800a5c4:	e7c7      	b.n	800a556 <__ssputs_r+0x46>
	...

0800a5c8 <_svfiprintf_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	4698      	mov	r8, r3
 800a5ce:	898b      	ldrh	r3, [r1, #12]
 800a5d0:	061b      	lsls	r3, r3, #24
 800a5d2:	b09d      	sub	sp, #116	; 0x74
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	d50e      	bpl.n	800a5fa <_svfiprintf_r+0x32>
 800a5dc:	690b      	ldr	r3, [r1, #16]
 800a5de:	b963      	cbnz	r3, 800a5fa <_svfiprintf_r+0x32>
 800a5e0:	2140      	movs	r1, #64	; 0x40
 800a5e2:	f000 faf1 	bl	800abc8 <_malloc_r>
 800a5e6:	6028      	str	r0, [r5, #0]
 800a5e8:	6128      	str	r0, [r5, #16]
 800a5ea:	b920      	cbnz	r0, 800a5f6 <_svfiprintf_r+0x2e>
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	e0d1      	b.n	800a79a <_svfiprintf_r+0x1d2>
 800a5f6:	2340      	movs	r3, #64	; 0x40
 800a5f8:	616b      	str	r3, [r5, #20]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5fe:	2320      	movs	r3, #32
 800a600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a604:	f8cd 800c 	str.w	r8, [sp, #12]
 800a608:	2330      	movs	r3, #48	; 0x30
 800a60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7b4 <_svfiprintf_r+0x1ec>
 800a60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a612:	f04f 0901 	mov.w	r9, #1
 800a616:	4623      	mov	r3, r4
 800a618:	469a      	mov	sl, r3
 800a61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a61e:	b10a      	cbz	r2, 800a624 <_svfiprintf_r+0x5c>
 800a620:	2a25      	cmp	r2, #37	; 0x25
 800a622:	d1f9      	bne.n	800a618 <_svfiprintf_r+0x50>
 800a624:	ebba 0b04 	subs.w	fp, sl, r4
 800a628:	d00b      	beq.n	800a642 <_svfiprintf_r+0x7a>
 800a62a:	465b      	mov	r3, fp
 800a62c:	4622      	mov	r2, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff ff6d 	bl	800a510 <__ssputs_r>
 800a636:	3001      	adds	r0, #1
 800a638:	f000 80aa 	beq.w	800a790 <_svfiprintf_r+0x1c8>
 800a63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a63e:	445a      	add	r2, fp
 800a640:	9209      	str	r2, [sp, #36]	; 0x24
 800a642:	f89a 3000 	ldrb.w	r3, [sl]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80a2 	beq.w	800a790 <_svfiprintf_r+0x1c8>
 800a64c:	2300      	movs	r3, #0
 800a64e:	f04f 32ff 	mov.w	r2, #4294967295
 800a652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a656:	f10a 0a01 	add.w	sl, sl, #1
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	9307      	str	r3, [sp, #28]
 800a65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a662:	931a      	str	r3, [sp, #104]	; 0x68
 800a664:	4654      	mov	r4, sl
 800a666:	2205      	movs	r2, #5
 800a668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66c:	4851      	ldr	r0, [pc, #324]	; (800a7b4 <_svfiprintf_r+0x1ec>)
 800a66e:	f7f5 fdb7 	bl	80001e0 <memchr>
 800a672:	9a04      	ldr	r2, [sp, #16]
 800a674:	b9d8      	cbnz	r0, 800a6ae <_svfiprintf_r+0xe6>
 800a676:	06d0      	lsls	r0, r2, #27
 800a678:	bf44      	itt	mi
 800a67a:	2320      	movmi	r3, #32
 800a67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a680:	0711      	lsls	r1, r2, #28
 800a682:	bf44      	itt	mi
 800a684:	232b      	movmi	r3, #43	; 0x2b
 800a686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68a:	f89a 3000 	ldrb.w	r3, [sl]
 800a68e:	2b2a      	cmp	r3, #42	; 0x2a
 800a690:	d015      	beq.n	800a6be <_svfiprintf_r+0xf6>
 800a692:	9a07      	ldr	r2, [sp, #28]
 800a694:	4654      	mov	r4, sl
 800a696:	2000      	movs	r0, #0
 800a698:	f04f 0c0a 	mov.w	ip, #10
 800a69c:	4621      	mov	r1, r4
 800a69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a2:	3b30      	subs	r3, #48	; 0x30
 800a6a4:	2b09      	cmp	r3, #9
 800a6a6:	d94e      	bls.n	800a746 <_svfiprintf_r+0x17e>
 800a6a8:	b1b0      	cbz	r0, 800a6d8 <_svfiprintf_r+0x110>
 800a6aa:	9207      	str	r2, [sp, #28]
 800a6ac:	e014      	b.n	800a6d8 <_svfiprintf_r+0x110>
 800a6ae:	eba0 0308 	sub.w	r3, r0, r8
 800a6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	9304      	str	r3, [sp, #16]
 800a6ba:	46a2      	mov	sl, r4
 800a6bc:	e7d2      	b.n	800a664 <_svfiprintf_r+0x9c>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	1d19      	adds	r1, r3, #4
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	9103      	str	r1, [sp, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	bfbb      	ittet	lt
 800a6ca:	425b      	neglt	r3, r3
 800a6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d0:	9307      	strge	r3, [sp, #28]
 800a6d2:	9307      	strlt	r3, [sp, #28]
 800a6d4:	bfb8      	it	lt
 800a6d6:	9204      	strlt	r2, [sp, #16]
 800a6d8:	7823      	ldrb	r3, [r4, #0]
 800a6da:	2b2e      	cmp	r3, #46	; 0x2e
 800a6dc:	d10c      	bne.n	800a6f8 <_svfiprintf_r+0x130>
 800a6de:	7863      	ldrb	r3, [r4, #1]
 800a6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e2:	d135      	bne.n	800a750 <_svfiprintf_r+0x188>
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	9203      	str	r2, [sp, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bfb8      	it	lt
 800a6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f4:	3402      	adds	r4, #2
 800a6f6:	9305      	str	r3, [sp, #20]
 800a6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7c4 <_svfiprintf_r+0x1fc>
 800a6fc:	7821      	ldrb	r1, [r4, #0]
 800a6fe:	2203      	movs	r2, #3
 800a700:	4650      	mov	r0, sl
 800a702:	f7f5 fd6d 	bl	80001e0 <memchr>
 800a706:	b140      	cbz	r0, 800a71a <_svfiprintf_r+0x152>
 800a708:	2340      	movs	r3, #64	; 0x40
 800a70a:	eba0 000a 	sub.w	r0, r0, sl
 800a70e:	fa03 f000 	lsl.w	r0, r3, r0
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	4303      	orrs	r3, r0
 800a716:	3401      	adds	r4, #1
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71e:	4826      	ldr	r0, [pc, #152]	; (800a7b8 <_svfiprintf_r+0x1f0>)
 800a720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a724:	2206      	movs	r2, #6
 800a726:	f7f5 fd5b 	bl	80001e0 <memchr>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d038      	beq.n	800a7a0 <_svfiprintf_r+0x1d8>
 800a72e:	4b23      	ldr	r3, [pc, #140]	; (800a7bc <_svfiprintf_r+0x1f4>)
 800a730:	bb1b      	cbnz	r3, 800a77a <_svfiprintf_r+0x1b2>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	3307      	adds	r3, #7
 800a736:	f023 0307 	bic.w	r3, r3, #7
 800a73a:	3308      	adds	r3, #8
 800a73c:	9303      	str	r3, [sp, #12]
 800a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a740:	4433      	add	r3, r6
 800a742:	9309      	str	r3, [sp, #36]	; 0x24
 800a744:	e767      	b.n	800a616 <_svfiprintf_r+0x4e>
 800a746:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74a:	460c      	mov	r4, r1
 800a74c:	2001      	movs	r0, #1
 800a74e:	e7a5      	b.n	800a69c <_svfiprintf_r+0xd4>
 800a750:	2300      	movs	r3, #0
 800a752:	3401      	adds	r4, #1
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	4619      	mov	r1, r3
 800a758:	f04f 0c0a 	mov.w	ip, #10
 800a75c:	4620      	mov	r0, r4
 800a75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a762:	3a30      	subs	r2, #48	; 0x30
 800a764:	2a09      	cmp	r2, #9
 800a766:	d903      	bls.n	800a770 <_svfiprintf_r+0x1a8>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0c5      	beq.n	800a6f8 <_svfiprintf_r+0x130>
 800a76c:	9105      	str	r1, [sp, #20]
 800a76e:	e7c3      	b.n	800a6f8 <_svfiprintf_r+0x130>
 800a770:	fb0c 2101 	mla	r1, ip, r1, r2
 800a774:	4604      	mov	r4, r0
 800a776:	2301      	movs	r3, #1
 800a778:	e7f0      	b.n	800a75c <_svfiprintf_r+0x194>
 800a77a:	ab03      	add	r3, sp, #12
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	462a      	mov	r2, r5
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <_svfiprintf_r+0x1f8>)
 800a782:	a904      	add	r1, sp, #16
 800a784:	4638      	mov	r0, r7
 800a786:	f3af 8000 	nop.w
 800a78a:	1c42      	adds	r2, r0, #1
 800a78c:	4606      	mov	r6, r0
 800a78e:	d1d6      	bne.n	800a73e <_svfiprintf_r+0x176>
 800a790:	89ab      	ldrh	r3, [r5, #12]
 800a792:	065b      	lsls	r3, r3, #25
 800a794:	f53f af2c 	bmi.w	800a5f0 <_svfiprintf_r+0x28>
 800a798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79a:	b01d      	add	sp, #116	; 0x74
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a0:	ab03      	add	r3, sp, #12
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <_svfiprintf_r+0x1f8>)
 800a7a8:	a904      	add	r1, sp, #16
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f000 f87a 	bl	800a8a4 <_printf_i>
 800a7b0:	e7eb      	b.n	800a78a <_svfiprintf_r+0x1c2>
 800a7b2:	bf00      	nop
 800a7b4:	0800b4b0 	.word	0x0800b4b0
 800a7b8:	0800b4ba 	.word	0x0800b4ba
 800a7bc:	00000000 	.word	0x00000000
 800a7c0:	0800a511 	.word	0x0800a511
 800a7c4:	0800b4b6 	.word	0x0800b4b6

0800a7c8 <_printf_common>:
 800a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	4699      	mov	r9, r3
 800a7d0:	688a      	ldr	r2, [r1, #8]
 800a7d2:	690b      	ldr	r3, [r1, #16]
 800a7d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	bfb8      	it	lt
 800a7dc:	4613      	movlt	r3, r2
 800a7de:	6033      	str	r3, [r6, #0]
 800a7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	b10a      	cbz	r2, 800a7ee <_printf_common+0x26>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	6033      	str	r3, [r6, #0]
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	0699      	lsls	r1, r3, #26
 800a7f2:	bf42      	ittt	mi
 800a7f4:	6833      	ldrmi	r3, [r6, #0]
 800a7f6:	3302      	addmi	r3, #2
 800a7f8:	6033      	strmi	r3, [r6, #0]
 800a7fa:	6825      	ldr	r5, [r4, #0]
 800a7fc:	f015 0506 	ands.w	r5, r5, #6
 800a800:	d106      	bne.n	800a810 <_printf_common+0x48>
 800a802:	f104 0a19 	add.w	sl, r4, #25
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	6832      	ldr	r2, [r6, #0]
 800a80a:	1a9b      	subs	r3, r3, r2
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	dc26      	bgt.n	800a85e <_printf_common+0x96>
 800a810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a814:	1e13      	subs	r3, r2, #0
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	bf18      	it	ne
 800a81a:	2301      	movne	r3, #1
 800a81c:	0692      	lsls	r2, r2, #26
 800a81e:	d42b      	bmi.n	800a878 <_printf_common+0xb0>
 800a820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a824:	4649      	mov	r1, r9
 800a826:	4638      	mov	r0, r7
 800a828:	47c0      	blx	r8
 800a82a:	3001      	adds	r0, #1
 800a82c:	d01e      	beq.n	800a86c <_printf_common+0xa4>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	68e5      	ldr	r5, [r4, #12]
 800a832:	6832      	ldr	r2, [r6, #0]
 800a834:	f003 0306 	and.w	r3, r3, #6
 800a838:	2b04      	cmp	r3, #4
 800a83a:	bf08      	it	eq
 800a83c:	1aad      	subeq	r5, r5, r2
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	6922      	ldr	r2, [r4, #16]
 800a842:	bf0c      	ite	eq
 800a844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a848:	2500      	movne	r5, #0
 800a84a:	4293      	cmp	r3, r2
 800a84c:	bfc4      	itt	gt
 800a84e:	1a9b      	subgt	r3, r3, r2
 800a850:	18ed      	addgt	r5, r5, r3
 800a852:	2600      	movs	r6, #0
 800a854:	341a      	adds	r4, #26
 800a856:	42b5      	cmp	r5, r6
 800a858:	d11a      	bne.n	800a890 <_printf_common+0xc8>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e008      	b.n	800a870 <_printf_common+0xa8>
 800a85e:	2301      	movs	r3, #1
 800a860:	4652      	mov	r2, sl
 800a862:	4649      	mov	r1, r9
 800a864:	4638      	mov	r0, r7
 800a866:	47c0      	blx	r8
 800a868:	3001      	adds	r0, #1
 800a86a:	d103      	bne.n	800a874 <_printf_common+0xac>
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a874:	3501      	adds	r5, #1
 800a876:	e7c6      	b.n	800a806 <_printf_common+0x3e>
 800a878:	18e1      	adds	r1, r4, r3
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	2030      	movs	r0, #48	; 0x30
 800a87e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a882:	4422      	add	r2, r4
 800a884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a88c:	3302      	adds	r3, #2
 800a88e:	e7c7      	b.n	800a820 <_printf_common+0x58>
 800a890:	2301      	movs	r3, #1
 800a892:	4622      	mov	r2, r4
 800a894:	4649      	mov	r1, r9
 800a896:	4638      	mov	r0, r7
 800a898:	47c0      	blx	r8
 800a89a:	3001      	adds	r0, #1
 800a89c:	d0e6      	beq.n	800a86c <_printf_common+0xa4>
 800a89e:	3601      	adds	r6, #1
 800a8a0:	e7d9      	b.n	800a856 <_printf_common+0x8e>
	...

0800a8a4 <_printf_i>:
 800a8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	7e0f      	ldrb	r7, [r1, #24]
 800a8aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8ac:	2f78      	cmp	r7, #120	; 0x78
 800a8ae:	4691      	mov	r9, r2
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	469a      	mov	sl, r3
 800a8b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ba:	d807      	bhi.n	800a8cc <_printf_i+0x28>
 800a8bc:	2f62      	cmp	r7, #98	; 0x62
 800a8be:	d80a      	bhi.n	800a8d6 <_printf_i+0x32>
 800a8c0:	2f00      	cmp	r7, #0
 800a8c2:	f000 80d8 	beq.w	800aa76 <_printf_i+0x1d2>
 800a8c6:	2f58      	cmp	r7, #88	; 0x58
 800a8c8:	f000 80a3 	beq.w	800aa12 <_printf_i+0x16e>
 800a8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8d4:	e03a      	b.n	800a94c <_printf_i+0xa8>
 800a8d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8da:	2b15      	cmp	r3, #21
 800a8dc:	d8f6      	bhi.n	800a8cc <_printf_i+0x28>
 800a8de:	a101      	add	r1, pc, #4	; (adr r1, 800a8e4 <_printf_i+0x40>)
 800a8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8e4:	0800a93d 	.word	0x0800a93d
 800a8e8:	0800a951 	.word	0x0800a951
 800a8ec:	0800a8cd 	.word	0x0800a8cd
 800a8f0:	0800a8cd 	.word	0x0800a8cd
 800a8f4:	0800a8cd 	.word	0x0800a8cd
 800a8f8:	0800a8cd 	.word	0x0800a8cd
 800a8fc:	0800a951 	.word	0x0800a951
 800a900:	0800a8cd 	.word	0x0800a8cd
 800a904:	0800a8cd 	.word	0x0800a8cd
 800a908:	0800a8cd 	.word	0x0800a8cd
 800a90c:	0800a8cd 	.word	0x0800a8cd
 800a910:	0800aa5d 	.word	0x0800aa5d
 800a914:	0800a981 	.word	0x0800a981
 800a918:	0800aa3f 	.word	0x0800aa3f
 800a91c:	0800a8cd 	.word	0x0800a8cd
 800a920:	0800a8cd 	.word	0x0800a8cd
 800a924:	0800aa7f 	.word	0x0800aa7f
 800a928:	0800a8cd 	.word	0x0800a8cd
 800a92c:	0800a981 	.word	0x0800a981
 800a930:	0800a8cd 	.word	0x0800a8cd
 800a934:	0800a8cd 	.word	0x0800a8cd
 800a938:	0800aa47 	.word	0x0800aa47
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	602a      	str	r2, [r5, #0]
 800a944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a94c:	2301      	movs	r3, #1
 800a94e:	e0a3      	b.n	800aa98 <_printf_i+0x1f4>
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	6829      	ldr	r1, [r5, #0]
 800a954:	0606      	lsls	r6, r0, #24
 800a956:	f101 0304 	add.w	r3, r1, #4
 800a95a:	d50a      	bpl.n	800a972 <_printf_i+0xce>
 800a95c:	680e      	ldr	r6, [r1, #0]
 800a95e:	602b      	str	r3, [r5, #0]
 800a960:	2e00      	cmp	r6, #0
 800a962:	da03      	bge.n	800a96c <_printf_i+0xc8>
 800a964:	232d      	movs	r3, #45	; 0x2d
 800a966:	4276      	negs	r6, r6
 800a968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a96c:	485e      	ldr	r0, [pc, #376]	; (800aae8 <_printf_i+0x244>)
 800a96e:	230a      	movs	r3, #10
 800a970:	e019      	b.n	800a9a6 <_printf_i+0x102>
 800a972:	680e      	ldr	r6, [r1, #0]
 800a974:	602b      	str	r3, [r5, #0]
 800a976:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a97a:	bf18      	it	ne
 800a97c:	b236      	sxthne	r6, r6
 800a97e:	e7ef      	b.n	800a960 <_printf_i+0xbc>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	6820      	ldr	r0, [r4, #0]
 800a984:	1d19      	adds	r1, r3, #4
 800a986:	6029      	str	r1, [r5, #0]
 800a988:	0601      	lsls	r1, r0, #24
 800a98a:	d501      	bpl.n	800a990 <_printf_i+0xec>
 800a98c:	681e      	ldr	r6, [r3, #0]
 800a98e:	e002      	b.n	800a996 <_printf_i+0xf2>
 800a990:	0646      	lsls	r6, r0, #25
 800a992:	d5fb      	bpl.n	800a98c <_printf_i+0xe8>
 800a994:	881e      	ldrh	r6, [r3, #0]
 800a996:	4854      	ldr	r0, [pc, #336]	; (800aae8 <_printf_i+0x244>)
 800a998:	2f6f      	cmp	r7, #111	; 0x6f
 800a99a:	bf0c      	ite	eq
 800a99c:	2308      	moveq	r3, #8
 800a99e:	230a      	movne	r3, #10
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9a6:	6865      	ldr	r5, [r4, #4]
 800a9a8:	60a5      	str	r5, [r4, #8]
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	bfa2      	ittt	ge
 800a9ae:	6821      	ldrge	r1, [r4, #0]
 800a9b0:	f021 0104 	bicge.w	r1, r1, #4
 800a9b4:	6021      	strge	r1, [r4, #0]
 800a9b6:	b90e      	cbnz	r6, 800a9bc <_printf_i+0x118>
 800a9b8:	2d00      	cmp	r5, #0
 800a9ba:	d04d      	beq.n	800aa58 <_printf_i+0x1b4>
 800a9bc:	4615      	mov	r5, r2
 800a9be:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9c2:	fb03 6711 	mls	r7, r3, r1, r6
 800a9c6:	5dc7      	ldrb	r7, [r0, r7]
 800a9c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9cc:	4637      	mov	r7, r6
 800a9ce:	42bb      	cmp	r3, r7
 800a9d0:	460e      	mov	r6, r1
 800a9d2:	d9f4      	bls.n	800a9be <_printf_i+0x11a>
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	d10b      	bne.n	800a9f0 <_printf_i+0x14c>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	07de      	lsls	r6, r3, #31
 800a9dc:	d508      	bpl.n	800a9f0 <_printf_i+0x14c>
 800a9de:	6923      	ldr	r3, [r4, #16]
 800a9e0:	6861      	ldr	r1, [r4, #4]
 800a9e2:	4299      	cmp	r1, r3
 800a9e4:	bfde      	ittt	le
 800a9e6:	2330      	movle	r3, #48	; 0x30
 800a9e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9f0:	1b52      	subs	r2, r2, r5
 800a9f2:	6122      	str	r2, [r4, #16]
 800a9f4:	f8cd a000 	str.w	sl, [sp]
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	aa03      	add	r2, sp, #12
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f7ff fee2 	bl	800a7c8 <_printf_common>
 800aa04:	3001      	adds	r0, #1
 800aa06:	d14c      	bne.n	800aaa2 <_printf_i+0x1fe>
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	b004      	add	sp, #16
 800aa0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa12:	4835      	ldr	r0, [pc, #212]	; (800aae8 <_printf_i+0x244>)
 800aa14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa18:	6829      	ldr	r1, [r5, #0]
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa20:	6029      	str	r1, [r5, #0]
 800aa22:	061d      	lsls	r5, r3, #24
 800aa24:	d514      	bpl.n	800aa50 <_printf_i+0x1ac>
 800aa26:	07df      	lsls	r7, r3, #31
 800aa28:	bf44      	itt	mi
 800aa2a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa2e:	6023      	strmi	r3, [r4, #0]
 800aa30:	b91e      	cbnz	r6, 800aa3a <_printf_i+0x196>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	f023 0320 	bic.w	r3, r3, #32
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	2310      	movs	r3, #16
 800aa3c:	e7b0      	b.n	800a9a0 <_printf_i+0xfc>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	f043 0320 	orr.w	r3, r3, #32
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	2378      	movs	r3, #120	; 0x78
 800aa48:	4828      	ldr	r0, [pc, #160]	; (800aaec <_printf_i+0x248>)
 800aa4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa4e:	e7e3      	b.n	800aa18 <_printf_i+0x174>
 800aa50:	0659      	lsls	r1, r3, #25
 800aa52:	bf48      	it	mi
 800aa54:	b2b6      	uxthmi	r6, r6
 800aa56:	e7e6      	b.n	800aa26 <_printf_i+0x182>
 800aa58:	4615      	mov	r5, r2
 800aa5a:	e7bb      	b.n	800a9d4 <_printf_i+0x130>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	6826      	ldr	r6, [r4, #0]
 800aa60:	6961      	ldr	r1, [r4, #20]
 800aa62:	1d18      	adds	r0, r3, #4
 800aa64:	6028      	str	r0, [r5, #0]
 800aa66:	0635      	lsls	r5, r6, #24
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	d501      	bpl.n	800aa70 <_printf_i+0x1cc>
 800aa6c:	6019      	str	r1, [r3, #0]
 800aa6e:	e002      	b.n	800aa76 <_printf_i+0x1d2>
 800aa70:	0670      	lsls	r0, r6, #25
 800aa72:	d5fb      	bpl.n	800aa6c <_printf_i+0x1c8>
 800aa74:	8019      	strh	r1, [r3, #0]
 800aa76:	2300      	movs	r3, #0
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	4615      	mov	r5, r2
 800aa7c:	e7ba      	b.n	800a9f4 <_printf_i+0x150>
 800aa7e:	682b      	ldr	r3, [r5, #0]
 800aa80:	1d1a      	adds	r2, r3, #4
 800aa82:	602a      	str	r2, [r5, #0]
 800aa84:	681d      	ldr	r5, [r3, #0]
 800aa86:	6862      	ldr	r2, [r4, #4]
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f7f5 fba8 	bl	80001e0 <memchr>
 800aa90:	b108      	cbz	r0, 800aa96 <_printf_i+0x1f2>
 800aa92:	1b40      	subs	r0, r0, r5
 800aa94:	6060      	str	r0, [r4, #4]
 800aa96:	6863      	ldr	r3, [r4, #4]
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa0:	e7a8      	b.n	800a9f4 <_printf_i+0x150>
 800aaa2:	6923      	ldr	r3, [r4, #16]
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d0ab      	beq.n	800aa08 <_printf_i+0x164>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	079b      	lsls	r3, r3, #30
 800aab4:	d413      	bmi.n	800aade <_printf_i+0x23a>
 800aab6:	68e0      	ldr	r0, [r4, #12]
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	4298      	cmp	r0, r3
 800aabc:	bfb8      	it	lt
 800aabe:	4618      	movlt	r0, r3
 800aac0:	e7a4      	b.n	800aa0c <_printf_i+0x168>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4632      	mov	r2, r6
 800aac6:	4649      	mov	r1, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	47d0      	blx	sl
 800aacc:	3001      	adds	r0, #1
 800aace:	d09b      	beq.n	800aa08 <_printf_i+0x164>
 800aad0:	3501      	adds	r5, #1
 800aad2:	68e3      	ldr	r3, [r4, #12]
 800aad4:	9903      	ldr	r1, [sp, #12]
 800aad6:	1a5b      	subs	r3, r3, r1
 800aad8:	42ab      	cmp	r3, r5
 800aada:	dcf2      	bgt.n	800aac2 <_printf_i+0x21e>
 800aadc:	e7eb      	b.n	800aab6 <_printf_i+0x212>
 800aade:	2500      	movs	r5, #0
 800aae0:	f104 0619 	add.w	r6, r4, #25
 800aae4:	e7f5      	b.n	800aad2 <_printf_i+0x22e>
 800aae6:	bf00      	nop
 800aae8:	0800b4c1 	.word	0x0800b4c1
 800aaec:	0800b4d2 	.word	0x0800b4d2

0800aaf0 <_free_r>:
 800aaf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaf2:	2900      	cmp	r1, #0
 800aaf4:	d044      	beq.n	800ab80 <_free_r+0x90>
 800aaf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aafa:	9001      	str	r0, [sp, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f1a1 0404 	sub.w	r4, r1, #4
 800ab02:	bfb8      	it	lt
 800ab04:	18e4      	addlt	r4, r4, r3
 800ab06:	f000 f913 	bl	800ad30 <__malloc_lock>
 800ab0a:	4a1e      	ldr	r2, [pc, #120]	; (800ab84 <_free_r+0x94>)
 800ab0c:	9801      	ldr	r0, [sp, #4]
 800ab0e:	6813      	ldr	r3, [r2, #0]
 800ab10:	b933      	cbnz	r3, 800ab20 <_free_r+0x30>
 800ab12:	6063      	str	r3, [r4, #4]
 800ab14:	6014      	str	r4, [r2, #0]
 800ab16:	b003      	add	sp, #12
 800ab18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab1c:	f000 b90e 	b.w	800ad3c <__malloc_unlock>
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	d908      	bls.n	800ab36 <_free_r+0x46>
 800ab24:	6825      	ldr	r5, [r4, #0]
 800ab26:	1961      	adds	r1, r4, r5
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	bf01      	itttt	eq
 800ab2c:	6819      	ldreq	r1, [r3, #0]
 800ab2e:	685b      	ldreq	r3, [r3, #4]
 800ab30:	1949      	addeq	r1, r1, r5
 800ab32:	6021      	streq	r1, [r4, #0]
 800ab34:	e7ed      	b.n	800ab12 <_free_r+0x22>
 800ab36:	461a      	mov	r2, r3
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	b10b      	cbz	r3, 800ab40 <_free_r+0x50>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d9fa      	bls.n	800ab36 <_free_r+0x46>
 800ab40:	6811      	ldr	r1, [r2, #0]
 800ab42:	1855      	adds	r5, r2, r1
 800ab44:	42a5      	cmp	r5, r4
 800ab46:	d10b      	bne.n	800ab60 <_free_r+0x70>
 800ab48:	6824      	ldr	r4, [r4, #0]
 800ab4a:	4421      	add	r1, r4
 800ab4c:	1854      	adds	r4, r2, r1
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	6011      	str	r1, [r2, #0]
 800ab52:	d1e0      	bne.n	800ab16 <_free_r+0x26>
 800ab54:	681c      	ldr	r4, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	6053      	str	r3, [r2, #4]
 800ab5a:	4421      	add	r1, r4
 800ab5c:	6011      	str	r1, [r2, #0]
 800ab5e:	e7da      	b.n	800ab16 <_free_r+0x26>
 800ab60:	d902      	bls.n	800ab68 <_free_r+0x78>
 800ab62:	230c      	movs	r3, #12
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	e7d6      	b.n	800ab16 <_free_r+0x26>
 800ab68:	6825      	ldr	r5, [r4, #0]
 800ab6a:	1961      	adds	r1, r4, r5
 800ab6c:	428b      	cmp	r3, r1
 800ab6e:	bf04      	itt	eq
 800ab70:	6819      	ldreq	r1, [r3, #0]
 800ab72:	685b      	ldreq	r3, [r3, #4]
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	bf04      	itt	eq
 800ab78:	1949      	addeq	r1, r1, r5
 800ab7a:	6021      	streq	r1, [r4, #0]
 800ab7c:	6054      	str	r4, [r2, #4]
 800ab7e:	e7ca      	b.n	800ab16 <_free_r+0x26>
 800ab80:	b003      	add	sp, #12
 800ab82:	bd30      	pop	{r4, r5, pc}
 800ab84:	20005208 	.word	0x20005208

0800ab88 <sbrk_aligned>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	4e0e      	ldr	r6, [pc, #56]	; (800abc4 <sbrk_aligned+0x3c>)
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	6831      	ldr	r1, [r6, #0]
 800ab90:	4605      	mov	r5, r0
 800ab92:	b911      	cbnz	r1, 800ab9a <sbrk_aligned+0x12>
 800ab94:	f000 f8bc 	bl	800ad10 <_sbrk_r>
 800ab98:	6030      	str	r0, [r6, #0]
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f000 f8b7 	bl	800ad10 <_sbrk_r>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d00a      	beq.n	800abbc <sbrk_aligned+0x34>
 800aba6:	1cc4      	adds	r4, r0, #3
 800aba8:	f024 0403 	bic.w	r4, r4, #3
 800abac:	42a0      	cmp	r0, r4
 800abae:	d007      	beq.n	800abc0 <sbrk_aligned+0x38>
 800abb0:	1a21      	subs	r1, r4, r0
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 f8ac 	bl	800ad10 <_sbrk_r>
 800abb8:	3001      	adds	r0, #1
 800abba:	d101      	bne.n	800abc0 <sbrk_aligned+0x38>
 800abbc:	f04f 34ff 	mov.w	r4, #4294967295
 800abc0:	4620      	mov	r0, r4
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	2000520c 	.word	0x2000520c

0800abc8 <_malloc_r>:
 800abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abcc:	1ccd      	adds	r5, r1, #3
 800abce:	f025 0503 	bic.w	r5, r5, #3
 800abd2:	3508      	adds	r5, #8
 800abd4:	2d0c      	cmp	r5, #12
 800abd6:	bf38      	it	cc
 800abd8:	250c      	movcc	r5, #12
 800abda:	2d00      	cmp	r5, #0
 800abdc:	4607      	mov	r7, r0
 800abde:	db01      	blt.n	800abe4 <_malloc_r+0x1c>
 800abe0:	42a9      	cmp	r1, r5
 800abe2:	d905      	bls.n	800abf0 <_malloc_r+0x28>
 800abe4:	230c      	movs	r3, #12
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	2600      	movs	r6, #0
 800abea:	4630      	mov	r0, r6
 800abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf0:	4e2e      	ldr	r6, [pc, #184]	; (800acac <_malloc_r+0xe4>)
 800abf2:	f000 f89d 	bl	800ad30 <__malloc_lock>
 800abf6:	6833      	ldr	r3, [r6, #0]
 800abf8:	461c      	mov	r4, r3
 800abfa:	bb34      	cbnz	r4, 800ac4a <_malloc_r+0x82>
 800abfc:	4629      	mov	r1, r5
 800abfe:	4638      	mov	r0, r7
 800ac00:	f7ff ffc2 	bl	800ab88 <sbrk_aligned>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	4604      	mov	r4, r0
 800ac08:	d14d      	bne.n	800aca6 <_malloc_r+0xde>
 800ac0a:	6834      	ldr	r4, [r6, #0]
 800ac0c:	4626      	mov	r6, r4
 800ac0e:	2e00      	cmp	r6, #0
 800ac10:	d140      	bne.n	800ac94 <_malloc_r+0xcc>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	4631      	mov	r1, r6
 800ac16:	4638      	mov	r0, r7
 800ac18:	eb04 0803 	add.w	r8, r4, r3
 800ac1c:	f000 f878 	bl	800ad10 <_sbrk_r>
 800ac20:	4580      	cmp	r8, r0
 800ac22:	d13a      	bne.n	800ac9a <_malloc_r+0xd2>
 800ac24:	6821      	ldr	r1, [r4, #0]
 800ac26:	3503      	adds	r5, #3
 800ac28:	1a6d      	subs	r5, r5, r1
 800ac2a:	f025 0503 	bic.w	r5, r5, #3
 800ac2e:	3508      	adds	r5, #8
 800ac30:	2d0c      	cmp	r5, #12
 800ac32:	bf38      	it	cc
 800ac34:	250c      	movcc	r5, #12
 800ac36:	4629      	mov	r1, r5
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f7ff ffa5 	bl	800ab88 <sbrk_aligned>
 800ac3e:	3001      	adds	r0, #1
 800ac40:	d02b      	beq.n	800ac9a <_malloc_r+0xd2>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	442b      	add	r3, r5
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	e00e      	b.n	800ac68 <_malloc_r+0xa0>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	1b52      	subs	r2, r2, r5
 800ac4e:	d41e      	bmi.n	800ac8e <_malloc_r+0xc6>
 800ac50:	2a0b      	cmp	r2, #11
 800ac52:	d916      	bls.n	800ac82 <_malloc_r+0xba>
 800ac54:	1961      	adds	r1, r4, r5
 800ac56:	42a3      	cmp	r3, r4
 800ac58:	6025      	str	r5, [r4, #0]
 800ac5a:	bf18      	it	ne
 800ac5c:	6059      	strne	r1, [r3, #4]
 800ac5e:	6863      	ldr	r3, [r4, #4]
 800ac60:	bf08      	it	eq
 800ac62:	6031      	streq	r1, [r6, #0]
 800ac64:	5162      	str	r2, [r4, r5]
 800ac66:	604b      	str	r3, [r1, #4]
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f104 060b 	add.w	r6, r4, #11
 800ac6e:	f000 f865 	bl	800ad3c <__malloc_unlock>
 800ac72:	f026 0607 	bic.w	r6, r6, #7
 800ac76:	1d23      	adds	r3, r4, #4
 800ac78:	1af2      	subs	r2, r6, r3
 800ac7a:	d0b6      	beq.n	800abea <_malloc_r+0x22>
 800ac7c:	1b9b      	subs	r3, r3, r6
 800ac7e:	50a3      	str	r3, [r4, r2]
 800ac80:	e7b3      	b.n	800abea <_malloc_r+0x22>
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	bf0c      	ite	eq
 800ac88:	6032      	streq	r2, [r6, #0]
 800ac8a:	605a      	strne	r2, [r3, #4]
 800ac8c:	e7ec      	b.n	800ac68 <_malloc_r+0xa0>
 800ac8e:	4623      	mov	r3, r4
 800ac90:	6864      	ldr	r4, [r4, #4]
 800ac92:	e7b2      	b.n	800abfa <_malloc_r+0x32>
 800ac94:	4634      	mov	r4, r6
 800ac96:	6876      	ldr	r6, [r6, #4]
 800ac98:	e7b9      	b.n	800ac0e <_malloc_r+0x46>
 800ac9a:	230c      	movs	r3, #12
 800ac9c:	603b      	str	r3, [r7, #0]
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f000 f84c 	bl	800ad3c <__malloc_unlock>
 800aca4:	e7a1      	b.n	800abea <_malloc_r+0x22>
 800aca6:	6025      	str	r5, [r4, #0]
 800aca8:	e7de      	b.n	800ac68 <_malloc_r+0xa0>
 800acaa:	bf00      	nop
 800acac:	20005208 	.word	0x20005208

0800acb0 <_realloc_r>:
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	4680      	mov	r8, r0
 800acb6:	4614      	mov	r4, r2
 800acb8:	460e      	mov	r6, r1
 800acba:	b921      	cbnz	r1, 800acc6 <_realloc_r+0x16>
 800acbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	4611      	mov	r1, r2
 800acc2:	f7ff bf81 	b.w	800abc8 <_malloc_r>
 800acc6:	b92a      	cbnz	r2, 800acd4 <_realloc_r+0x24>
 800acc8:	f7ff ff12 	bl	800aaf0 <_free_r>
 800accc:	4625      	mov	r5, r4
 800acce:	4628      	mov	r0, r5
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	f000 f838 	bl	800ad48 <_malloc_usable_size_r>
 800acd8:	4284      	cmp	r4, r0
 800acda:	4607      	mov	r7, r0
 800acdc:	d802      	bhi.n	800ace4 <_realloc_r+0x34>
 800acde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ace2:	d812      	bhi.n	800ad0a <_realloc_r+0x5a>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4640      	mov	r0, r8
 800ace8:	f7ff ff6e 	bl	800abc8 <_malloc_r>
 800acec:	4605      	mov	r5, r0
 800acee:	2800      	cmp	r0, #0
 800acf0:	d0ed      	beq.n	800acce <_realloc_r+0x1e>
 800acf2:	42bc      	cmp	r4, r7
 800acf4:	4622      	mov	r2, r4
 800acf6:	4631      	mov	r1, r6
 800acf8:	bf28      	it	cs
 800acfa:	463a      	movcs	r2, r7
 800acfc:	f7ff fbb8 	bl	800a470 <memcpy>
 800ad00:	4631      	mov	r1, r6
 800ad02:	4640      	mov	r0, r8
 800ad04:	f7ff fef4 	bl	800aaf0 <_free_r>
 800ad08:	e7e1      	b.n	800acce <_realloc_r+0x1e>
 800ad0a:	4635      	mov	r5, r6
 800ad0c:	e7df      	b.n	800acce <_realloc_r+0x1e>
	...

0800ad10 <_sbrk_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4d06      	ldr	r5, [pc, #24]	; (800ad2c <_sbrk_r+0x1c>)
 800ad14:	2300      	movs	r3, #0
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7f6 fbc6 	bl	80014ac <_sbrk>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_sbrk_r+0x1a>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_sbrk_r+0x1a>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20005210 	.word	0x20005210

0800ad30 <__malloc_lock>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__malloc_lock+0x8>)
 800ad32:	f000 b811 	b.w	800ad58 <__retarget_lock_acquire_recursive>
 800ad36:	bf00      	nop
 800ad38:	20005214 	.word	0x20005214

0800ad3c <__malloc_unlock>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__malloc_unlock+0x8>)
 800ad3e:	f000 b80c 	b.w	800ad5a <__retarget_lock_release_recursive>
 800ad42:	bf00      	nop
 800ad44:	20005214 	.word	0x20005214

0800ad48 <_malloc_usable_size_r>:
 800ad48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad4c:	1f18      	subs	r0, r3, #4
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bfbc      	itt	lt
 800ad52:	580b      	ldrlt	r3, [r1, r0]
 800ad54:	18c0      	addlt	r0, r0, r3
 800ad56:	4770      	bx	lr

0800ad58 <__retarget_lock_acquire_recursive>:
 800ad58:	4770      	bx	lr

0800ad5a <__retarget_lock_release_recursive>:
 800ad5a:	4770      	bx	lr

0800ad5c <_init>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr

0800ad68 <_fini>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr
