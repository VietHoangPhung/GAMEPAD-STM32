
gamepad_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000962c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea0  08009ea0  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ea0  08009ea0  00019ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ea8  08009ea8  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08009eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a8  2000025c  0800a10c  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  0800a10c  00021304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184ff  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a1  00000000  00000000  0003878b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4de  00000000  00000000  0003e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3fa  00000000  00000000  00059e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e2fc  00000000  00000000  00075210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011350c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dcc  00000000  00000000  0011355c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097b4 	.word	0x080097b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	080097b4 	.word	0x080097b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <getValue>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int getValue(int channel)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	int value = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <getValue+0x6c>)
 80005b2:	f001 fad7 	bl	8001b64 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <getValue+0x3c>
	{
		Error_Handler();
 80005bc:	f000 fc58 	bl	8000e70 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <getValue+0x6c>)
 80005c2:	f001 f94f 	bl	8001864 <HAL_ADC_Start>
	HAL_Delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 f8e4 	bl	8001794 <HAL_Delay>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80005cc:	210a      	movs	r1, #10
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <getValue+0x6c>)
 80005d0:	f001 fa2f 	bl	8001a32 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <getValue+0x6c>)
 80005d6:	f001 fab7 	bl	8001b48 <HAL_ADC_GetValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	61fb      	str	r3, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <getValue+0x6c>)
 80005e0:	f001 f9f4 	bl	80019cc <HAL_ADC_Stop>
	return value;
 80005e4:	69fb      	ldr	r3, [r7, #28]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000278 	.word	0x20000278

080005f4 <keyboardProcess>:

void keyboardProcess(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e022      	b.n	8000646 <keyboardProcess+0x52>
	{
	    if(HAL_GPIO_ReadPin(port[i], pin[i]) == GPIO_PIN_RESET)
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <keyboardProcess+0x6c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	4916      	ldr	r1, [pc, #88]	; (8000664 <keyboardProcess+0x70>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000610:	4619      	mov	r1, r3
 8000612:	4610      	mov	r0, r2
 8000614:	f001 ff5a 	bl	80024cc <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10a      	bne.n	8000634 <keyboardProcess+0x40>
	    {
		  keyboardReport.keycode[i] = keycode[i];
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <keyboardProcess+0x74>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	7819      	ldrb	r1, [r3, #0]
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <keyboardProcess+0x78>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	3303      	adds	r3, #3
 800062e:	460a      	mov	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e005      	b.n	8000640 <keyboardProcess+0x4c>
	    }
	    else
		  keyboardReport.keycode[i] = 0;
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <keyboardProcess+0x78>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	3303      	adds	r3, #3
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM; i++)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0e      	cmp	r3, #14
 800064a:	ddd9      	ble.n	8000600 <keyboardProcess+0xc>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &keyboardReport, sizeof(keyboardReport));
 800064c:	2209      	movs	r2, #9
 800064e:	4907      	ldr	r1, [pc, #28]	; (800066c <keyboardProcess+0x78>)
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <keyboardProcess+0x7c>)
 8000652:	f006 fb2d 	bl	8006cb0 <USBD_CUSTOM_HID_SendReport>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000
 8000664:	20000040 	.word	0x20000040
 8000668:	20000060 	.word	0x20000060
 800066c:	2000035c 	.word	0x2000035c
 8000670:	200008c4 	.word	0x200008c4

08000674 <mouseProcess>:

void mouseProcess(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	mouseReport.pointerX = (float)(adcValue3 - 2047)/4095*230;
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <mouseProcess+0xf8>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8000682:	ee07 3a90 	vmov	s15, r3
 8000686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800068a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000770 <mouseProcess+0xfc>
 800068e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000692:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000774 <mouseProcess+0x100>
 8000696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800069a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069e:	edc7 7a01 	vstr	s15, [r7, #4]
 80006a2:	793b      	ldrb	r3, [r7, #4]
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <mouseProcess+0x104>)
 80006a8:	709a      	strb	r2, [r3, #2]
	mouseReport.pointerY = (float)(2047 - adcValue2)/4095*230;
 80006aa:	4b34      	ldr	r3, [pc, #208]	; (800077c <mouseProcess+0x108>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 80006b2:	3307      	adds	r3, #7
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006bc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000770 <mouseProcess+0xfc>
 80006c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000774 <mouseProcess+0x100>
 80006c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80006d4:	793b      	ldrb	r3, [r7, #4]
 80006d6:	b25a      	sxtb	r2, r3
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <mouseProcess+0x104>)
 80006da:	70da      	strb	r2, [r3, #3]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 80006dc:	2101      	movs	r1, #1
 80006de:	4828      	ldr	r0, [pc, #160]	; (8000780 <mouseProcess+0x10c>)
 80006e0:	f001 fef4 	bl	80024cc <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d105      	bne.n	80006f6 <mouseProcess+0x82>
		mouseReport.leftClick = 1;
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <mouseProcess+0x104>)
 80006ec:	7853      	ldrb	r3, [r2, #1]
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	7053      	strb	r3, [r2, #1]
 80006f4:	e004      	b.n	8000700 <mouseProcess+0x8c>
	else
		mouseReport.leftClick = 0;
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <mouseProcess+0x104>)
 80006f8:	7853      	ldrb	r3, [r2, #1]
 80006fa:	f36f 0300 	bfc	r3, #0, #1
 80006fe:	7053      	strb	r3, [r2, #1]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	4820      	ldr	r0, [pc, #128]	; (8000784 <mouseProcess+0x110>)
 8000704:	f001 fee2 	bl	80024cc <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d105      	bne.n	800071a <mouseProcess+0xa6>
		mouseReport.rightClick = 1;
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <mouseProcess+0x104>)
 8000710:	7853      	ldrb	r3, [r2, #1]
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	7053      	strb	r3, [r2, #1]
 8000718:	e004      	b.n	8000724 <mouseProcess+0xb0>
	else
		mouseReport.rightClick = 0;
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <mouseProcess+0x104>)
 800071c:	7853      	ldrb	r3, [r2, #1]
 800071e:	f36f 0341 	bfc	r3, #1, #1
 8000722:	7053      	strb	r3, [r2, #1]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000724:	2102      	movs	r1, #2
 8000726:	4816      	ldr	r0, [pc, #88]	; (8000780 <mouseProcess+0x10c>)
 8000728:	f001 fed0 	bl	80024cc <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <mouseProcess+0xca>
		mouseReport.midClick = 1;
 8000732:	4a11      	ldr	r2, [pc, #68]	; (8000778 <mouseProcess+0x104>)
 8000734:	7853      	ldrb	r3, [r2, #1]
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	7053      	strb	r3, [r2, #1]
 800073c:	e004      	b.n	8000748 <mouseProcess+0xd4>
	else
		mouseReport.midClick = 0;
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <mouseProcess+0x104>)
 8000740:	7853      	ldrb	r3, [r2, #1]
 8000742:	f36f 0382 	bfc	r3, #2, #1
 8000746:	7053      	strb	r3, [r2, #1]
	mouseReport.wheel = encoderValue - 127;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <mouseProcess+0x114>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3b7f      	subs	r3, #127	; 0x7f
 8000750:	b2db      	uxtb	r3, r3
 8000752:	b25a      	sxtb	r2, r3
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <mouseProcess+0x104>)
 8000756:	711a      	strb	r2, [r3, #4]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &mouseReport, sizeof(mouseReport));
 8000758:	2205      	movs	r2, #5
 800075a:	4907      	ldr	r1, [pc, #28]	; (8000778 <mouseProcess+0x104>)
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <mouseProcess+0x118>)
 800075e:	f006 faa7 	bl	8006cb0 <USBD_CUSTOM_HID_SendReport>
	//HAL_Delay(8);
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200004aa 	.word	0x200004aa
 8000770:	457ff000 	.word	0x457ff000
 8000774:	43660000 	.word	0x43660000
 8000778:	20000368 	.word	0x20000368
 800077c:	200004a8 	.word	0x200004a8
 8000780:	40020400 	.word	0x40020400
 8000784:	40020000 	.word	0x40020000
 8000788:	200004ac 	.word	0x200004ac
 800078c:	200008c4 	.word	0x200008c4

08000790 <gamepadProcess>:
void gamepadProcess(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	  gamepadReport.leftX = (float)(adcValue3 - 2047)/4095*230;
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <gamepadProcess+0x12c>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007a6:	eddf 6a46 	vldr	s13, [pc, #280]	; 80008c0 <gamepadProcess+0x130>
 80007aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ae:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80008c4 <gamepadProcess+0x134>
 80007b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80007be:	793b      	ldrb	r3, [r7, #4]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <gamepadProcess+0x138>)
 80007c4:	711a      	strb	r2, [r3, #4]
	  gamepadReport.leftY = (float)(2047 - adcValue2)/4095*230;
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <gamepadProcess+0x13c>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 80007ce:	3307      	adds	r3, #7
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d8:	eddf 6a39 	vldr	s13, [pc, #228]	; 80008c0 <gamepadProcess+0x130>
 80007dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007e0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80008c4 <gamepadProcess+0x134>
 80007e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80007f0:	793b      	ldrb	r3, [r7, #4]
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <gamepadProcess+0x138>)
 80007f6:	715a      	strb	r2, [r3, #5]
	  gamepadReport.rightX = (float)(adcValue1 - 2047)/4095*230;
 80007f8:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <gamepadProcess+0x140>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80008c0 <gamepadProcess+0x130>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80008c4 <gamepadProcess+0x134>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000820:	793b      	ldrb	r3, [r7, #4]
 8000822:	b25a      	sxtb	r2, r3
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <gamepadProcess+0x138>)
 8000826:	719a      	strb	r2, [r3, #6]
	  gamepadReport.rightY = (float)(2047 - adcValue0)/4095*230;
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <gamepadProcess+0x144>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8000830:	3307      	adds	r3, #7
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800083a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80008c0 <gamepadProcess+0x130>
 800083e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000842:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80008c4 <gamepadProcess+0x134>
 8000846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800084e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	b25a      	sxtb	r2, r3
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <gamepadProcess+0x138>)
 8000858:	71da      	strb	r2, [r3, #7]
	  gamepadReport.buttons = 0;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <gamepadProcess+0x138>)
 800085c:	2200      	movs	r2, #0
 800085e:	805a      	strh	r2, [r3, #2]
	  for(int i = 0; i < NUM; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e01e      	b.n	80008a4 <gamepadProcess+0x114>
	  {
		  if(HAL_GPIO_ReadPin(port[i], pin[i]) == GPIO_PIN_RESET)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <gamepadProcess+0x148>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800086e:	491b      	ldr	r1, [pc, #108]	; (80008dc <gamepadProcess+0x14c>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000876:	4619      	mov	r1, r3
 8000878:	4610      	mov	r0, r2
 800087a:	f001 fe27 	bl	80024cc <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10c      	bne.n	800089e <gamepadProcess+0x10e>
			  gamepadReport.buttons |= (1 << i);
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <gamepadProcess+0x138>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	b21a      	sxth	r2, r3
 800088a:	2101      	movs	r1, #1
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	b21b      	sxth	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b21b      	sxth	r3, r3
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <gamepadProcess+0x138>)
 800089c:	805a      	strh	r2, [r3, #2]
	  for(int i = 0; i < NUM; i++)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b0e      	cmp	r3, #14
 80008a8:	dddd      	ble.n	8000866 <gamepadProcess+0xd6>
	  }
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &gamepadReport, sizeof(gamepadReport));
 80008aa:	2208      	movs	r2, #8
 80008ac:	4906      	ldr	r1, [pc, #24]	; (80008c8 <gamepadProcess+0x138>)
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <gamepadProcess+0x150>)
 80008b0:	f006 f9fe 	bl	8006cb0 <USBD_CUSTOM_HID_SendReport>
	  //HAL_Delay(8);
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200004aa 	.word	0x200004aa
 80008c0:	457ff000 	.word	0x457ff000
 80008c4:	43660000 	.word	0x43660000
 80008c8:	20000370 	.word	0x20000370
 80008cc:	200004a8 	.word	0x200004a8
 80008d0:	200004a6 	.word	0x200004a6
 80008d4:	200004a4 	.word	0x200004a4
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000040 	.word	0x20000040
 80008e0:	200008c4 	.word	0x200008c4

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fee1 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f8fd 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f000 fa63 	bl	8000dbc <MX_GPIO_Init>
  MX_ADC1_Init();
 80008f6:	f000 f963 	bl	8000bc0 <MX_ADC1_Init>
  MX_I2C3_Init();
 80008fa:	f000 f9dd 	bl	8000cb8 <MX_I2C3_Init>
  MX_TIM2_Init();
 80008fe:	f000 fa09 	bl	8000d14 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000902:	f007 fe57 	bl	80085b4 <MX_USB_DEVICE_Init>
  ssd1306_Init();
 8000906:	f000 faf1 	bl	8000eec <ssd1306_Init>

  mouseReport.reportId = 0x03;
 800090a:	4b63      	ldr	r3, [pc, #396]	; (8000a98 <main+0x1b4>)
 800090c:	2203      	movs	r2, #3
 800090e:	701a      	strb	r2, [r3, #0]
  keyboardReport.reportId = 0x02;
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <main+0x1b8>)
 8000912:	2202      	movs	r2, #2
 8000914:	701a      	strb	r2, [r3, #0]
  gamepadReport.reportId = 0x01;
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <main+0x1bc>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
  keyboardReport.modifier = 0;
 800091c:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <main+0x1b8>)
 800091e:	2200      	movs	r2, #0
 8000920:	705a      	strb	r2, [r3, #1]
  keyboardReport.reverse = 0;
 8000922:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <main+0x1b8>)
 8000924:	2200      	movs	r2, #0
 8000926:	709a      	strb	r2, [r3, #2]
  mouseReport.pad = 0;
 8000928:	4a5b      	ldr	r2, [pc, #364]	; (8000a98 <main+0x1b4>)
 800092a:	7853      	ldrb	r3, [r2, #1]
 800092c:	f36f 03c7 	bfc	r3, #3, #5
 8000930:	7053      	strb	r3, [r2, #1]
  ssd1306_Fill(Black);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fb44 	bl	8000fc0 <ssd1306_Fill>
  ssd1306_SetCursor(1, 15);
 8000938:	210f      	movs	r1, #15
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fc8e 	bl	800125c <ssd1306_SetCursor>
  ssd1306_WriteString("Test 2", Font_6x8, White);
 8000940:	4a58      	ldr	r2, [pc, #352]	; (8000aa4 <main+0x1c0>)
 8000942:	2301      	movs	r3, #1
 8000944:	ca06      	ldmia	r2, {r1, r2}
 8000946:	4858      	ldr	r0, [pc, #352]	; (8000aa8 <main+0x1c4>)
 8000948:	f000 fc62 	bl	8001210 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800094c:	f000 fb5c 	bl	8001008 <ssd1306_UpdateScreen>
  HAL_Delay(3000);
 8000950:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000954:	f000 ff1e 	bl	8001794 <HAL_Delay>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000958:	2104      	movs	r1, #4
 800095a:	4854      	ldr	r0, [pc, #336]	; (8000aac <main+0x1c8>)
 800095c:	f004 f978 	bl	8004c50 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  short modeState = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */
	  adcValue0 = 2047;//getValue(ADC_CHANNEL_0);
 8000964:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <main+0x1cc>)
 8000966:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800096a:	801a      	strh	r2, [r3, #0]
	  adcValue1 = 2047;//getValue(ADC_CHANNEL_1);
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <main+0x1d0>)
 800096e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000972:	801a      	strh	r2, [r3, #0]
	  adcValue2 = getValue(ADC_CHANNEL_2);
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff fe05 	bl	8000584 <getValue>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b4e      	ldr	r3, [pc, #312]	; (8000ab8 <main+0x1d4>)
 8000980:	801a      	strh	r2, [r3, #0]
	  adcValue3 = getValue(ADC_CHANNEL_3);
 8000982:	2003      	movs	r0, #3
 8000984:	f7ff fdfe 	bl	8000584 <getValue>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <main+0x1d8>)
 800098e:	801a      	strh	r2, [r3, #0]
	  encoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 8000990:	4b46      	ldr	r3, [pc, #280]	; (8000aac <main+0x1c8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <main+0x1dc>)
 800099a:	701a      	strb	r2, [r3, #0]

	  sprintf((char*)lcdBuffer2, "%d   %d", adcValue0, adcValue1);
 800099c:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <main+0x1cc>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <main+0x1d0>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	4947      	ldr	r1, [pc, #284]	; (8000ac4 <main+0x1e0>)
 80009a8:	4847      	ldr	r0, [pc, #284]	; (8000ac8 <main+0x1e4>)
 80009aa:	f008 fabd 	bl	8008f28 <siprintf>
	  sprintf((char*)lcdBuffer3, "%d ", encoderValue);
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <main+0x1dc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	4945      	ldr	r1, [pc, #276]	; (8000acc <main+0x1e8>)
 80009b8:	4845      	ldr	r0, [pc, #276]	; (8000ad0 <main+0x1ec>)
 80009ba:	f008 fab5 	bl	8008f28 <siprintf>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 80009be:	2101      	movs	r1, #1
 80009c0:	4844      	ldr	r0, [pc, #272]	; (8000ad4 <main+0x1f0>)
 80009c2:	f001 fd83 	bl	80024cc <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d121      	bne.n	8000a10 <main+0x12c>
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4842      	ldr	r0, [pc, #264]	; (8000ad8 <main+0x1f4>)
 80009d0:	f001 fd7c 	bl	80024cc <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d11a      	bne.n	8000a10 <main+0x12c>
 80009da:	2102      	movs	r1, #2
 80009dc:	483d      	ldr	r0, [pc, #244]	; (8000ad4 <main+0x1f0>)
 80009de:	f001 fd75 	bl	80024cc <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d113      	bne.n	8000a10 <main+0x12c>
	  {
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0);
 80009e8:	bf00      	nop
 80009ea:	2102      	movs	r1, #2
 80009ec:	4839      	ldr	r0, [pc, #228]	; (8000ad4 <main+0x1f0>)
 80009ee:	f001 fd6d 	bl	80024cc <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f8      	beq.n	80009ea <main+0x106>
		  modeState++;
 80009f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3301      	adds	r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	80fb      	strh	r3, [r7, #6]
		  if(modeState > 2)
 8000a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	dd01      	ble.n	8000a10 <main+0x12c>
			  modeState = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	80fb      	strh	r3, [r7, #6]
	  }

	  switch(modeState)
 8000a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d014      	beq.n	8000a42 <main+0x15e>
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	dc19      	bgt.n	8000a50 <main+0x16c>
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <main+0x142>
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d007      	beq.n	8000a34 <main+0x150>
 8000a24:	e014      	b.n	8000a50 <main+0x16c>
	  {
	  	  case 0: //keyboard mode
	  	  {
	  		  sprintf((char*)lcdBuffer1, "Gamepad mode ON");
 8000a26:	492d      	ldr	r1, [pc, #180]	; (8000adc <main+0x1f8>)
 8000a28:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <main+0x1fc>)
 8000a2a:	f008 fa7d 	bl	8008f28 <siprintf>
	  		  gamepadProcess();
 8000a2e:	f7ff feaf 	bl	8000790 <gamepadProcess>
	  		  break;
 8000a32:	e00d      	b.n	8000a50 <main+0x16c>
	  	  }
	  	  case 1:  //mouse mode
	  	  {
	  		  sprintf((char*)lcdBuffer1, "Mouse mode ON");
 8000a34:	492b      	ldr	r1, [pc, #172]	; (8000ae4 <main+0x200>)
 8000a36:	482a      	ldr	r0, [pc, #168]	; (8000ae0 <main+0x1fc>)
 8000a38:	f008 fa76 	bl	8008f28 <siprintf>
	  		  mouseProcess();
 8000a3c:	f7ff fe1a 	bl	8000674 <mouseProcess>
	  		  break;
 8000a40:	e006      	b.n	8000a50 <main+0x16c>
	  	  }
	  	  case 2:  //gamepad
	  	  {
	  		  sprintf((char*)lcdBuffer1, "Keyboard mode ON");
 8000a42:	4929      	ldr	r1, [pc, #164]	; (8000ae8 <main+0x204>)
 8000a44:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <main+0x1fc>)
 8000a46:	f008 fa6f 	bl	8008f28 <siprintf>
	  		  keyboardProcess();
 8000a4a:	f7ff fdd3 	bl	80005f4 <keyboardProcess>
	  		  break;
 8000a4e:	bf00      	nop
	  	  }
	  }
	  ssd1306_Fill(Black);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fab5 	bl	8000fc0 <ssd1306_Fill>
	  ssd1306_SetCursor(1, 10);
 8000a56:	210a      	movs	r1, #10
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fbff 	bl	800125c <ssd1306_SetCursor>
	  ssd1306_WriteString((char*)lcdBuffer1, Font_6x8, White);
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <main+0x1c0>)
 8000a60:	2301      	movs	r3, #1
 8000a62:	ca06      	ldmia	r2, {r1, r2}
 8000a64:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <main+0x1fc>)
 8000a66:	f000 fbd3 	bl	8001210 <ssd1306_WriteString>
	  ssd1306_SetCursor(1, 30);
 8000a6a:	211e      	movs	r1, #30
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 fbf5 	bl	800125c <ssd1306_SetCursor>
	  ssd1306_WriteString((char*)lcdBuffer2, Font_6x8, White);
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <main+0x1c0>)
 8000a74:	2301      	movs	r3, #1
 8000a76:	ca06      	ldmia	r2, {r1, r2}
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <main+0x1e4>)
 8000a7a:	f000 fbc9 	bl	8001210 <ssd1306_WriteString>
	  ssd1306_SetCursor(1, 50);
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fbeb 	bl	800125c <ssd1306_SetCursor>
	  ssd1306_WriteString((char*)lcdBuffer3, Font_6x8, White);
 8000a86:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <main+0x1c0>)
 8000a88:	2301      	movs	r3, #1
 8000a8a:	ca06      	ldmia	r2, {r1, r2}
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <main+0x1ec>)
 8000a8e:	f000 fbbf 	bl	8001210 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000a92:	f000 fab9 	bl	8001008 <ssd1306_UpdateScreen>
	  adcValue0 = 2047;//getValue(ADC_CHANNEL_0);
 8000a96:	e765      	b.n	8000964 <main+0x80>
 8000a98:	20000368 	.word	0x20000368
 8000a9c:	2000035c 	.word	0x2000035c
 8000aa0:	20000370 	.word	0x20000370
 8000aa4:	20000070 	.word	0x20000070
 8000aa8:	080097cc 	.word	0x080097cc
 8000aac:	20000314 	.word	0x20000314
 8000ab0:	200004a4 	.word	0x200004a4
 8000ab4:	200004a6 	.word	0x200004a6
 8000ab8:	200004a8 	.word	0x200004a8
 8000abc:	200004aa 	.word	0x200004aa
 8000ac0:	200004ac 	.word	0x200004ac
 8000ac4:	080097d4 	.word	0x080097d4
 8000ac8:	200003dc 	.word	0x200003dc
 8000acc:	080097dc 	.word	0x080097dc
 8000ad0:	20000440 	.word	0x20000440
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	080097e0 	.word	0x080097e0
 8000ae0:	20000378 	.word	0x20000378
 8000ae4:	080097f0 	.word	0x080097f0
 8000ae8:	08009800 	.word	0x08009800

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f008 fa0c 	bl	8008f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b60:	2319      	movs	r3, #25
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b64:	2390      	movs	r3, #144	; 0x90
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fb81 	bl	800427c <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b80:	f000 f976 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fde3 	bl	800476c <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bac:	f000 f960 	bl	8000e70 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_ADC1_Init+0xec>)
 8000bd4:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <MX_ADC1_Init+0xf0>)
 8000bd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_ADC1_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_ADC1_Init+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_ADC1_Init+0xec>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_ADC1_Init+0xec>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_ADC1_Init+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_ADC1_Init+0xec>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c00:	4a2c      	ldr	r2, [pc, #176]	; (8000cb4 <MX_ADC1_Init+0xf4>)
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1e:	4823      	ldr	r0, [pc, #140]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c20:	f000 fddc 	bl	80017dc <HAL_ADC_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 f921 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481b      	ldr	r0, [pc, #108]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c40:	f000 ff90 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c4a:	f000 f911 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c5c:	f000 ff82 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c66:	f000 f903 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c78:	f000 ff74 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000c82:	f000 f8f5 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c86:	2303      	movs	r3, #3
 8000c88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_ADC1_Init+0xec>)
 8000c94:	f000 ff66 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c9e:	f000 f8e7 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000278 	.word	0x20000278
 8000cb0:	40012000 	.word	0x40012000
 8000cb4:	0f000001 	.word	0x0f000001

08000cb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_I2C3_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_I2C3_Init+0x58>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_I2C3_Init+0x50>)
 8000cf6:	f001 fc01 	bl	80024fc <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 f8b6 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200002c0 	.word	0x200002c0
 8000d0c:	40005c00 	.word	0x40005c00
 8000d10:	00061a80 	.word	0x00061a80

08000d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2224      	movs	r2, #36	; 0x24
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 f8f8 	bl	8008f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000d84:	f003 febe 	bl	8004b04 <HAL_TIM_Encoder_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d8e:	f000 f86f 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM2_Init+0xa4>)
 8000da0:	f004 f88a 	bl	8004eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000daa:	f000 f861 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000314 	.word	0x20000314

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_GPIO_Init+0xa8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000e26:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <MX_GPIO_Init+0xac>)
 8000e3c:	f001 f9c2 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e40:	f24f 53e7 	movw	r3, #62951	; 0xf5e7
 8000e44:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000e56:	f001 f9b5 	bl	80021c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>

08000e7a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2178      	movs	r1, #120	; 0x78
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <ssd1306_WriteCommand+0x2c>)
 8000ea8:	f001 fc6c 	bl	8002784 <HAL_I2C_Mem_Write>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200002c0 	.word	0x200002c0

08000eb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	9202      	str	r2, [sp, #8]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2240      	movs	r2, #64	; 0x40
 8000ed6:	2178      	movs	r1, #120	; 0x78
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <ssd1306_WriteData+0x30>)
 8000eda:	f001 fc53 	bl	8002784 <HAL_I2C_Mem_Write>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002c0 	.word	0x200002c0

08000eec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ef0:	f7ff ffc3 	bl	8000e7a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f000 fc4d 	bl	8001794 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f9da 	bl	80012b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f00:	2020      	movs	r0, #32
 8000f02:	f7ff ffc1 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ffbe 	bl	8000e88 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f0c:	20b0      	movs	r0, #176	; 0xb0
 8000f0e:	f7ff ffbb 	bl	8000e88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f12:	20c8      	movs	r0, #200	; 0xc8
 8000f14:	f7ff ffb8 	bl	8000e88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff ffb5 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff ffb2 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f24:	2040      	movs	r0, #64	; 0x40
 8000f26:	f7ff ffaf 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f2a:	20ff      	movs	r0, #255	; 0xff
 8000f2c:	f000 f9ae 	bl	800128c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f30:	20a1      	movs	r0, #161	; 0xa1
 8000f32:	f7ff ffa9 	bl	8000e88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f36:	20a6      	movs	r0, #166	; 0xa6
 8000f38:	f7ff ffa6 	bl	8000e88 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f3c:	20a8      	movs	r0, #168	; 0xa8
 8000f3e:	f7ff ffa3 	bl	8000e88 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f42:	203f      	movs	r0, #63	; 0x3f
 8000f44:	f7ff ffa0 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f48:	20a4      	movs	r0, #164	; 0xa4
 8000f4a:	f7ff ff9d 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f4e:	20d3      	movs	r0, #211	; 0xd3
 8000f50:	f7ff ff9a 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff97 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f5a:	20d5      	movs	r0, #213	; 0xd5
 8000f5c:	f7ff ff94 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f60:	20f0      	movs	r0, #240	; 0xf0
 8000f62:	f7ff ff91 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f66:	20d9      	movs	r0, #217	; 0xd9
 8000f68:	f7ff ff8e 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f6c:	2022      	movs	r0, #34	; 0x22
 8000f6e:	f7ff ff8b 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f72:	20da      	movs	r0, #218	; 0xda
 8000f74:	f7ff ff88 	bl	8000e88 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f78:	2012      	movs	r0, #18
 8000f7a:	f7ff ff85 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f7e:	20db      	movs	r0, #219	; 0xdb
 8000f80:	f7ff ff82 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f84:	2020      	movs	r0, #32
 8000f86:	f7ff ff7f 	bl	8000e88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f8a:	208d      	movs	r0, #141	; 0x8d
 8000f8c:	f7ff ff7c 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f90:	2014      	movs	r0, #20
 8000f92:	f7ff ff79 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 f98c 	bl	80012b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f80f 	bl	8000fc0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000fa2:	f000 f831 	bl	8001008 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <ssd1306_Init+0xd0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <ssd1306_Init+0xd0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000fb2:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <ssd1306_Init+0xd0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	711a      	strb	r2, [r3, #4]
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200008b0 	.word	0x200008b0

08000fc0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e00d      	b.n	8000fec <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <ssd1306_Fill+0x1a>
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	e000      	b.n	8000fdc <ssd1306_Fill+0x1c>
 8000fda:	21ff      	movs	r1, #255	; 0xff
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <ssd1306_Fill+0x44>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d3ed      	bcc.n	8000fd0 <ssd1306_Fill+0x10>
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200004b0 	.word	0x200004b0

08001008 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e016      	b.n	8001042 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3b50      	subs	r3, #80	; 0x50
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff34 	bl	8000e88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff31 	bl	8000e88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001026:	2010      	movs	r0, #16
 8001028:	f7ff ff2e 	bl	8000e88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <ssd1306_UpdateScreen+0x4c>)
 8001032:	4413      	add	r3, r2
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff3e 	bl	8000eb8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3301      	adds	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b07      	cmp	r3, #7
 8001046:	d9e5      	bls.n	8001014 <ssd1306_UpdateScreen+0xc>
    }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200004b0 	.word	0x200004b0

08001058 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	460b      	mov	r3, r1
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	4613      	mov	r3, r2
 8001068:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db3d      	blt.n	80010ee <ssd1306_DrawPixel+0x96>
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	2b3f      	cmp	r3, #63	; 0x3f
 8001076:	d83a      	bhi.n	80010ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d11a      	bne.n	80010b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	01db      	lsls	r3, r3, #7
 800108a:	4413      	add	r3, r2
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	b25a      	sxtb	r2, r3
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b259      	sxtb	r1, r3
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4603      	mov	r3, r0
 80010a8:	01db      	lsls	r3, r3, #7
 80010aa:	4413      	add	r3, r2
 80010ac:	b2c9      	uxtb	r1, r1
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 80010b0:	54d1      	strb	r1, [r2, r3]
 80010b2:	e01d      	b.n	80010f0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	01db      	lsls	r3, r3, #7
 80010c0:	4413      	add	r3, r2
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	b259      	sxtb	r1, r3
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	4603      	mov	r3, r0
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4413      	add	r3, r2
 80010e6:	b2c9      	uxtb	r1, r1
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 80010ea:	54d1      	strb	r1, [r2, r3]
 80010ec:	e000      	b.n	80010f0 <ssd1306_DrawPixel+0x98>
        return;
 80010ee:	bf00      	nop
    }
}
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200004b0 	.word	0x200004b0

08001100 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4604      	mov	r4, r0
 8001108:	1d38      	adds	r0, r7, #4
 800110a:	e880 0006 	stmia.w	r0, {r1, r2}
 800110e:	461a      	mov	r2, r3
 8001110:	4623      	mov	r3, r4
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	4613      	mov	r3, r2
 8001116:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b1f      	cmp	r3, #31
 800111c:	d902      	bls.n	8001124 <ssd1306_WriteChar+0x24>
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b7e      	cmp	r3, #126	; 0x7e
 8001122:	d901      	bls.n	8001128 <ssd1306_WriteChar+0x28>
        return 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e06d      	b.n	8001204 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <ssd1306_WriteChar+0x10c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	2b80      	cmp	r3, #128	; 0x80
 8001134:	dc06      	bgt.n	8001144 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <ssd1306_WriteChar+0x10c>)
 8001138:	885b      	ldrh	r3, [r3, #2]
 800113a:	461a      	mov	r2, r3
 800113c:	797b      	ldrb	r3, [r7, #5]
 800113e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001140:	2b40      	cmp	r3, #64	; 0x40
 8001142:	dd01      	ble.n	8001148 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001144:	2300      	movs	r3, #0
 8001146:	e05d      	b.n	8001204 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	e04c      	b.n	80011e8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3b20      	subs	r3, #32
 8001154:	7979      	ldrb	r1, [r7, #5]
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	4619      	mov	r1, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	440b      	add	r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e034      	b.n	80011d8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d012      	beq.n	80011a4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <ssd1306_WriteChar+0x10c>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b2d8      	uxtb	r0, r3
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <ssd1306_WriteChar+0x10c>)
 800118e:	885b      	ldrh	r3, [r3, #2]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	7bba      	ldrb	r2, [r7, #14]
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff ff5b 	bl	8001058 <ssd1306_DrawPixel>
 80011a2:	e016      	b.n	80011d2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <ssd1306_WriteChar+0x10c>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <ssd1306_WriteChar+0x10c>)
 80011b4:	885b      	ldrh	r3, [r3, #2]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b2d9      	uxtb	r1, r3
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf0c      	ite	eq
 80011c6:	2301      	moveq	r3, #1
 80011c8:	2300      	movne	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	f7ff ff43 	bl	8001058 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	793b      	ldrb	r3, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d3c5      	bcc.n	800116e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	461a      	mov	r2, r3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d3ad      	bcc.n	800114e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <ssd1306_WriteChar+0x10c>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	793b      	ldrb	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <ssd1306_WriteChar+0x10c>)
 8001200:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	200008b0 	.word	0x200008b0

08001210 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	1d38      	adds	r0, r7, #4
 800121a:	e880 0006 	stmia.w	r0, {r1, r2}
 800121e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001220:	e012      	b.n	8001248 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	1d3a      	adds	r2, r7, #4
 800122a:	ca06      	ldmia	r2, {r1, r2}
 800122c:	f7ff ff68 	bl	8001100 <ssd1306_WriteChar>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d002      	beq.n	8001242 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	e008      	b.n	8001254 <ssd1306_WriteString+0x44>
        }
        str++;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3301      	adds	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e8      	bne.n	8001222 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <ssd1306_SetCursor+0x2c>)
 8001272:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <ssd1306_SetCursor+0x2c>)
 800127a:	805a      	strh	r2, [r3, #2]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200008b0 	.word	0x200008b0

0800128c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001296:	2381      	movs	r3, #129	; 0x81
 8001298:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fdf3 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdef 	bl	8000e88 <ssd1306_WriteCommand>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80012c4:	23af      	movs	r3, #175	; 0xaf
 80012c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <ssd1306_SetDisplayOn+0x38>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	715a      	strb	r2, [r3, #5]
 80012ce:	e004      	b.n	80012da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80012d0:	23ae      	movs	r3, #174	; 0xae
 80012d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <ssd1306_SetDisplayOn+0x38>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fdd3 	bl	8000e88 <ssd1306_WriteCommand>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200008b0 	.word	0x200008b0

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_ADC_MspInit+0x7c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d127      	bne.n	80013b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_ADC_MspInit+0x80>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0x80>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_ADC_MspInit+0x80>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_ADC_MspInit+0x80>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_ADC_MspInit+0x80>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_ADC_MspInit+0x80>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800139a:	230f      	movs	r3, #15
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_ADC_MspInit+0x84>)
 80013ae:	f000 ff09 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40012000 	.word	0x40012000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_I2C_MspInit+0xc0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d14a      	bne.n	8001480 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_I2C_MspInit+0xc4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_I2C_MspInit+0xc4>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_I2C_MspInit+0xc4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_I2C_MspInit+0xc4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_I2C_MspInit+0xc4>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_I2C_MspInit+0xc4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001434:	2304      	movs	r3, #4
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <HAL_I2C_MspInit+0xc8>)
 8001440:	f000 fec0 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001444:	2310      	movs	r3, #16
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001454:	2309      	movs	r3, #9
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001460:	f000 feb0 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_I2C_MspInit+0xc4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_I2C_MspInit+0xc4>)
 800146e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_I2C_MspInit+0xc4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005c00 	.word	0x40005c00
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400

08001498 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b8:	d149      	bne.n	800154e <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800150e:	2320      	movs	r3, #32
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <HAL_TIM_Encoder_MspInit+0xc4>)
 800152a:	f000 fe4b 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800152e:	2308      	movs	r3, #8
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_TIM_Encoder_MspInit+0xc8>)
 800154a:	f000 fe3b 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f8d0 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <OTG_FS_IRQHandler+0x10>)
 80015be:	f001 fd48 	bl	8003052 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000da0 	.word	0x20000da0

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f007 fc3a 	bl	8008e74 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20010000 	.word	0x20010000
 800162c:	00000400 	.word	0x00000400
 8001630:	200008b8 	.word	0x200008b8
 8001634:	20001308 	.word	0x20001308

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f007 fbf9 	bl	8008e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff f929 	bl	80008e4 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80016a0:	08009eb0 	.word	0x08009eb0
  ldr r2, =_sbss
 80016a4:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80016a8:	20001304 	.word	0x20001304

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 fd31 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	200f      	movs	r0, #15
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fe04 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd49 	bl	80021aa <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 fd11 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000078 	.word	0x20000078
 800174c:	20000080 	.word	0x20000080
 8001750:	2000007c 	.word	0x2000007c

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000080 	.word	0x20000080
 8001778:	200008bc 	.word	0x200008bc

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200008bc 	.word	0x200008bc

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000080 	.word	0x20000080

080017dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e033      	b.n	800185a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fda0 	bl	8001340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	f043 0202 	orr.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 faba 	bl	8001da8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
 800184a:	e001      	b.n	8001850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_Start+0x1a>
 800187a:	2302      	movs	r3, #2
 800187c:	e097      	b.n	80019ae <HAL_ADC_Start+0x14a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d018      	beq.n	80018c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a4:	4b45      	ldr	r3, [pc, #276]	; (80019bc <HAL_ADC_Start+0x158>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_ADC_Start+0x15c>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9a      	lsrs	r2, r3, #18
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d15f      	bne.n	8001994 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001912:	d106      	bne.n	8001922 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f023 0206 	bic.w	r2, r3, #6
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
 8001920:	e002      	b.n	8001928 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_ADC_Start+0x160>)
 8001932:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800193c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d129      	bne.n	80019ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e020      	b.n	80019ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_ADC_Start+0x164>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d11b      	bne.n	80019ac <HAL_ADC_Start+0x148>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	e00b      	b.n	80019ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f043 0210 	orr.w	r2, r3, #16
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000078 	.word	0x20000078
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	40012300 	.word	0x40012300
 80019c8:	40012000 	.word	0x40012000

080019cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Stop+0x16>
 80019de:	2302      	movs	r3, #2
 80019e0:	e021      	b.n	8001a26 <HAL_ADC_Stop+0x5a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d113      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5e:	d10b      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f043 0220 	orr.w	r2, r3, #32
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e063      	b.n	8001b40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a78:	f7ff fe80 	bl	800177c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a7e:	e021      	b.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a86:	d01d      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x6c>
 8001a8e:	f7ff fe75 	bl	800177c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d212      	bcs.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e03d      	b.n	8001b40 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d1d6      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0212 	mvn.w	r2, #18
 8001ada:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d123      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d11f      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d111      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e105      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x228>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d925      	bls.n	8001bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b1e      	subs	r3, #30
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4403      	add	r3, r0
 8001bce:	3b1e      	subs	r3, #30
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	e022      	b.n	8001c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4403      	add	r3, r0
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d824      	bhi.n	8001c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b05      	subs	r3, #5
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b05      	subs	r3, #5
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e04c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d824      	bhi.n	8001cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b23      	subs	r3, #35	; 0x23
 8001c8e:	221f      	movs	r2, #31
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43da      	mvns	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b23      	subs	r3, #35	; 0x23
 8001cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	e023      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b41      	subs	r3, #65	; 0x41
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	; 0x41
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_ADC_ConfigChannel+0x234>)
 8001d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d123      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x1e6>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d11b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_ADC_ConfigChannel+0x23c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_ADC_ConfigChannel+0x240>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	20000078 	.word	0x20000078
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <ADC_Init+0x1f0>)
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <ADC_Init+0x1f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	e00f      	b.n	8001ea6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0202 	bic.w	r2, r2, #2
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ef2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	035a      	lsls	r2, r3, #13
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	e007      	b.n	8001f1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	051a      	lsls	r2, r3, #20
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f5e:	025a      	lsls	r2, r3, #9
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	029a      	lsls	r2, r3, #10
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	0f000001 	.word	0x0f000001

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e159      	b.n	8002494 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8148 	bne.w	800248e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d005      	beq.n	8002216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	2b02      	cmp	r3, #2
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b03      	cmp	r3, #3
 8002282:	d017      	beq.n	80022b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a2 	beq.w	800248e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a56      	ldr	r2, [pc, #344]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b54      	ldr	r3, [pc, #336]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002366:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x2ec>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_GPIO_Init+0x2f0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_GPIO_Init+0x202>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a48      	ldr	r2, [pc, #288]	; (80024b8 <HAL_GPIO_Init+0x2f4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x1fe>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a47      	ldr	r2, [pc, #284]	; (80024bc <HAL_GPIO_Init+0x2f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x1fa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a46      	ldr	r2, [pc, #280]	; (80024c0 <HAL_GPIO_Init+0x2fc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x1f6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a45      	ldr	r2, [pc, #276]	; (80024c4 <HAL_GPIO_Init+0x300>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x1f2>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x204>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <HAL_GPIO_Init+0x2ec>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_GPIO_Init+0x304>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <HAL_GPIO_Init+0x304>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_GPIO_Init+0x304>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x304>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x304>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f aea2 	bls.w	80021e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40013c00 	.word	0x40013c00

080024cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e001      	b.n	80024ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e12b      	b.n	8002766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe ff50 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002560:	f002 fabc 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a81      	ldr	r2, [pc, #516]	; (8002770 <HAL_I2C_Init+0x274>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d807      	bhi.n	8002580 <HAL_I2C_Init+0x84>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a80      	ldr	r2, [pc, #512]	; (8002774 <HAL_I2C_Init+0x278>)
 8002574:	4293      	cmp	r3, r2
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e006      	b.n	800258e <HAL_I2C_Init+0x92>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a7d      	ldr	r2, [pc, #500]	; (8002778 <HAL_I2C_Init+0x27c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	bf94      	ite	ls
 8002588:	2301      	movls	r3, #1
 800258a:	2300      	movhi	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0e7      	b.n	8002766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a78      	ldr	r2, [pc, #480]	; (800277c <HAL_I2C_Init+0x280>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_I2C_Init+0x274>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d802      	bhi.n	80025d0 <HAL_I2C_Init+0xd4>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3301      	adds	r3, #1
 80025ce:	e009      	b.n	80025e4 <HAL_I2C_Init+0xe8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_I2C_Init+0x284>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	495c      	ldr	r1, [pc, #368]	; (8002770 <HAL_I2C_Init+0x274>)
 8002600:	428b      	cmp	r3, r1
 8002602:	d819      	bhi.n	8002638 <HAL_I2C_Init+0x13c>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e59      	subs	r1, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002612:	1c59      	adds	r1, r3, #1
 8002614:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002618:	400b      	ands	r3, r1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_I2C_Init+0x138>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e59      	subs	r1, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fbb1 f3f3 	udiv	r3, r1, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002632:	e051      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002634:	2304      	movs	r3, #4
 8002636:	e04f      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d111      	bne.n	8002664 <HAL_I2C_Init+0x168>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e012      	b.n	800268a <HAL_I2C_Init+0x18e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x196>
 800268e:	2301      	movs	r3, #1
 8002690:	e022      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10e      	bne.n	80026b8 <HAL_I2C_Init+0x1bc>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e58      	subs	r0, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	440b      	add	r3, r1
 80026a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b6:	e00f      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	0099      	lsls	r1, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6911      	ldr	r1, [r2, #16]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	000186a0 	.word	0x000186a0
 8002774:	001e847f 	.word	0x001e847f
 8002778:	003d08ff 	.word	0x003d08ff
 800277c:	431bde83 	.word	0x431bde83
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	461a      	mov	r2, r3
 8002792:	4603      	mov	r3, r0
 8002794:	817b      	strh	r3, [r7, #10]
 8002796:	460b      	mov	r3, r1
 8002798:	813b      	strh	r3, [r7, #8]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800279e:	f7fe ffed 	bl	800177c <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	f040 80d9 	bne.w	8002964 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2319      	movs	r3, #25
 80027b8:	2201      	movs	r2, #1
 80027ba:	496d      	ldr	r1, [pc, #436]	; (8002970 <HAL_I2C_Mem_Write+0x1ec>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f971 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0cc      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_I2C_Mem_Write+0x56>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e0c5      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d007      	beq.n	8002800 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a4d      	ldr	r2, [pc, #308]	; (8002974 <HAL_I2C_Mem_Write+0x1f0>)
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002842:	88f8      	ldrh	r0, [r7, #6]
 8002844:	893a      	ldrh	r2, [r7, #8]
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4603      	mov	r3, r0
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f890 	bl	8002978 <I2C_RequestMemoryWrite>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d052      	beq.n	8002904 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e081      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f9f2 	bl	8002c50 <I2C_WaitOnTXEFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b04      	cmp	r3, #4
 8002878:	d107      	bne.n	800288a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d11b      	bne.n	8002904 <HAL_I2C_Mem_Write+0x180>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d017      	beq.n	8002904 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1aa      	bne.n	8002862 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f9de 	bl	8002cd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2b04      	cmp	r3, #4
 8002922:	d107      	bne.n	8002934 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e016      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	00100002 	.word	0x00100002
 8002974:	ffff0000 	.word	0xffff0000

08002978 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4603      	mov	r3, r0
 8002988:	817b      	strh	r3, [r7, #10]
 800298a:	460b      	mov	r3, r1
 800298c:	813b      	strh	r3, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f878 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c8:	d103      	bne.n	80029d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e05f      	b.n	8002a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	492d      	ldr	r1, [pc, #180]	; (8002aa0 <I2C_RequestMemoryWrite+0x128>)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f8b0 	bl	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e04c      	b.n	8002a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f91a 	bl	8002c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e02b      	b.n	8002a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	e021      	b.n	8002a94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8f4 	bl	8002c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d107      	bne.n	8002a86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e005      	b.n	8002a96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	00010002 	.word	0x00010002

08002aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	e025      	b.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d021      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fe5d 	bl	800177c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e023      	b.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10d      	bne.n	8002b28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	e00c      	b.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d0b6      	beq.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b60:	e051      	b.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d123      	bne.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0204 	orr.w	r2, r3, #4
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e046      	b.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d021      	beq.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7fe fddb 	bl	800177c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e020      	b.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10c      	bne.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e00b      	b.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	43da      	mvns	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4013      	ands	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d18d      	bne.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c5c:	e02d      	b.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f878 	bl	8002d54 <I2C_IsAcknowledgeFailed>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e02d      	b.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d021      	beq.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7fe fd81 	bl	800177c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d1ca      	bne.n	8002c5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cde:	e02d      	b.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f837 	bl	8002d54 <I2C_IsAcknowledgeFailed>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e02d      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d021      	beq.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf8:	f7fe fd40 	bl	800177c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d302      	bcc.n	8002d0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e007      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d1ca      	bne.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d11b      	bne.n	8002da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f043 0204 	orr.w	r2, r3, #4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db4:	b08f      	sub	sp, #60	; 0x3c
 8002db6:	af0a      	add	r7, sp, #40	; 0x28
 8002db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e10f      	b.n	8002fe4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f005 fd50 	bl	8008884 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2203      	movs	r2, #3
 8002de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 f9db 	bl	80051be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	687e      	ldr	r6, [r7, #4]
 8002e10:	466d      	mov	r5, sp
 8002e12:	f106 0410 	add.w	r4, r6, #16
 8002e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e26:	1d33      	adds	r3, r6, #4
 8002e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f002 f8b2 	bl	8004f94 <USB_CoreInit>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0d0      	b.n	8002fe4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 f9c9 	bl	80051e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e04a      	b.n	8002eea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	333d      	adds	r3, #61	; 0x3d
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333c      	adds	r3, #60	; 0x3c
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	b298      	uxth	r0, r3
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3344      	adds	r3, #68	; 0x44
 8002e90:	4602      	mov	r2, r0
 8002e92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3340      	adds	r3, #64	; 0x40
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3348      	adds	r3, #72	; 0x48
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	334c      	adds	r3, #76	; 0x4c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3354      	adds	r3, #84	; 0x54
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3af      	bcc.n	8002e54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e044      	b.n	8002f84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	3301      	adds	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d3b5      	bcc.n	8002efa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	687e      	ldr	r6, [r7, #4]
 8002f96:	466d      	mov	r5, sp
 8002f98:	f106 0410 	add.w	r4, r6, #16
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fac:	1d33      	adds	r3, r6, #4
 8002fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f002 f961 	bl	8005278 <USB_DevInit>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e00d      	b.n	8002fe4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fab0 	bl	8006542 <USB_DevDisconnect>

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_PCD_Start+0x1c>
 8003004:	2302      	movs	r3, #2
 8003006:	e020      	b.n	800304a <HAL_PCD_Start+0x5e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	2b01      	cmp	r3, #1
 8003016:	d109      	bne.n	800302c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800301c:	2b01      	cmp	r3, #1
 800301e:	d005      	beq.n	800302c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f002 f8b3 	bl	800519c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fa60 	bl	8006500 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003052:	b590      	push	{r4, r7, lr}
 8003054:	b08d      	sub	sp, #52	; 0x34
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fb1e 	bl	80066aa <USB_GetMode>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 848a 	bne.w	800398a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fa82 	bl	8006584 <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8480 	beq.w	8003988 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fa6f 	bl	8006584 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d107      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f002 0202 	and.w	r2, r2, #2
 80030be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 fa5d 	bl	8006584 <USB_ReadInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d161      	bne.n	8003198 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0210 	bic.w	r2, r2, #16
 80030e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 020f 	and.w	r2, r3, #15
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	0c5b      	lsrs	r3, r3, #17
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	2b02      	cmp	r3, #2
 800310e:	d124      	bne.n	800315a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d035      	beq.n	8003188 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6a38      	ldr	r0, [r7, #32]
 8003130:	f003 f894 	bl	800625c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	441a      	add	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003152:	441a      	add	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
 8003158:	e016      	b.n	8003188 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	0c5b      	lsrs	r3, r3, #17
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	2b06      	cmp	r3, #6
 8003164:	d110      	bne.n	8003188 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800316c:	2208      	movs	r2, #8
 800316e:	4619      	mov	r1, r3
 8003170:	6a38      	ldr	r0, [r7, #32]
 8003172:	f003 f873 	bl	800625c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003182:	441a      	add	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0210 	orr.w	r2, r2, #16
 8003196:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f003 f9f1 	bl	8006584 <USB_ReadInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031ac:	f040 80a7 	bne.w	80032fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 f9f6 	bl	80065aa <USB_ReadDevAllOutEpInterrupt>
 80031be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031c0:	e099      	b.n	80032f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 808e 	beq.w	80032ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fa1a 	bl	8006612 <USB_ReadDevOutEPInterrupt>
 80031de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2301      	movs	r3, #1
 80031fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 feaa 	bl	8003f58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321a:	461a      	mov	r2, r3
 800321c:	2308      	movs	r3, #8
 800321e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 ff80 	bl	8004128 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2310      	movs	r3, #16
 8003242:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d030      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b80      	cmp	r3, #128	; 0x80
 8003258:	d109      	bne.n	800326e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	78db      	ldrb	r3, [r3, #3]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	b2db      	uxtb	r3, r3
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f005 fbef 	bl	8008a7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032aa:	461a      	mov	r2, r3
 80032ac:	2302      	movs	r3, #2
 80032ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c6:	461a      	mov	r2, r3
 80032c8:	2320      	movs	r3, #32
 80032ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e2:	461a      	mov	r2, r3
 80032e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	3301      	adds	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f af62 	bne.w	80031c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 f93e 	bl	8006584 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003312:	f040 80db 	bne.w	80034cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 f95f 	bl	80065de <USB_ReadDevAllInEpInterrupt>
 8003320:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003326:	e0cd      	b.n	80034c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80c2 	beq.w	80034b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f003 f985 	bl	800664e <USB_ReadDevInEPInterrupt>
 8003344:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d057      	beq.n	8003400 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	2201      	movs	r2, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	69f9      	ldr	r1, [r7, #28]
 800336c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003370:	4013      	ands	r3, r2
 8003372:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	461a      	mov	r2, r3
 8003382:	2301      	movs	r3, #1
 8003384:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d132      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334c      	adds	r3, #76	; 0x4c
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4403      	add	r3, r0
 80033ae:	3348      	adds	r3, #72	; 0x48
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4419      	add	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4403      	add	r3, r0
 80033c2:	334c      	adds	r3, #76	; 0x4c
 80033c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d113      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x3a2>
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3354      	adds	r3, #84	; 0x54
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033ec:	461a      	mov	r2, r3
 80033ee:	2101      	movs	r1, #1
 80033f0:	f003 f98c 	bl	800670c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 fac3 	bl	8008986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003416:	461a      	mov	r2, r3
 8003418:	2308      	movs	r3, #8
 800341a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003432:	461a      	mov	r2, r3
 8003434:	2310      	movs	r3, #16
 8003436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344e:	461a      	mov	r2, r3
 8003450:	2340      	movs	r3, #64	; 0x40
 8003452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d023      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800345e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003460:	6a38      	ldr	r0, [r7, #32]
 8003462:	f002 f86d 	bl	8005540 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3338      	adds	r3, #56	; 0x38
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	78db      	ldrb	r3, [r3, #3]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f005 fb06 	bl	8008aa0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	461a      	mov	r2, r3
 80034a2:	2302      	movs	r3, #2
 80034a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fcc3 	bl	8003e3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	3301      	adds	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f47f af2e 	bne.w	8003328 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 f857 	bl	8006584 <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e0:	d122      	bne.n	8003528 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 feaa 	bl	8004264 <HAL_PCDEx_LPM_Callback>
 8003510:	e002      	b.n	8003518 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f005 faa4 	bl	8008a60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 f829 	bl	8006584 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353c:	d112      	bne.n	8003564 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f005 fa60 	bl	8008a14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003562:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 f80b 	bl	8006584 <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	f040 80b7 	bne.w	80036ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2110      	movs	r1, #16
 8003596:	4618      	mov	r0, r3
 8003598:	f001 ffd2 	bl	8005540 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a0:	e046      	b.n	8003630 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ae:	461a      	mov	r2, r3
 80035b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e2:	461a      	mov	r2, r3
 80035e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003604:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003608:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361a:	0151      	lsls	r1, r2, #5
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	440a      	add	r2, r1
 8003620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003624:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003628:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	3301      	adds	r3, #1
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003636:	429a      	cmp	r2, r3
 8003638:	d3b3      	bcc.n	80035a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003648:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800364c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003666:	f043 030b 	orr.w	r3, r3, #11
 800366a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367c:	f043 030b 	orr.w	r3, r3, #11
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	e015      	b.n	80036b0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003696:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800369a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036aa:	f043 030b 	orr.w	r3, r3, #11
 80036ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036d4:	461a      	mov	r2, r3
 80036d6:	f003 f819 	bl	800670c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 ff48 	bl	8006584 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fe:	d124      	bne.n	800374a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f002 ffde 	bl	80066c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f001 ff93 	bl	800563a <USB_GetDevSpeed>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	f001 f9d0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8003724:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	4620      	mov	r0, r4
 8003730:	f001 fc92 	bl	8005058 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f005 f94e 	bl	80089d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003748:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f002 ff18 	bl	8006584 <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b08      	cmp	r3, #8
 800375c:	d10a      	bne.n	8003774 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f005 f92b 	bl	80089ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f002 0208 	and.w	r2, r2, #8
 8003772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 ff03 	bl	8006584 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d122      	bne.n	80037ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003794:	2301      	movs	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	e014      	b.n	80037c4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb0f 	bl	8003ddc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	3301      	adds	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d3e5      	bcc.n	800379a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 fed6 	bl	8006584 <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e2:	d13b      	bne.n	800385c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
 80037e8:	e02b      	b.n	8003842 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3340      	adds	r3, #64	; 0x40
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d115      	bne.n	800383c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003810:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003812:	2b00      	cmp	r3, #0
 8003814:	da12      	bge.n	800383c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	333f      	adds	r3, #63	; 0x3f
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fad0 	bl	8003ddc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	3301      	adds	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	429a      	cmp	r2, r3
 800384a:	d3ce      	bcc.n	80037ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800385a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f002 fe8f 	bl	8006584 <USB_ReadInterrupts>
 8003866:	4603      	mov	r3, r0
 8003868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800386c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003870:	d155      	bne.n	800391e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003872:	2301      	movs	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	e045      	b.n	8003904 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d12e      	bne.n	80038fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da2b      	bge.n	80038fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d121      	bne.n	80038fe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fa:	6053      	str	r3, [r2, #4]
            break;
 80038fc:	e007      	b.n	800390e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	3301      	adds	r3, #1
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	429a      	cmp	r2, r3
 800390c:	d3b4      	bcc.n	8003878 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800391c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f002 fe2e 	bl	8006584 <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d10a      	bne.n	800394a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f005 f8c5 	bl	8008ac4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fe18 	bl	8006584 <USB_ReadInterrupts>
 8003954:	4603      	mov	r3, r0
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d115      	bne.n	800398a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f005 f8b5 	bl	8008ae0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	e000      	b.n	800398a <HAL_PCD_IRQHandler+0x938>
      return;
 8003988:	bf00      	nop
    }
  }
}
 800398a:	3734      	adds	r7, #52	; 0x34
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}

08003990 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_PCD_SetAddress+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e013      	b.n	80039d2 <HAL_PCD_SetAddress+0x42>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fd76 	bl	80064b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	4608      	mov	r0, r1
 80039e4:	4611      	mov	r1, r2
 80039e6:	461a      	mov	r2, r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	70fb      	strb	r3, [r7, #3]
 80039ec:	460b      	mov	r3, r1
 80039ee:	803b      	strh	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da0f      	bge.n	8003a20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3338      	adds	r3, #56	; 0x38
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	705a      	strb	r2, [r3, #1]
 8003a1e:	e00f      	b.n	8003a40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	3304      	adds	r3, #4
 8003a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a4c:	883a      	ldrh	r2, [r7, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	78ba      	ldrb	r2, [r7, #2]
 8003a56:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a6a:	78bb      	ldrb	r3, [r7, #2]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d102      	bne.n	8003a76 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_EP_Open+0xaa>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e00e      	b.n	8003aa2 <HAL_PCD_EP_Open+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fdf6 	bl	8005684 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da0f      	bge.n	8003ade <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	3338      	adds	r3, #56	; 0x38
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	705a      	strb	r2, [r3, #1]
 8003adc:	e00f      	b.n	8003afe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_PCD_EP_Close+0x6e>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e00e      	b.n	8003b36 <HAL_PCD_EP_Close+0x8c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68f9      	ldr	r1, [r7, #12]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fe34 	bl	8005794 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6979      	ldr	r1, [r7, #20]
 8003bb2:	f002 f913 	bl	8005ddc <USB_EP0StartXfer>
 8003bb6:	e008      	b.n	8003bca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	f001 fec1 	bl	800594c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	3338      	adds	r3, #56	; 0x38
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d102      	bne.n	8003c2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	f002 f8c9 	bl	8005ddc <USB_EP0StartXfer>
 8003c4a:	e008      	b.n	8003c5e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	6979      	ldr	r1, [r7, #20]
 8003c5a:	f001 fe77 	bl	800594c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d901      	bls.n	8003c86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e050      	b.n	8003d28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0f      	bge.n	8003cae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3338      	adds	r3, #56	; 0x38
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	705a      	strb	r2, [r3, #1]
 8003cac:	e00d      	b.n	8003cca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_PCD_EP_SetStall+0x82>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e01e      	b.n	8003d28 <HAL_PCD_EP_SetStall+0xc0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 fb07 	bl	800630c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	b2d9      	uxtb	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f002 fcf7 	bl	800670c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d901      	bls.n	8003d4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e042      	b.n	8003dd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da0f      	bge.n	8003d76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3338      	adds	r3, #56	; 0x38
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	705a      	strb	r2, [r3, #1]
 8003d74:	e00f      	b.n	8003d96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_PCD_EP_ClrStall+0x86>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e00e      	b.n	8003dd4 <HAL_PCD_EP_ClrStall+0xa4>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 fb0f 	bl	80063e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0c      	bge.n	8003e0a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3338      	adds	r3, #56	; 0x38
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e00c      	b.n	8003e24 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 020f 	and.w	r2, r3, #15
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3304      	adds	r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f002 f92e 	bl	800608c <USB_EPStopXfer>
 8003e30:	4603      	mov	r3, r0
 8003e32:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e34:	7afb      	ldrb	r3, [r7, #11]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b08a      	sub	sp, #40	; 0x28
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3338      	adds	r3, #56	; 0x38
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d901      	bls.n	8003e76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e06c      	b.n	8003f50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d902      	bls.n	8003e92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3303      	adds	r3, #3
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e9a:	e02b      	b.n	8003ef4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d902      	bls.n	8003eb8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3303      	adds	r3, #3
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6919      	ldr	r1, [r3, #16]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f002 f982 	bl	80061e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d809      	bhi.n	8003f1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d203      	bcs.n	8003f1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1be      	bne.n	8003e9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d811      	bhi.n	8003f4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	2201      	movs	r2, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	6939      	ldr	r1, [r7, #16]
 8003f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	333c      	adds	r3, #60	; 0x3c
 8003f70:	3304      	adds	r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d17b      	bne.n	8004086 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4a61      	ldr	r2, [pc, #388]	; (8004120 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	f240 80b9 	bls.w	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80b3 	beq.w	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	e0a7      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2320      	movs	r3, #32
 8003fde:	6093      	str	r3, [r2, #8]
 8003fe0:	e098      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 8093 	bne.w	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d90f      	bls.n	8004016 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	6093      	str	r3, [r2, #8]
 8004014:	e07e      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	0159      	lsls	r1, r3, #5
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	440b      	add	r3, r1
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d114      	bne.n	8004078 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004060:	461a      	mov	r2, r3
 8004062:	2101      	movs	r1, #1
 8004064:	f002 fb52 	bl	800670c <USB_EP0_OutStart>
 8004068:	e006      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	441a      	add	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f004 fc66 	bl	8008950 <HAL_PCD_DataOutStageCallback>
 8004084:	e046      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d124      	bne.n	80040d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040aa:	6093      	str	r3, [r2, #8]
 80040ac:	e032      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	2320      	movs	r3, #32
 80040c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f004 fc3d 	bl	8008950 <HAL_PCD_DataOutStageCallback>
 80040d6:	e01d      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d114      	bne.n	8004108 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d108      	bne.n	8004108 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004100:	461a      	mov	r2, r3
 8004102:	2100      	movs	r1, #0
 8004104:	f002 fb02 	bl	800670c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f004 fc1e 	bl	8008950 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	4f54300a 	.word	0x4f54300a
 8004124:	4f54310a 	.word	0x4f54310a

08004128 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	333c      	adds	r3, #60	; 0x3c
 8004140:	3304      	adds	r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d90e      	bls.n	800417c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f004 fbd5 	bl	800892c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d90c      	bls.n	80041a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800419c:	461a      	mov	r2, r3
 800419e:	2101      	movs	r1, #1
 80041a0:	f002 fab4 	bl	800670c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	4f54300a 	.word	0x4f54300a

080041b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
 80041c0:	4613      	mov	r3, r2
 80041c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041d2:	883b      	ldrh	r3, [r7, #0]
 80041d4:	0419      	lsls	r1, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	430a      	orrs	r2, r1
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
 80041e0:	e028      	b.n	8004234 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e00d      	b.n	8004212 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	3340      	adds	r3, #64	; 0x40
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	4413      	add	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	3301      	adds	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	3b01      	subs	r3, #1
 8004218:	429a      	cmp	r2, r3
 800421a:	d3ec      	bcc.n	80041f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800421c:	883b      	ldrh	r3, [r7, #0]
 800421e:	0418      	lsls	r0, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	3b01      	subs	r3, #1
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	4302      	orrs	r2, r0
 800422c:	3340      	adds	r3, #64	; 0x40
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e267      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d075      	beq.n	8004386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d112      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b82      	ldr	r3, [pc, #520]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	4b7e      	ldr	r3, [pc, #504]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05b      	beq.n	8004384 <HAL_RCC_OscConfig+0x108>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d157      	bne.n	8004384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e242      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x74>
 80042e2:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a75      	ldr	r2, [pc, #468]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x98>
 80042fa:	4b70      	ldr	r3, [pc, #448]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6f      	ldr	r2, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6c      	ldr	r2, [pc, #432]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 8004314:	4b69      	ldr	r3, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a68      	ldr	r2, [pc, #416]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b66      	ldr	r3, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a65      	ldr	r2, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fd fa22 	bl	800177c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800433c:	f7fd fa1e 	bl	800177c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e207      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xc0>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fd fa0e 	bl	800177c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fd fa0a 	bl	800177c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1f3      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0xe8>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b44      	ldr	r3, [pc, #272]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1c7      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4937      	ldr	r1, [pc, #220]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e03a      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_RCC_OscConfig+0x244>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd f9c3 	bl	800177c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fd f9bf 	bl	800177c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1a8      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004418:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4925      	ldr	r1, [pc, #148]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <HAL_RCC_OscConfig+0x244>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd f9a2 	bl	800177c <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443c:	f7fd f99e 	bl	800177c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e187      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d036      	beq.n	80044d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_RCC_OscConfig+0x248>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd f982 	bl	800177c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447c:	f7fd f97e 	bl	800177c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e167      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x200>
 800449a:	e01b      	b.n	80044d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0x248>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fd f96b 	bl	800177c <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	e00e      	b.n	80044c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fd f967 	bl	800177c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d907      	bls.n	80044c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e150      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	42470000 	.word	0x42470000
 80044c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b88      	ldr	r3, [pc, #544]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ea      	bne.n	80044aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8097 	beq.w	8004610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b81      	ldr	r3, [pc, #516]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b7d      	ldr	r3, [pc, #500]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b7a      	ldr	r3, [pc, #488]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b77      	ldr	r3, [pc, #476]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a73      	ldr	r2, [pc, #460]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fd f927 	bl	800177c <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fd f923 	bl	800177c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e10c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x2ea>
 8004558:	4b64      	ldr	r3, [pc, #400]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4a63      	ldr	r2, [pc, #396]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
 8004564:	e01c      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x30c>
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a5e      	ldr	r2, [pc, #376]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a5b      	ldr	r2, [pc, #364]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004588:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a57      	ldr	r2, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	4a54      	ldr	r2, [pc, #336]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd f8e8 	bl	800177c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fd f8e4 	bl	800177c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0cb      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	4b49      	ldr	r3, [pc, #292]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ee      	beq.n	80045b0 <HAL_RCC_OscConfig+0x334>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fd f8d2 	bl	800177c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd f8ce 	bl	800177c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0b5      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f2:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ee      	bne.n	80045dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004604:	4b39      	ldr	r3, [pc, #228]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4a38      	ldr	r2, [pc, #224]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800460a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a1 	beq.w	800475c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800461a:	4b34      	ldr	r3, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b08      	cmp	r3, #8
 8004624:	d05c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d141      	bne.n	80046b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd f8a2 	bl	800177c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463c:	f7fd f89e 	bl	800177c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e087      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	491b      	ldr	r1, [pc, #108]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fd f877 	bl	800177c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd f873 	bl	800177c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e05c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x416>
 80046b0:	e054      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd f860 	bl	800177c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd f85c 	bl	800177c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e045      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x444>
 80046de:	e03d      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e038      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x4ec>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d028      	beq.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d121      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d11a      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800472e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d111      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d107      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cc      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b68      	ldr	r3, [pc, #416]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d90c      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b65      	ldr	r3, [pc, #404]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d044      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d119      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d003      	beq.n	800482a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b3f      	ldr	r3, [pc, #252]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e067      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4934      	ldr	r1, [pc, #208]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fc ff8e 	bl	800177c <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fc ff8a 	bl	800177c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20c      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f821 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc feee 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00
 8004928:	40023800 	.word	0x40023800
 800492c:	08009e54 	.word	0x08009e54
 8004930:	20000078 	.word	0x20000078
 8004934:	2000007c 	.word	0x2000007c

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b090      	sub	sp, #64	; 0x40
 800493e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
 8004944:	2300      	movs	r3, #0
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	2300      	movs	r3, #0
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004950:	4b59      	ldr	r3, [pc, #356]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d00d      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x40>
 800495c:	2b08      	cmp	r3, #8
 800495e:	f200 80a1 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x34>
 8004966:	2b04      	cmp	r3, #4
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x3a>
 800496a:	e09b      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_GetSysClockFreq+0x184>)
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004970:	e09b      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004972:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004976:	e098      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004982:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d028      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498e:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	2200      	movs	r2, #0
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	627a      	str	r2, [r7, #36]	; 0x24
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049a0:	2100      	movs	r1, #0
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049a4:	fb03 f201 	mul.w	r2, r3, r1
 80049a8:	2300      	movs	r3, #0
 80049aa:	fb00 f303 	mul.w	r3, r0, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	4a43      	ldr	r2, [pc, #268]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049b2:	fba0 1202 	umull	r1, r2, r0, r2
 80049b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b8:	460a      	mov	r2, r1
 80049ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80049bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049be:	4413      	add	r3, r2
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	2200      	movs	r2, #0
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	61fa      	str	r2, [r7, #28]
 80049ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049d2:	f7fb fc55 	bl	8000280 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4613      	mov	r3, r2
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049de:	e053      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e0:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	2200      	movs	r2, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	617a      	str	r2, [r7, #20]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049f2:	f04f 0b00 	mov.w	fp, #0
 80049f6:	4652      	mov	r2, sl
 80049f8:	465b      	mov	r3, fp
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	0159      	lsls	r1, r3, #5
 8004a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a08:	0150      	lsls	r0, r2, #5
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a12:	eb63 090b 	sbc.w	r9, r3, fp
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a2a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a2e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	00eb      	lsls	r3, r5, #3
 8004a3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a40:	00e2      	lsls	r2, r4, #3
 8004a42:	4614      	mov	r4, r2
 8004a44:	461d      	mov	r5, r3
 8004a46:	eb14 030a 	adds.w	r3, r4, sl
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	eb45 030b 	adc.w	r3, r5, fp
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	028b      	lsls	r3, r1, #10
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a68:	4621      	mov	r1, r4
 8004a6a:	028a      	lsls	r2, r1, #10
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	2200      	movs	r2, #0
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	60fa      	str	r2, [r7, #12]
 8004a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a7c:	f7fb fc00 	bl	8000280 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetSysClockFreq+0x184>)
 8004aa6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3740      	adds	r7, #64	; 0x40
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	017d7840 	.word	0x017d7840

08004ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000078 	.word	0x20000078

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08009e64 	.word	0x08009e64

08004b04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e097      	b.n	8004c48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc fcb3 	bl	8001498 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b48:	f023 0307 	bic.w	r3, r3, #7
 8004b4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 f907 	bl	8004d6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	4313      	orrs	r3, r2
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ba4:	f023 030c 	bic.w	r3, r3, #12
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	011a      	lsls	r2, r3, #4
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	031b      	lsls	r3, r3, #12
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d110      	bne.n	8004ca2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d102      	bne.n	8004c8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c86:	7b7b      	ldrb	r3, [r7, #13]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d001      	beq.n	8004c90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e069      	b.n	8004d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca0:	e031      	b.n	8004d06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d110      	bne.n	8004cca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cae:	7b3b      	ldrb	r3, [r7, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e055      	b.n	8004d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc8:	e01d      	b.n	8004d06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d108      	bne.n	8004ce2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d105      	bne.n	8004ce2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	7b7b      	ldrb	r3, [r7, #13]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cdc:	7b3b      	ldrb	r3, [r7, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e03e      	b.n	8004d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_TIM_Encoder_Start+0xc4>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d008      	beq.n	8004d24 <HAL_TIM_Encoder_Start+0xd4>
 8004d12:	e00f      	b.n	8004d34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 f8a5 	bl	8004e6c <TIM_CCxChannelCmd>
      break;
 8004d22:	e016      	b.n	8004d52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f89d 	bl	8004e6c <TIM_CCxChannelCmd>
      break;
 8004d32:	e00e      	b.n	8004d52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f895 	bl	8004e6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2201      	movs	r2, #1
 8004d48:	2104      	movs	r1, #4
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f88e 	bl	8004e6c <TIM_CCxChannelCmd>
      break;
 8004d50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a34      	ldr	r2, [pc, #208]	; (8004e50 <TIM_Base_SetConfig+0xe4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8a:	d00b      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a31      	ldr	r2, [pc, #196]	; (8004e54 <TIM_Base_SetConfig+0xe8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <TIM_Base_SetConfig+0xec>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <TIM_Base_SetConfig+0xf0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <TIM_Base_SetConfig+0xe4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d017      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <TIM_Base_SetConfig+0xe8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <TIM_Base_SetConfig+0xec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a20      	ldr	r2, [pc, #128]	; (8004e5c <TIM_Base_SetConfig+0xf0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <TIM_Base_SetConfig+0xf4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <TIM_Base_SetConfig+0xf8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <TIM_Base_SetConfig+0xfc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d108      	bne.n	8004e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <TIM_Base_SetConfig+0xe4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]
}
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800

08004e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2201      	movs	r2, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	401a      	ands	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e050      	b.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d013      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10c      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40014000 	.word	0x40014000

08004f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f94:	b084      	sub	sp, #16
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	f107 001c 	add.w	r0, r7, #28
 8004fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d122      	bne.n	8004ff2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d105      	bne.n	8004fe6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 fbee 	bl	80067c8 <USB_CoreReset>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e01a      	b.n	8005028 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 fbe2 	bl	80067c8 <USB_CoreReset>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
 800501a:	e005      	b.n	8005028 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10b      	bne.n	8005046 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f043 0206 	orr.w	r2, r3, #6
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005052:	b004      	add	sp, #16
 8005054:	4770      	bx	lr
	...

08005058 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d165      	bne.n	8005138 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a41      	ldr	r2, [pc, #260]	; (8005174 <USB_SetTurnaroundTime+0x11c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d906      	bls.n	8005082 <USB_SetTurnaroundTime+0x2a>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4a40      	ldr	r2, [pc, #256]	; (8005178 <USB_SetTurnaroundTime+0x120>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d202      	bcs.n	8005082 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800507c:	230f      	movs	r3, #15
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e062      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <USB_SetTurnaroundTime+0x120>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d306      	bcc.n	8005098 <USB_SetTurnaroundTime+0x40>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4a3b      	ldr	r2, [pc, #236]	; (800517c <USB_SetTurnaroundTime+0x124>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d202      	bcs.n	8005098 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005092:	230e      	movs	r3, #14
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e057      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a38      	ldr	r2, [pc, #224]	; (800517c <USB_SetTurnaroundTime+0x124>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d306      	bcc.n	80050ae <USB_SetTurnaroundTime+0x56>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4a37      	ldr	r2, [pc, #220]	; (8005180 <USB_SetTurnaroundTime+0x128>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d202      	bcs.n	80050ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050a8:	230d      	movs	r3, #13
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e04c      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a33      	ldr	r2, [pc, #204]	; (8005180 <USB_SetTurnaroundTime+0x128>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d306      	bcc.n	80050c4 <USB_SetTurnaroundTime+0x6c>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a32      	ldr	r2, [pc, #200]	; (8005184 <USB_SetTurnaroundTime+0x12c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d802      	bhi.n	80050c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050be:	230c      	movs	r3, #12
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e041      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <USB_SetTurnaroundTime+0x12c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d906      	bls.n	80050da <USB_SetTurnaroundTime+0x82>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <USB_SetTurnaroundTime+0x130>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d802      	bhi.n	80050da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050d4:	230b      	movs	r3, #11
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e036      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <USB_SetTurnaroundTime+0x130>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d906      	bls.n	80050f0 <USB_SetTurnaroundTime+0x98>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a29      	ldr	r2, [pc, #164]	; (800518c <USB_SetTurnaroundTime+0x134>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d802      	bhi.n	80050f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050ea:	230a      	movs	r3, #10
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e02b      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <USB_SetTurnaroundTime+0x134>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d906      	bls.n	8005106 <USB_SetTurnaroundTime+0xae>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a25      	ldr	r2, [pc, #148]	; (8005190 <USB_SetTurnaroundTime+0x138>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d202      	bcs.n	8005106 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005100:	2309      	movs	r3, #9
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e020      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a21      	ldr	r2, [pc, #132]	; (8005190 <USB_SetTurnaroundTime+0x138>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d306      	bcc.n	800511c <USB_SetTurnaroundTime+0xc4>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4a20      	ldr	r2, [pc, #128]	; (8005194 <USB_SetTurnaroundTime+0x13c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d802      	bhi.n	800511c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005116:	2308      	movs	r3, #8
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e015      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <USB_SetTurnaroundTime+0x13c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d906      	bls.n	8005132 <USB_SetTurnaroundTime+0xda>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <USB_SetTurnaroundTime+0x140>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d202      	bcs.n	8005132 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800512c:	2307      	movs	r3, #7
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e00a      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005132:	2306      	movs	r3, #6
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e007      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800513e:	2309      	movs	r3, #9
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e001      	b.n	8005148 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005144:	2309      	movs	r3, #9
 8005146:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	029b      	lsls	r3, r3, #10
 800515c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	00d8acbf 	.word	0x00d8acbf
 8005178:	00e4e1c0 	.word	0x00e4e1c0
 800517c:	00f42400 	.word	0x00f42400
 8005180:	01067380 	.word	0x01067380
 8005184:	011a499f 	.word	0x011a499f
 8005188:	01312cff 	.word	0x01312cff
 800518c:	014ca43f 	.word	0x014ca43f
 8005190:	016e3600 	.word	0x016e3600
 8005194:	01a6ab1f 	.word	0x01a6ab1f
 8005198:	01e84800 	.word	0x01e84800

0800519c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f043 0201 	orr.w	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d115      	bne.n	800522e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800520e:	2001      	movs	r0, #1
 8005210:	f7fc fac0 	bl	8001794 <HAL_Delay>
      ms++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 fa45 	bl	80066aa <USB_GetMode>
 8005220:	4603      	mov	r3, r0
 8005222:	2b01      	cmp	r3, #1
 8005224:	d01e      	beq.n	8005264 <USB_SetCurrentMode+0x84>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b31      	cmp	r3, #49	; 0x31
 800522a:	d9f0      	bls.n	800520e <USB_SetCurrentMode+0x2e>
 800522c:	e01a      	b.n	8005264 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d115      	bne.n	8005260 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005240:	2001      	movs	r0, #1
 8005242:	f7fc faa7 	bl	8001794 <HAL_Delay>
      ms++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 fa2c 	bl	80066aa <USB_GetMode>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <USB_SetCurrentMode+0x84>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b31      	cmp	r3, #49	; 0x31
 800525c:	d9f0      	bls.n	8005240 <USB_SetCurrentMode+0x60>
 800525e:	e001      	b.n	8005264 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e005      	b.n	8005270 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b32      	cmp	r3, #50	; 0x32
 8005268:	d101      	bne.n	800526e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005278:	b084      	sub	sp, #16
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e009      	b.n	80052ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3340      	adds	r3, #64	; 0x40
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	2200      	movs	r2, #0
 80052a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3301      	adds	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0e      	cmp	r3, #14
 80052b0:	d9f2      	bls.n	8005298 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11c      	bne.n	80052f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c6:	f043 0302 	orr.w	r3, r3, #2
 80052ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38
 80052f0:	e00b      	b.n	800530a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	4619      	mov	r1, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	461a      	mov	r2, r3
 8005326:	680b      	ldr	r3, [r1, #0]
 8005328:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10c      	bne.n	800534a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005336:	2100      	movs	r1, #0
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f965 	bl	8005608 <USB_SetDevSpeed>
 800533e:	e008      	b.n	8005352 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005340:	2101      	movs	r1, #1
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f960 	bl	8005608 <USB_SetDevSpeed>
 8005348:	e003      	b.n	8005352 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800534a:	2103      	movs	r1, #3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f95b 	bl	8005608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005352:	2110      	movs	r1, #16
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8f3 	bl	8005540 <USB_FlushTxFifo>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f91f 	bl	80055a8 <USB_FlushRxFifo>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	461a      	mov	r2, r3
 800537c:	2300      	movs	r3, #0
 800537e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	461a      	mov	r2, r3
 8005388:	2300      	movs	r3, #0
 800538a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	461a      	mov	r2, r3
 8005394:	2300      	movs	r3, #0
 8005396:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e043      	b.n	8005426 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053b4:	d118      	bne.n	80053e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	461a      	mov	r2, r3
 80053ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e013      	b.n	80053fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	461a      	mov	r2, r3
 80053e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e008      	b.n	80053fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	461a      	mov	r2, r3
 8005408:	2300      	movs	r3, #0
 800540a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	461a      	mov	r2, r3
 800541a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800541e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	3301      	adds	r3, #1
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	429a      	cmp	r2, r3
 800542c:	d3b7      	bcc.n	800539e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e043      	b.n	80054bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544a:	d118      	bne.n	800547e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e013      	b.n	8005490 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	461a      	mov	r2, r3
 8005476:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e008      	b.n	8005490 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	461a      	mov	r2, r3
 80054b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d3b7      	bcc.n	8005434 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f043 0210 	orr.w	r2, r3, #16
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <USB_DevInit+0x2c4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f043 0208 	orr.w	r2, r3, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005524:	f043 0304 	orr.w	r3, r3, #4
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005538:	b004      	add	sp, #16
 800553a:	4770      	bx	lr
 800553c:	803c3800 	.word	0x803c3800

08005540 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <USB_FlushTxFifo+0x64>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e01b      	b.n	8005598 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	daf2      	bge.n	800554e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	019b      	lsls	r3, r3, #6
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <USB_FlushTxFifo+0x64>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e006      	b.n	8005598 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b20      	cmp	r3, #32
 8005594:	d0f0      	beq.n	8005578 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	00030d40 	.word	0x00030d40

080055a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <USB_FlushRxFifo+0x5c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e018      	b.n	80055f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	daf2      	bge.n	80055b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2210      	movs	r2, #16
 80055d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3301      	adds	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a08      	ldr	r2, [pc, #32]	; (8005604 <USB_FlushRxFifo+0x5c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e006      	b.n	80055f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d0f0      	beq.n	80055d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	00030d40 	.word	0x00030d40

08005608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b087      	sub	sp, #28
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0306 	and.w	r3, r3, #6
 8005652:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800565a:	2300      	movs	r3, #0
 800565c:	75fb      	strb	r3, [r7, #23]
 800565e:	e00a      	b.n	8005676 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d002      	beq.n	800566c <USB_GetDevSpeed+0x32>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b06      	cmp	r3, #6
 800566a:	d102      	bne.n	8005672 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800566c:	2302      	movs	r3, #2
 800566e:	75fb      	strb	r3, [r7, #23]
 8005670:	e001      	b.n	8005676 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005672:	230f      	movs	r3, #15
 8005674:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d13a      	bne.n	8005716 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	2101      	movs	r1, #1
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056be:	4313      	orrs	r3, r2
 80056c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d155      	bne.n	8005784 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	791b      	ldrb	r3, [r3, #4]
 80056f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	059b      	lsls	r3, r3, #22
 80056fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056fc:	4313      	orrs	r3, r2
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e036      	b.n	8005784 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005734:	4313      	orrs	r3, r2
 8005736:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11a      	bne.n	8005784 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800576a:	430b      	orrs	r3, r1
 800576c:	4313      	orrs	r3, r2
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d161      	bne.n	8005874 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c6:	d11f      	bne.n	8005808 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	2101      	movs	r1, #1
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	b29b      	uxth	r3, r3
 8005820:	43db      	mvns	r3, r3
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005828:	4013      	ands	r3, r2
 800582a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	b29b      	uxth	r3, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584c:	4013      	ands	r3, r2
 800584e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	0159      	lsls	r1, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	440b      	add	r3, r1
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	4619      	mov	r1, r3
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <USB_DeactivateEndpoint+0x1b0>)
 800586e:	4013      	ands	r3, r2
 8005870:	600b      	str	r3, [r1, #0]
 8005872:	e060      	b.n	8005936 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588a:	d11f      	bne.n	80058cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	43db      	mvns	r3, r3
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ec:	4013      	ands	r3, r2
 80058ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	43db      	mvns	r3, r3
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005910:	4013      	ands	r3, r2
 8005912:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	0159      	lsls	r1, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	440b      	add	r3, r1
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	4619      	mov	r1, r3
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <USB_DeactivateEndpoint+0x1b4>)
 8005932:	4013      	ands	r3, r2
 8005934:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	ec337800 	.word	0xec337800
 8005948:	eff37800 	.word	0xeff37800

0800594c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b01      	cmp	r3, #1
 800596a:	f040 815c 	bne.w	8005c26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d132      	bne.n	80059dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	0cdb      	lsrs	r3, r3, #19
 80059d6:	04db      	lsls	r3, r3, #19
 80059d8:	6113      	str	r3, [r2, #16]
 80059da:	e074      	b.n	8005ac6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	0cdb      	lsrs	r3, r3, #19
 80059f8:	04db      	lsls	r3, r3, #19
 80059fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6999      	ldr	r1, [r3, #24]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	440b      	add	r3, r1
 8005a38:	1e59      	subs	r1, r3, #1
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a42:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a44:	4b9d      	ldr	r3, [pc, #628]	; (8005cbc <USB_EPStartXfer+0x370>)
 8005a46:	400b      	ands	r3, r1
 8005a48:	69b9      	ldr	r1, [r7, #24]
 8005a4a:	0148      	lsls	r0, r1, #5
 8005a4c:	69f9      	ldr	r1, [r7, #28]
 8005a4e:	4401      	add	r1, r0
 8005a50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	69b9      	ldr	r1, [r7, #24]
 8005a70:	0148      	lsls	r0, r1, #5
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	4401      	add	r1, r0
 8005a76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d11f      	bne.n	8005ac6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005aa4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ac4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d14b      	bne.n	8005b64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d128      	bne.n	8005b42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d110      	bne.n	8005b22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e00f      	b.n	8005b42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e133      	b.n	8005dcc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	791b      	ldrb	r3, [r3, #4]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d015      	beq.n	8005bb8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 811b 	beq.w	8005dcc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	69f9      	ldr	r1, [r7, #28]
 8005bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	634b      	str	r3, [r1, #52]	; 0x34
 8005bb6:	e109      	b.n	8005dcc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d110      	bne.n	8005bea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e00f      	b.n	8005c0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6919      	ldr	r1, [r3, #16]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	b298      	uxth	r0, r3
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fade 	bl	80061e0 <USB_WritePacket>
 8005c24:	e0d2      	b.n	8005dcc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c40:	0cdb      	lsrs	r3, r3, #19
 8005c42:	04db      	lsls	r3, r3, #19
 8005c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d126      	bne.n	8005cc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c88:	69b9      	ldr	r1, [r7, #24]
 8005c8a:	0148      	lsls	r0, r1, #5
 8005c8c:	69f9      	ldr	r1, [r7, #28]
 8005c8e:	4401      	add	r1, r0
 8005c90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb6:	6113      	str	r3, [r2, #16]
 8005cb8:	e03a      	b.n	8005d30 <USB_EPStartXfer+0x3e4>
 8005cba:	bf00      	nop
 8005cbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	1e5a      	subs	r2, r3, #1
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	8afa      	ldrh	r2, [r7, #22]
 8005cdc:	fb03 f202 	mul.w	r2, r3, r2
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	8afb      	ldrh	r3, [r7, #22]
 8005cf4:	04d9      	lsls	r1, r3, #19
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <USB_EPStartXfer+0x48c>)
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	69b9      	ldr	r1, [r7, #24]
 8005cfc:	0148      	lsls	r0, r1, #5
 8005cfe:	69f9      	ldr	r1, [r7, #28]
 8005d00:	4401      	add	r1, r0
 8005d02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d06:	4313      	orrs	r3, r2
 8005d08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	0148      	lsls	r0, r1, #5
 8005d24:	69f9      	ldr	r1, [r7, #28]
 8005d26:	4401      	add	r1, r0
 8005d28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d10d      	bne.n	8005d52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6919      	ldr	r1, [r3, #16]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	460a      	mov	r2, r1
 8005d50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	791b      	ldrb	r3, [r3, #4]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d128      	bne.n	8005dac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d110      	bne.n	8005d8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e00f      	b.n	8005dac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005daa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	1ff80000 	.word	0x1ff80000

08005ddc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	f040 80ce 	bne.w	8005f9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d132      	bne.n	8005e6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	0cdb      	lsrs	r3, r3, #19
 8005e66:	04db      	lsls	r3, r3, #19
 8005e68:	6113      	str	r3, [r2, #16]
 8005e6a:	e04e      	b.n	8005f0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e86:	0cdb      	lsrs	r3, r3, #19
 8005e88:	04db      	lsls	r3, r3, #19
 8005e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d903      	bls.n	8005ec4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efa:	6939      	ldr	r1, [r7, #16]
 8005efc:	0148      	lsls	r0, r1, #5
 8005efe:	6979      	ldr	r1, [r7, #20]
 8005f00:	4401      	add	r1, r0
 8005f02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f06:	4313      	orrs	r3, r2
 8005f08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d11e      	bne.n	8005f4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	461a      	mov	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e097      	b.n	800607e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8083 	beq.w	800607e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f94:	4313      	orrs	r3, r2
 8005f96:	634b      	str	r3, [r1, #52]	; 0x34
 8005f98:	e071      	b.n	800607e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	0cdb      	lsrs	r3, r3, #19
 8005fb6:	04db      	lsls	r3, r3, #19
 8005fb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fdc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602c:	6939      	ldr	r1, [r7, #16]
 800602e:	0148      	lsls	r0, r1, #5
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	4401      	add	r1, r0
 8006034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006038:	4313      	orrs	r3, r2
 800603a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d10d      	bne.n	800605e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6919      	ldr	r1, [r3, #16]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	460a      	mov	r2, r1
 800605c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006078:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800607c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d14a      	bne.n	8006140 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c2:	f040 8086 	bne.w	80061d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800610c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f242 7210 	movw	r2, #10000	; 0x2710
 800611a:	4293      	cmp	r3, r2
 800611c:	d902      	bls.n	8006124 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	75fb      	strb	r3, [r7, #23]
          break;
 8006122:	e056      	b.n	80061d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d0e7      	beq.n	800610e <USB_EPStopXfer+0x82>
 800613e:	e048      	b.n	80061d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006158:	d13b      	bne.n	80061d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006178:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800617c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	7812      	ldrb	r2, [r2, #0]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d902      	bls.n	80061b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	75fb      	strb	r3, [r7, #23]
          break;
 80061b6:	e00c      	b.n	80061d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d0:	d0e7      	beq.n	80061a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4611      	mov	r1, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	460b      	mov	r3, r1
 80061f0:	71fb      	strb	r3, [r7, #7]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d123      	bne.n	800624e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006206:	88bb      	ldrh	r3, [r7, #4]
 8006208:	3303      	adds	r3, #3
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800620e:	2300      	movs	r3, #0
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	e018      	b.n	8006246 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	031a      	lsls	r2, r3, #12
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4413      	add	r3, r2
 800621c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006220:	461a      	mov	r2, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3301      	adds	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	3301      	adds	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3301      	adds	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	3301      	adds	r3, #1
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	429a      	cmp	r2, r3
 800624c:	d3e2      	bcc.n	8006214 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3724      	adds	r7, #36	; 0x24
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800625c:	b480      	push	{r7}
 800625e:	b08b      	sub	sp, #44	; 0x2c
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	089b      	lsrs	r3, r3, #2
 8006276:	b29b      	uxth	r3, r3
 8006278:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	623b      	str	r3, [r7, #32]
 8006286:	e014      	b.n	80062b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	601a      	str	r2, [r3, #0]
    pDest++;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	3301      	adds	r3, #1
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	3301      	adds	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	3301      	adds	r3, #1
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	3301      	adds	r3, #1
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	3301      	adds	r3, #1
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d3e6      	bcc.n	8006288 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062ba:	8bfb      	ldrh	r3, [r7, #30]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01e      	beq.n	80062fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	461a      	mov	r2, r3
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	701a      	strb	r2, [r3, #0]
      i++;
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	3301      	adds	r3, #1
 80062ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	3301      	adds	r3, #1
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062f2:	8bfb      	ldrh	r3, [r7, #30]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062f8:	8bfb      	ldrh	r3, [r7, #30]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1ea      	bne.n	80062d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006300:	4618      	mov	r0, r3
 8006302:	372c      	adds	r7, #44	; 0x2c
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d12c      	bne.n	8006382 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	db12      	blt.n	8006360 <USB_EPSetStall+0x54>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00f      	beq.n	8006360 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800635e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e02b      	b.n	80063da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	db12      	blt.n	80063ba <USB_EPSetStall+0xae>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00f      	beq.n	80063ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d128      	bne.n	8006456 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006422:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	791b      	ldrb	r3, [r3, #4]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d003      	beq.n	8006434 <USB_EPClearStall+0x4c>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	791b      	ldrb	r3, [r3, #4]
 8006430:	2b02      	cmp	r3, #2
 8006432:	d138      	bne.n	80064a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	e027      	b.n	80064a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	440a      	add	r2, r1
 800646c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006470:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006474:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d003      	beq.n	8006486 <USB_EPClearStall+0x9e>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	791b      	ldrb	r3, [r3, #4]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d10f      	bne.n	80064a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ee:	4313      	orrs	r3, r2
 80064f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652e:	f023 0302 	bic.w	r3, r3, #2
 8006532:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800655c:	f023 0303 	bic.w	r3, r3, #3
 8006560:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800659c:	68fb      	ldr	r3, [r7, #12]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	0c1b      	lsrs	r3, r3, #16
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	b29b      	uxth	r3, r3
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4013      	ands	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006640:	68bb      	ldr	r3, [r7, #8]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800664e:	b480      	push	{r7}
 8006650:	b087      	sub	sp, #28
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	fa22 f303 	lsr.w	r3, r2, r3
 800667e:	01db      	lsls	r3, r3, #7
 8006680:	b2db      	uxtb	r3, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4013      	ands	r3, r2
 800669a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800669c:	68bb      	ldr	r3, [r7, #8]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0301 	and.w	r3, r3, #1
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066e4:	f023 0307 	bic.w	r3, r3, #7
 80066e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	460b      	mov	r3, r1
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	333c      	adds	r3, #60	; 0x3c
 8006722:	3304      	adds	r3, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <USB_EP0_OutStart+0xb8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d90a      	bls.n	8006746 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800673c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006740:	d101      	bne.n	8006746 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e037      	b.n	80067b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	461a      	mov	r2, r3
 800674e:	2300      	movs	r3, #0
 8006750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006774:	f043 0318 	orr.w	r3, r3, #24
 8006778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006788:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800678c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10f      	bne.n	80067b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679a:	461a      	mov	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	4f54300a 	.word	0x4f54300a

080067c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a13      	ldr	r2, [pc, #76]	; (800682c <USB_CoreReset+0x64>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e01b      	b.n	800681e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	daf2      	bge.n	80067d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f043 0201 	orr.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a09      	ldr	r2, [pc, #36]	; (800682c <USB_CoreReset+0x64>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e006      	b.n	800681e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	d0f0      	beq.n	80067fe <USB_CoreReset+0x36>

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	00030d40 	.word	0x00030d40

08006830 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800683c:	2044      	movs	r0, #68	; 0x44
 800683e:	f002 fad5 	bl	8008dec <USBD_static_malloc>
 8006842:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32b0      	adds	r2, #176	; 0xb0
 8006854:	2100      	movs	r1, #0
 8006856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800685a:	2302      	movs	r3, #2
 800685c:	e08b      	b.n	8006976 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	32b0      	adds	r2, #176	; 0xb0
 8006868:	68f9      	ldr	r1, [r7, #12]
 800686a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	32b0      	adds	r2, #176	; 0xb0
 8006878:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7c1b      	ldrb	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11b      	bne.n	80068c2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800688a:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <USBD_CUSTOM_HID_Init+0x150>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f003 020f 	and.w	r2, r3, #15
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	3326      	adds	r3, #38	; 0x26
 80068a0:	2205      	movs	r2, #5
 80068a2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80068a4:	4b37      	ldr	r3, [pc, #220]	; (8006984 <USBD_CUSTOM_HID_Init+0x154>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 020f 	and.w	r2, r3, #15
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80068bc:	2205      	movs	r2, #5
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e01a      	b.n	80068f8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068c2:	4b2f      	ldr	r3, [pc, #188]	; (8006980 <USBD_CUSTOM_HID_Init+0x150>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	f003 020f 	and.w	r2, r3, #15
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	3326      	adds	r3, #38	; 0x26
 80068d8:	2205      	movs	r2, #5
 80068da:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068dc:	4b29      	ldr	r3, [pc, #164]	; (8006984 <USBD_CUSTOM_HID_Init+0x154>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	f003 020f 	and.w	r2, r3, #15
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80068f4:	2205      	movs	r2, #5
 80068f6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80068f8:	4b21      	ldr	r3, [pc, #132]	; (8006980 <USBD_CUSTOM_HID_Init+0x150>)
 80068fa:	7819      	ldrb	r1, [r3, #0]
 80068fc:	2302      	movs	r3, #2
 80068fe:	2203      	movs	r2, #3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f002 f962 	bl	8008bca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006906:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <USBD_CUSTOM_HID_Init+0x150>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	f003 020f 	and.w	r2, r3, #15
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	3324      	adds	r3, #36	; 0x24
 800691c:	2201      	movs	r2, #1
 800691e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006920:	4b18      	ldr	r3, [pc, #96]	; (8006984 <USBD_CUSTOM_HID_Init+0x154>)
 8006922:	7819      	ldrb	r1, [r3, #0]
 8006924:	2302      	movs	r3, #2
 8006926:	2203      	movs	r2, #3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f002 f94e 	bl	8008bca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <USBD_CUSTOM_HID_Init+0x154>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006946:	2201      	movs	r2, #1
 8006948:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	33b0      	adds	r3, #176	; 0xb0
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <USBD_CUSTOM_HID_Init+0x154>)
 8006968:	7819      	ldrb	r1, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	2330      	movs	r3, #48	; 0x30
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f002 fa1a 	bl	8008da8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	200000fe 	.word	0x200000fe
 8006984:	200000ff 	.word	0x200000ff

08006988 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006994:	4b37      	ldr	r3, [pc, #220]	; (8006a74 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f002 f93b 	bl	8008c16 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80069a0:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	3324      	adds	r3, #36	; 0x24
 80069b6:	2200      	movs	r2, #0
 80069b8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80069ba:	4b2e      	ldr	r3, [pc, #184]	; (8006a74 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	3326      	adds	r3, #38	; 0x26
 80069d0:	2200      	movs	r2, #0
 80069d2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80069d4:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f002 f91b 	bl	8008c16 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80069e0:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 020f 	and.w	r2, r3, #15
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069f8:	2200      	movs	r2, #0
 80069fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80069fc:	4b1e      	ldr	r3, [pc, #120]	; (8006a78 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 020f 	and.w	r2, r3, #15
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006a14:	2200      	movs	r2, #0
 8006a16:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	32b0      	adds	r2, #176	; 0xb0
 8006a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01f      	beq.n	8006a6a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	33b0      	adds	r3, #176	; 0xb0
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32b0      	adds	r2, #176	; 0xb0
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f002 f9db 	bl	8008e08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	32b0      	adds	r2, #176	; 0xb0
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	200000fe 	.word	0x200000fe
 8006a78:	200000ff 	.word	0x200000ff

08006a7c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	32b0      	adds	r2, #176	; 0xb0
 8006a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a94:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e0f8      	b.n	8006ca2 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d056      	beq.n	8006b6a <USBD_CUSTOM_HID_Setup+0xee>
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	f040 80e8 	bne.w	8006c92 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	3b02      	subs	r3, #2
 8006ac8:	2b09      	cmp	r3, #9
 8006aca:	d846      	bhi.n	8006b5a <USBD_CUSTOM_HID_Setup+0xde>
 8006acc:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <USBD_CUSTOM_HID_Setup+0x58>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006b2d 	.word	0x08006b2d
 8006ad8:	08006b0b 	.word	0x08006b0b
 8006adc:	08006b5b 	.word	0x08006b5b
 8006ae0:	08006b5b 	.word	0x08006b5b
 8006ae4:	08006b5b 	.word	0x08006b5b
 8006ae8:	08006b5b 	.word	0x08006b5b
 8006aec:	08006b5b 	.word	0x08006b5b
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b1b 	.word	0x08006b1b
 8006af8:	08006afd 	.word	0x08006afd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	885b      	ldrh	r3, [r3, #2]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
          break;
 8006b08:	e02e      	b.n	8006b68 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3330      	adds	r3, #48	; 0x30
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fcce 	bl	80084b4 <USBD_CtlSendData>
          break;
 8006b18:	e026      	b.n	8006b68 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	885b      	ldrh	r3, [r3, #2]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34
          break;
 8006b2a:	e01d      	b.n	8006b68 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	3334      	adds	r3, #52	; 0x34
 8006b30:	2201      	movs	r2, #1
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fcbd 	bl	80084b4 <USBD_CtlSendData>
          break;
 8006b3a:	e015      	b.n	8006b68 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	63da      	str	r2, [r3, #60]	; 0x3c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b42:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	88db      	ldrh	r3, [r3, #6]
 8006b48:	2b30      	cmp	r3, #48	; 0x30
 8006b4a:	bf28      	it	cs
 8006b4c:	2330      	movcs	r3, #48	; 0x30
 8006b4e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b50:	461a      	mov	r2, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fcda 	bl	800850c <USBD_CtlPrepareRx>
          break;
 8006b58:	e006      	b.n	8006b68 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fc38 	bl	80083d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b62:	2303      	movs	r3, #3
 8006b64:	75fb      	strb	r3, [r7, #23]
          break;
 8006b66:	bf00      	nop
      }
      break;
 8006b68:	e09a      	b.n	8006ca0 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b0b      	cmp	r3, #11
 8006b70:	f200 8086 	bhi.w	8006c80 <USBD_CUSTOM_HID_Setup+0x204>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <USBD_CUSTOM_HID_Setup+0x100>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006c8f 	.word	0x08006c8f
 8006b84:	08006c81 	.word	0x08006c81
 8006b88:	08006c81 	.word	0x08006c81
 8006b8c:	08006c81 	.word	0x08006c81
 8006b90:	08006c81 	.word	0x08006c81
 8006b94:	08006bd7 	.word	0x08006bd7
 8006b98:	08006c81 	.word	0x08006c81
 8006b9c:	08006c81 	.word	0x08006c81
 8006ba0:	08006c81 	.word	0x08006c81
 8006ba4:	08006c2f 	.word	0x08006c2f
 8006ba8:	08006c59 	.word	0x08006c59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d107      	bne.n	8006bc8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bb8:	f107 030e 	add.w	r3, r7, #14
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fc77 	bl	80084b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bc6:	e063      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fc01 	bl	80083d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	75fb      	strb	r3, [r7, #23]
          break;
 8006bd4:	e05c      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b22      	cmp	r3, #34	; 0x22
 8006be0:	d110      	bne.n	8006c04 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	88db      	ldrh	r3, [r3, #6]
 8006be6:	2b95      	cmp	r3, #149	; 0x95
 8006be8:	bf28      	it	cs
 8006bea:	2395      	movcs	r3, #149	; 0x95
 8006bec:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	33b0      	adds	r3, #176	; 0xb0
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e00d      	b.n	8006c20 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	885b      	ldrh	r3, [r3, #2]
 8006c08:	0a1b      	lsrs	r3, r3, #8
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b21      	cmp	r3, #33	; 0x21
 8006c0e:	d107      	bne.n	8006c20 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006c10:	4b26      	ldr	r3, [pc, #152]	; (8006cac <USBD_CUSTOM_HID_Setup+0x230>)
 8006c12:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	88db      	ldrh	r3, [r3, #6]
 8006c18:	2b09      	cmp	r3, #9
 8006c1a:	bf28      	it	cs
 8006c1c:	2309      	movcs	r3, #9
 8006c1e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c20:	8bfb      	ldrh	r3, [r7, #30]
 8006c22:	461a      	mov	r2, r3
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fc44 	bl	80084b4 <USBD_CtlSendData>
          break;
 8006c2c:	e030      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d107      	bne.n	8006c4a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3338      	adds	r3, #56	; 0x38
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fc36 	bl	80084b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c48:	e022      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fbc0 	bl	80083d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	75fb      	strb	r3, [r7, #23]
          break;
 8006c56:	e01b      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d106      	bne.n	8006c72 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c70:	e00e      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fbac 	bl	80083d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c7e:	e007      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fba5 	bl	80083d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8c:	e000      	b.n	8006c90 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006c8e:	bf00      	nop
      }
      break;
 8006c90:	e006      	b.n	8006ca0 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fb9c 	bl	80083d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9e:	bf00      	nop
  }
  return (uint8_t)ret;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200000e8 	.word	0x200000e8

08006cb0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	32b0      	adds	r2, #176	; 0xb0
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e021      	b.n	8006d18 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	32b0      	adds	r2, #176	; 0xb0
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d112      	bne.n	8006d16 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <USBD_CUSTOM_HID_SendReport+0x70>)
 8006d04:	7819      	ldrb	r1, [r3, #0]
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f002 f82b 	bl	8008d66 <USBD_LL_Transmit>
 8006d10:	e001      	b.n	8006d16 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	200000fe 	.word	0x200000fe

08006d24 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d2c:	2181      	movs	r1, #129	; 0x81
 8006d2e:	4815      	ldr	r0, [pc, #84]	; (8006d84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d30:	f000 fd17 	bl	8007762 <USBD_GetEpDesc>
 8006d34:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d36:	2101      	movs	r1, #1
 8006d38:	4812      	ldr	r0, [pc, #72]	; (8006d84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d3a:	f000 fd12 	bl	8007762 <USBD_GetEpDesc>
 8006d3e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f042 0202 	orr.w	r2, r2, #2
 8006d4e:	711a      	strb	r2, [r3, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2205      	movs	r2, #5
 8006d58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f042 0202 	orr.w	r2, r2, #2
 8006d68:	711a      	strb	r2, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2205      	movs	r2, #5
 8006d72:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2229      	movs	r2, #41	; 0x29
 8006d78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d7a:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200000bc 	.word	0x200000bc

08006d88 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d90:	2181      	movs	r1, #129	; 0x81
 8006d92:	4815      	ldr	r0, [pc, #84]	; (8006de8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006d94:	f000 fce5 	bl	8007762 <USBD_GetEpDesc>
 8006d98:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	4812      	ldr	r0, [pc, #72]	; (8006de8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006d9e:	f000 fce0 	bl	8007762 <USBD_GetEpDesc>
 8006da2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f042 0202 	orr.w	r2, r2, #2
 8006db2:	711a      	strb	r2, [r3, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2205      	movs	r2, #5
 8006dbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d009      	beq.n	8006dd8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f042 0202 	orr.w	r2, r2, #2
 8006dcc:	711a      	strb	r2, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2229      	movs	r2, #41	; 0x29
 8006ddc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006dde:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200000bc 	.word	0x200000bc

08006dec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006df4:	2181      	movs	r1, #129	; 0x81
 8006df6:	4815      	ldr	r0, [pc, #84]	; (8006e4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006df8:	f000 fcb3 	bl	8007762 <USBD_GetEpDesc>
 8006dfc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	4812      	ldr	r0, [pc, #72]	; (8006e4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e02:	f000 fcae 	bl	8007762 <USBD_GetEpDesc>
 8006e06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f042 0202 	orr.w	r2, r2, #2
 8006e16:	711a      	strb	r2, [r3, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2205      	movs	r2, #5
 8006e20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f042 0202 	orr.w	r2, r2, #2
 8006e30:	711a      	strb	r2, [r3, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2205      	movs	r2, #5
 8006e3a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2229      	movs	r2, #41	; 0x29
 8006e40:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e42:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	200000bc 	.word	0x200000bc

08006e50 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return (uint8_t)USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	32b0      	adds	r2, #176	; 0xb0
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e017      	b.n	8006ed0 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32b0      	adds	r2, #176	; 0xb0
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	33b0      	adds	r3, #176	; 0xb0
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	7810      	ldrb	r0, [r2, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	7852      	ldrb	r2, [r2, #1]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	; 0xb0
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e00f      	b.n	8006f16 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	32b0      	adds	r2, #176	; 0xb0
 8006f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	2330      	movs	r3, #48	; 0x30
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 ff4a 	bl	8008da8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200000ff 	.word	0x200000ff

08006f24 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	32b0      	adds	r2, #176	; 0xb0
 8006f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e016      	b.n	8006f74 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d111      	bne.n	8006f72 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	33b0      	adds	r3, #176	; 0xb0
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	7810      	ldrb	r0, [r2, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	7852      	ldrb	r2, [r2, #1]
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  return (uint8_t)USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	220a      	movs	r2, #10
 8006f88:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	200000f4 	.word	0x200000f4

08006f9c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e009      	b.n	8006fc4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	33b0      	adds	r3, #176	; 0xb0
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e01f      	b.n	8007028 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	79fa      	ldrb	r2, [r7, #7]
 800701a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fd6d 	bl	8008afc <USBD_LL_Init>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e025      	b.n	8007094 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32ae      	adds	r2, #174	; 0xae
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00f      	beq.n	8007084 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32ae      	adds	r2, #174	; 0xae
 800706e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f107 020e 	add.w	r2, r7, #14
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fd75 	bl	8008b94 <USBD_LL_Start>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	4611      	mov	r1, r2
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	4611      	mov	r1, r2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f001 f908 	bl	800835e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2b02      	cmp	r3, #2
 8007170:	d01a      	beq.n	80071a8 <USBD_LL_SetupStage+0x72>
 8007172:	2b02      	cmp	r3, #2
 8007174:	d822      	bhi.n	80071bc <USBD_LL_SetupStage+0x86>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <USBD_LL_SetupStage+0x4a>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d00a      	beq.n	8007194 <USBD_LL_SetupStage+0x5e>
 800717e:	e01d      	b.n	80071bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fb5f 	bl	800784c <USBD_StdDevReq>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]
      break;
 8007192:	e020      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fbc7 	bl	8007930 <USBD_StdItfReq>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
      break;
 80071a6:	e016      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc29 	bl	8007a08 <USBD_StdEPReq>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ba:	e00c      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fd42 	bl	8008c54 <USBD_LL_StallEP>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
      break;
 80071d4:	bf00      	nop
  }

  return ret;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	460b      	mov	r3, r1
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d16e      	bne.n	80072d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007206:	2b03      	cmp	r3, #3
 8007208:	f040 8098 	bne.w	800733c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	429a      	cmp	r2, r3
 8007216:	d913      	bls.n	8007240 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4293      	cmp	r3, r2
 8007230:	bf28      	it	cs
 8007232:	4613      	movcs	r3, r2
 8007234:	461a      	mov	r2, r3
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 f984 	bl	8008546 <USBD_CtlContinueRx>
 800723e:	e07d      	b.n	800733c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2b02      	cmp	r3, #2
 800724c:	d014      	beq.n	8007278 <USBD_LL_DataOutStage+0x98>
 800724e:	2b02      	cmp	r3, #2
 8007250:	d81d      	bhi.n	800728e <USBD_LL_DataOutStage+0xae>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <USBD_LL_DataOutStage+0x7c>
 8007256:	2b01      	cmp	r3, #1
 8007258:	d003      	beq.n	8007262 <USBD_LL_DataOutStage+0x82>
 800725a:	e018      	b.n	800728e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	75bb      	strb	r3, [r7, #22]
            break;
 8007260:	e018      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fa5e 	bl	800772e <USBD_CoreFindIF>
 8007272:	4603      	mov	r3, r0
 8007274:	75bb      	strb	r3, [r7, #22]
            break;
 8007276:	e00d      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4619      	mov	r1, r3
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fa60 	bl	8007748 <USBD_CoreFindEP>
 8007288:	4603      	mov	r3, r0
 800728a:	75bb      	strb	r3, [r7, #22]
            break;
 800728c:	e002      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	75bb      	strb	r3, [r7, #22]
            break;
 8007292:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007294:	7dbb      	ldrb	r3, [r7, #22]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d119      	bne.n	80072ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d113      	bne.n	80072ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072a6:	7dba      	ldrb	r2, [r7, #22]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	32ae      	adds	r2, #174	; 0xae
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072b6:	7dba      	ldrb	r2, [r7, #22]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072be:	7dba      	ldrb	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	32ae      	adds	r2, #174	; 0xae
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 f94a 	bl	8008568 <USBD_CtlSendStatus>
 80072d4:	e032      	b.n	800733c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fa31 	bl	8007748 <USBD_CoreFindEP>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ea:	7dbb      	ldrb	r3, [r7, #22]
 80072ec:	2bff      	cmp	r3, #255	; 0xff
 80072ee:	d025      	beq.n	800733c <USBD_LL_DataOutStage+0x15c>
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d122      	bne.n	800733c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d117      	bne.n	8007332 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007302:	7dba      	ldrb	r2, [r7, #22]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	32ae      	adds	r2, #174	; 0xae
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00f      	beq.n	8007332 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007312:	7dba      	ldrb	r2, [r7, #22]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800731a:	7dba      	ldrb	r2, [r7, #22]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	32ae      	adds	r2, #174	; 0xae
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	7afa      	ldrb	r2, [r7, #11]
 8007328:	4611      	mov	r1, r2
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	4798      	blx	r3
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	e000      	b.n	800733e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	460b      	mov	r3, r1
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d16f      	bne.n	800743a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3314      	adds	r3, #20
 800735e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007366:	2b02      	cmp	r3, #2
 8007368:	d15a      	bne.n	8007420 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d914      	bls.n	80073a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	461a      	mov	r2, r3
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 f8ac 	bl	80084ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007392:	2300      	movs	r3, #0
 8007394:	2200      	movs	r2, #0
 8007396:	2100      	movs	r1, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f001 fd05 	bl	8008da8 <USBD_LL_PrepareReceive>
 800739e:	e03f      	b.n	8007420 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d11c      	bne.n	80073e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d316      	bcc.n	80073e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d20f      	bcs.n	80073e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 f88d 	bl	80084ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d8:	2300      	movs	r3, #0
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 fce2 	bl	8008da8 <USBD_LL_PrepareReceive>
 80073e4:	e01c      	b.n	8007420 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d10f      	bne.n	8007412 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fc1d 	bl	8008c54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 f8b7 	bl	800858e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d03a      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fe42 	bl	80070b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007438:	e032      	b.n	80074a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f97f 	bl	8007748 <USBD_CoreFindEP>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2bff      	cmp	r3, #255	; 0xff
 8007452:	d025      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d122      	bne.n	80074a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b03      	cmp	r3, #3
 8007464:	d11c      	bne.n	80074a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007466:	7dfa      	ldrb	r2, [r7, #23]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	32ae      	adds	r2, #174	; 0xae
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007476:	7dfa      	ldrb	r2, [r7, #23]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800747e:	7dfa      	ldrb	r2, [r7, #23]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	32ae      	adds	r2, #174	; 0xae
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	7afa      	ldrb	r2, [r7, #11]
 800748c:	4611      	mov	r1, r2
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007496:	7dbb      	ldrb	r3, [r7, #22]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800749c:	7dbb      	ldrb	r3, [r7, #22]
 800749e:	e000      	b.n	80074a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d014      	beq.n	8007510 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00e      	beq.n	8007510 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6852      	ldr	r2, [r2, #4]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	4611      	mov	r1, r2
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fb57 	bl	8008bca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2240      	movs	r2, #64	; 0x40
 8007528:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fb49 	bl	8008bca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	621a      	str	r2, [r3, #32]

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	78fa      	ldrb	r2, [r7, #3]
 800755e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	b2da      	uxtb	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2204      	movs	r2, #4
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d106      	bne.n	80075bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d110      	bne.n	8007600 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	32ae      	adds	r2, #174	; 0xae
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007628:	2303      	movs	r3, #3
 800762a:	e01c      	b.n	8007666 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d115      	bne.n	8007664 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32ae      	adds	r2, #174	; 0xae
 8007642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32ae      	adds	r2, #174	; 0xae
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	4611      	mov	r1, r2
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32ae      	adds	r2, #174	; 0xae
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e01c      	b.n	80076ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b03      	cmp	r3, #3
 800769a:	d115      	bne.n	80076c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32ae      	adds	r2, #174	; 0xae
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32ae      	adds	r2, #174	; 0xae
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	4611      	mov	r1, r2
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00e      	beq.n	8007724 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6852      	ldr	r2, [r2, #4]
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	4611      	mov	r1, r2
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800773a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007754:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	429a      	cmp	r2, r3
 8007788:	d920      	bls.n	80077cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007792:	e013      	b.n	80077bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007794:	f107 030a 	add.w	r3, r7, #10
 8007798:	4619      	mov	r1, r3
 800779a:	6978      	ldr	r0, [r7, #20]
 800779c:	f000 f81b 	bl	80077d6 <USBD_GetNextDesc>
 80077a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b05      	cmp	r3, #5
 80077a8:	d108      	bne.n	80077bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	789b      	ldrb	r3, [r3, #2]
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d008      	beq.n	80077ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	885b      	ldrh	r3, [r3, #2]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	897b      	ldrh	r3, [r7, #10]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d8e5      	bhi.n	8007794 <USBD_GetEpDesc+0x32>
 80077c8:	e000      	b.n	80077cc <USBD_GetEpDesc+0x6a>
          break;
 80077ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077cc:	693b      	ldr	r3, [r7, #16]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	3301      	adds	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800782e:	8a3b      	ldrh	r3, [r7, #16]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b21a      	sxth	r2, r3
 8007834:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007838:	4313      	orrs	r3, r2
 800783a:	b21b      	sxth	r3, r3
 800783c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800783e:	89fb      	ldrh	r3, [r7, #14]
}
 8007840:	4618      	mov	r0, r3
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d005      	beq.n	8007872 <USBD_StdDevReq+0x26>
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d857      	bhi.n	800791a <USBD_StdDevReq+0xce>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00f      	beq.n	800788e <USBD_StdDevReq+0x42>
 800786e:	2b20      	cmp	r3, #32
 8007870:	d153      	bne.n	800791a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	32ae      	adds	r2, #174	; 0xae
 800787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e04a      	b.n	8007924 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	2b09      	cmp	r3, #9
 8007894:	d83b      	bhi.n	800790e <USBD_StdDevReq+0xc2>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <USBD_StdDevReq+0x50>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	08007905 	.word	0x08007905
 80078a4:	0800790f 	.word	0x0800790f
 80078a8:	080078fb 	.word	0x080078fb
 80078ac:	0800790f 	.word	0x0800790f
 80078b0:	080078cf 	.word	0x080078cf
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	0800790f 	.word	0x0800790f
 80078bc:	080078e7 	.word	0x080078e7
 80078c0:	080078d9 	.word	0x080078d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa3c 	bl	8007d44 <USBD_GetDescriptor>
          break;
 80078cc:	e024      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fba1 	bl	8008018 <USBD_SetAddress>
          break;
 80078d6:	e01f      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fbe0 	bl	80080a0 <USBD_SetConfig>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
          break;
 80078e4:	e018      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc83 	bl	80081f4 <USBD_GetConfig>
          break;
 80078ee:	e013      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fcb4 	bl	8008260 <USBD_GetStatus>
          break;
 80078f8:	e00e      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fce3 	bl	80082c8 <USBD_SetFeature>
          break;
 8007902:	e009      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fd07 	bl	800831a <USBD_ClrFeature>
          break;
 800790c:	e004      	b.n	8007918 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd5e 	bl	80083d2 <USBD_CtlError>
          break;
 8007916:	bf00      	nop
      }
      break;
 8007918:	e004      	b.n	8007924 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd58 	bl	80083d2 <USBD_CtlError>
      break;
 8007922:	bf00      	nop
  }

  return ret;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop

08007930 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d005      	beq.n	8007956 <USBD_StdItfReq+0x26>
 800794a:	2b40      	cmp	r3, #64	; 0x40
 800794c:	d852      	bhi.n	80079f4 <USBD_StdItfReq+0xc4>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <USBD_StdItfReq+0x26>
 8007952:	2b20      	cmp	r3, #32
 8007954:	d14e      	bne.n	80079f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	b2db      	uxtb	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	2b02      	cmp	r3, #2
 8007962:	d840      	bhi.n	80079e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	889b      	ldrh	r3, [r3, #4]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b03      	cmp	r3, #3
 800796c:	d836      	bhi.n	80079dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	889b      	ldrh	r3, [r3, #4]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fed9 	bl	800772e <USBD_CoreFindIF>
 800797c:	4603      	mov	r3, r0
 800797e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2bff      	cmp	r3, #255	; 0xff
 8007984:	d01d      	beq.n	80079c2 <USBD_StdItfReq+0x92>
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11a      	bne.n	80079c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800798c:	7bba      	ldrb	r2, [r7, #14]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	32ae      	adds	r2, #174	; 0xae
 8007992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00f      	beq.n	80079bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800799c:	7bba      	ldrb	r2, [r7, #14]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079a4:	7bba      	ldrb	r2, [r7, #14]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	; 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ba:	e004      	b.n	80079c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079c0:	e001      	b.n	80079c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079c2:	2303      	movs	r3, #3
 80079c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	88db      	ldrh	r3, [r3, #6]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <USBD_StdItfReq+0xc0>
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10d      	bne.n	80079f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fdc7 	bl	8008568 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079da:	e009      	b.n	80079f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fcf7 	bl	80083d2 <USBD_CtlError>
          break;
 80079e4:	e004      	b.n	80079f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fcf2 	bl	80083d2 <USBD_CtlError>
          break;
 80079ee:	e000      	b.n	80079f2 <USBD_StdItfReq+0xc2>
          break;
 80079f0:	bf00      	nop
      }
      break;
 80079f2:	e004      	b.n	80079fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fceb 	bl	80083d2 <USBD_CtlError>
      break;
 80079fc:	bf00      	nop
  }

  return ret;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	889b      	ldrh	r3, [r3, #4]
 8007a1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d007      	beq.n	8007a38 <USBD_StdEPReq+0x30>
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	f200 817f 	bhi.w	8007d2c <USBD_StdEPReq+0x324>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d02a      	beq.n	8007a88 <USBD_StdEPReq+0x80>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	f040 817a 	bne.w	8007d2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fe83 	bl	8007748 <USBD_CoreFindEP>
 8007a42:	4603      	mov	r3, r0
 8007a44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	2bff      	cmp	r3, #255	; 0xff
 8007a4a:	f000 8174 	beq.w	8007d36 <USBD_StdEPReq+0x32e>
 8007a4e:	7b7b      	ldrb	r3, [r7, #13]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 8170 	bne.w	8007d36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a56:	7b7a      	ldrb	r2, [r7, #13]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a5e:	7b7a      	ldrb	r2, [r7, #13]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	32ae      	adds	r2, #174	; 0xae
 8007a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8163 	beq.w	8007d36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a70:	7b7a      	ldrb	r2, [r7, #13]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	32ae      	adds	r2, #174	; 0xae
 8007a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a86:	e156      	b.n	8007d36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d008      	beq.n	8007aa2 <USBD_StdEPReq+0x9a>
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	f300 8145 	bgt.w	8007d20 <USBD_StdEPReq+0x318>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 809b 	beq.w	8007bd2 <USBD_StdEPReq+0x1ca>
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d03c      	beq.n	8007b1a <USBD_StdEPReq+0x112>
 8007aa0:	e13e      	b.n	8007d20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d002      	beq.n	8007ab4 <USBD_StdEPReq+0xac>
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d016      	beq.n	8007ae0 <USBD_StdEPReq+0xd8>
 8007ab2:	e02c      	b.n	8007b0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00d      	beq.n	8007ad6 <USBD_StdEPReq+0xce>
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d00a      	beq.n	8007ad6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f8c5 	bl	8008c54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f8c1 	bl	8008c54 <USBD_LL_StallEP>
 8007ad2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ad4:	e020      	b.n	8007b18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fc7a 	bl	80083d2 <USBD_CtlError>
              break;
 8007ade:	e01b      	b.n	8007b18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	885b      	ldrh	r3, [r3, #2]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10e      	bne.n	8007b06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <USBD_StdEPReq+0xfe>
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d008      	beq.n	8007b06 <USBD_StdEPReq+0xfe>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f8a7 	bl	8008c54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fd2e 	bl	8008568 <USBD_CtlSendStatus>

              break;
 8007b0c:	e004      	b.n	8007b18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fc5e 	bl	80083d2 <USBD_CtlError>
              break;
 8007b16:	bf00      	nop
          }
          break;
 8007b18:	e107      	b.n	8007d2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d002      	beq.n	8007b2c <USBD_StdEPReq+0x124>
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d016      	beq.n	8007b58 <USBD_StdEPReq+0x150>
 8007b2a:	e04b      	b.n	8007bc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <USBD_StdEPReq+0x146>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d00a      	beq.n	8007b4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f889 	bl	8008c54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b42:	2180      	movs	r1, #128	; 0x80
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f885 	bl	8008c54 <USBD_LL_StallEP>
 8007b4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b4c:	e040      	b.n	8007bd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc3e 	bl	80083d2 <USBD_CtlError>
              break;
 8007b56:	e03b      	b.n	8007bd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	885b      	ldrh	r3, [r3, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d136      	bne.n	8007bce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 f88f 	bl	8008c92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fcf7 	bl	8008568 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff fde2 	bl	8007748 <USBD_CoreFindEP>
 8007b84:	4603      	mov	r3, r0
 8007b86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b88:	7b7b      	ldrb	r3, [r7, #13]
 8007b8a:	2bff      	cmp	r3, #255	; 0xff
 8007b8c:	d01f      	beq.n	8007bce <USBD_StdEPReq+0x1c6>
 8007b8e:	7b7b      	ldrb	r3, [r7, #13]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d11c      	bne.n	8007bce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b94:	7b7a      	ldrb	r2, [r7, #13]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b9c:	7b7a      	ldrb	r2, [r7, #13]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32ae      	adds	r2, #174	; 0xae
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d010      	beq.n	8007bce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bac:	7b7a      	ldrb	r2, [r7, #13]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32ae      	adds	r2, #174	; 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	4798      	blx	r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bc2:	e004      	b.n	8007bce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fc03 	bl	80083d2 <USBD_CtlError>
              break;
 8007bcc:	e000      	b.n	8007bd0 <USBD_StdEPReq+0x1c8>
              break;
 8007bce:	bf00      	nop
          }
          break;
 8007bd0:	e0ab      	b.n	8007d2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d002      	beq.n	8007be4 <USBD_StdEPReq+0x1dc>
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d032      	beq.n	8007c48 <USBD_StdEPReq+0x240>
 8007be2:	e097      	b.n	8007d14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <USBD_StdEPReq+0x1f2>
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d004      	beq.n	8007bfa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fbed 	bl	80083d2 <USBD_CtlError>
                break;
 8007bf8:	e091      	b.n	8007d1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da0b      	bge.n	8007c1a <USBD_StdEPReq+0x212>
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	3310      	adds	r3, #16
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	3304      	adds	r3, #4
 8007c18:	e00b      	b.n	8007c32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	3304      	adds	r3, #4
 8007c32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fc37 	bl	80084b4 <USBD_CtlSendData>
              break;
 8007c46:	e06a      	b.n	8007d1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da11      	bge.n	8007c74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	f003 020f 	and.w	r2, r3, #15
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d117      	bne.n	8007c9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fbb0 	bl	80083d2 <USBD_CtlError>
                  break;
 8007c72:	e054      	b.n	8007d1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 020f 	and.w	r2, r3, #15
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fb9d 	bl	80083d2 <USBD_CtlError>
                  break;
 8007c98:	e041      	b.n	8007d1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da0b      	bge.n	8007cba <USBD_StdEPReq+0x2b2>
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	e00b      	b.n	8007cd2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <USBD_StdEPReq+0x2d8>
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b80      	cmp	r3, #128	; 0x80
 8007cde:	d103      	bne.n	8007ce8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e00e      	b.n	8007d06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 ffef 	bl	8008cd0 <USBD_LL_IsStallEP>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fbd1 	bl	80084b4 <USBD_CtlSendData>
              break;
 8007d12:	e004      	b.n	8007d1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fb5b 	bl	80083d2 <USBD_CtlError>
              break;
 8007d1c:	bf00      	nop
          }
          break;
 8007d1e:	e004      	b.n	8007d2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb55 	bl	80083d2 <USBD_CtlError>
          break;
 8007d28:	bf00      	nop
      }
      break;
 8007d2a:	e005      	b.n	8007d38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fb4f 	bl	80083d2 <USBD_CtlError>
      break;
 8007d34:	e000      	b.n	8007d38 <USBD_StdEPReq+0x330>
      break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	f200 8128 	bhi.w	8007fba <USBD_GetDescriptor+0x276>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <USBD_GetDescriptor+0x2c>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007da5 	.word	0x08007da5
 8007d78:	08007de5 	.word	0x08007de5
 8007d7c:	08007fbb 	.word	0x08007fbb
 8007d80:	08007fbb 	.word	0x08007fbb
 8007d84:	08007f5b 	.word	0x08007f5b
 8007d88:	08007f87 	.word	0x08007f87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7c12      	ldrb	r2, [r2, #16]
 8007d98:	f107 0108 	add.w	r1, r7, #8
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	60f8      	str	r0, [r7, #12]
      break;
 8007da2:	e112      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7c1b      	ldrb	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10d      	bne.n	8007dc8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f107 0208 	add.w	r2, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dc6:	e100      	b.n	8007fca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f107 0208 	add.w	r2, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	2202      	movs	r2, #2
 8007de0:	701a      	strb	r2, [r3, #0]
      break;
 8007de2:	e0f2      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	885b      	ldrh	r3, [r3, #2]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	f200 80ac 	bhi.w	8007f48 <USBD_GetDescriptor+0x204>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <USBD_GetDescriptor+0xb4>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e11 	.word	0x08007e11
 8007dfc:	08007e45 	.word	0x08007e45
 8007e00:	08007e79 	.word	0x08007e79
 8007e04:	08007ead 	.word	0x08007ead
 8007e08:	08007ee1 	.word	0x08007ee1
 8007e0c:	08007f15 	.word	0x08007f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e091      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 facb 	bl	80083d2 <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e089      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e077      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fab1 	bl	80083d2 <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e06f      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7c12      	ldrb	r2, [r2, #16]
 8007e90:	f107 0108 	add.w	r1, r7, #8
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
 8007e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9a:	e05d      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa97 	bl	80083d2 <USBD_CtlError>
            err++;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eaa:	e055      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7c12      	ldrb	r2, [r2, #16]
 8007ec4:	f107 0108 	add.w	r1, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ece:	e043      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa7d 	bl	80083d2 <USBD_CtlError>
            err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ede:	e03b      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7c12      	ldrb	r2, [r2, #16]
 8007ef8:	f107 0108 	add.w	r1, r7, #8
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f02:	e029      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa63 	bl	80083d2 <USBD_CtlError>
            err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
          break;
 8007f12:	e021      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7c12      	ldrb	r2, [r2, #16]
 8007f2c:	f107 0108 	add.w	r1, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f36:	e00f      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa49 	bl	80083d2 <USBD_CtlError>
            err++;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	3301      	adds	r3, #1
 8007f44:	72fb      	strb	r3, [r7, #11]
          break;
 8007f46:	e007      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa41 	bl	80083d2 <USBD_CtlError>
          err++;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3301      	adds	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f56:	bf00      	nop
      }
      break;
 8007f58:	e037      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7c1b      	ldrb	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6a:	f107 0208 	add.w	r2, r7, #8
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
 8007f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f74:	e029      	b.n	8007fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa2a 	bl	80083d2 <USBD_CtlError>
        err++;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	3301      	adds	r3, #1
 8007f82:	72fb      	strb	r3, [r7, #11]
      break;
 8007f84:	e021      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7c1b      	ldrb	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f96:	f107 0208 	add.w	r2, r7, #8
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4798      	blx	r3
 8007f9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fa8:	e00f      	b.n	8007fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa10 	bl	80083d2 <USBD_CtlError>
        err++;
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fb8:	e007      	b.n	8007fca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa08 	bl	80083d2 <USBD_CtlError>
      err++;
 8007fc2:	7afb      	ldrb	r3, [r7, #11]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc8:	bf00      	nop
  }

  if (err != 0U)
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d11e      	bne.n	800800e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	88db      	ldrh	r3, [r3, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fd8:	893b      	ldrh	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88da      	ldrh	r2, [r3, #6]
 8007fe2:	893b      	ldrh	r3, [r7, #8]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	bf28      	it	cs
 8007fe8:	4613      	movcs	r3, r2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fee:	893b      	ldrh	r3, [r7, #8]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa5d 	bl	80084b4 <USBD_CtlSendData>
 8007ffa:	e009      	b.n	8008010 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9e7 	bl	80083d2 <USBD_CtlError>
 8008004:	e004      	b.n	8008010 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 faae 	bl	8008568 <USBD_CtlSendStatus>
 800800c:	e000      	b.n	8008010 <USBD_GetDescriptor+0x2cc>
    return;
 800800e:	bf00      	nop
  }
}
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	889b      	ldrh	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d131      	bne.n	800808e <USBD_SetAddress+0x76>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	88db      	ldrh	r3, [r3, #6]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d12d      	bne.n	800808e <USBD_SetAddress+0x76>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	885b      	ldrh	r3, [r3, #2]
 8008036:	2b7f      	cmp	r3, #127	; 0x7f
 8008038:	d829      	bhi.n	800808e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b03      	cmp	r3, #3
 8008050:	d104      	bne.n	800805c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f9bc 	bl	80083d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805a:	e01d      	b.n	8008098 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7bfa      	ldrb	r2, [r7, #15]
 8008060:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fe5d 	bl	8008d28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa7a 	bl	8008568 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008082:	e009      	b.n	8008098 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808c:	e004      	b.n	8008098 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f99e 	bl	80083d2 <USBD_CtlError>
  }
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	4b4e      	ldr	r3, [pc, #312]	; (80081f0 <USBD_SetConfig+0x150>)
 80080b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080b8:	4b4d      	ldr	r3, [pc, #308]	; (80081f0 <USBD_SetConfig+0x150>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d905      	bls.n	80080cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f985 	bl	80083d2 <USBD_CtlError>
    return USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e08c      	b.n	80081e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d002      	beq.n	80080de <USBD_SetConfig+0x3e>
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d029      	beq.n	8008130 <USBD_SetConfig+0x90>
 80080dc:	e075      	b.n	80081ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080de:	4b44      	ldr	r3, [pc, #272]	; (80081f0 <USBD_SetConfig+0x150>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d020      	beq.n	8008128 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080e6:	4b42      	ldr	r3, [pc, #264]	; (80081f0 <USBD_SetConfig+0x150>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080f0:	4b3f      	ldr	r3, [pc, #252]	; (80081f0 <USBD_SetConfig+0x150>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fe ffe7 	bl	80070ca <USBD_SetClassConfig>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d008      	beq.n	8008118 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f962 	bl	80083d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008116:	e065      	b.n	80081e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fa25 	bl	8008568 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2203      	movs	r2, #3
 8008122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008126:	e05d      	b.n	80081e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa1d 	bl	8008568 <USBD_CtlSendStatus>
      break;
 800812e:	e059      	b.n	80081e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008130:	4b2f      	ldr	r3, [pc, #188]	; (80081f0 <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d112      	bne.n	800815e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008140:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <USBD_SetConfig+0x150>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <USBD_SetConfig+0x150>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe ffd6 	bl	8007102 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa06 	bl	8008568 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800815c:	e042      	b.n	80081e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800815e:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <USBD_SetConfig+0x150>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d02a      	beq.n	80081c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7fe ffc4 	bl	8007102 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800817a:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <USBD_SetConfig+0x150>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008184:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <USBD_SetConfig+0x150>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fe ff9d 	bl	80070ca <USBD_SetClassConfig>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f918 	bl	80083d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fe ffa9 	bl	8007102 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081b8:	e014      	b.n	80081e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9d4 	bl	8008568 <USBD_CtlSendStatus>
      break;
 80081c0:	e010      	b.n	80081e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9d0 	bl	8008568 <USBD_CtlSendStatus>
      break;
 80081c8:	e00c      	b.n	80081e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f900 	bl	80083d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <USBD_SetConfig+0x150>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe ff92 	bl	8007102 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
      break;
 80081e2:	bf00      	nop
  }

  return ret;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200008c0 	.word	0x200008c0

080081f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d004      	beq.n	8008210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8e2 	bl	80083d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800820e:	e023      	b.n	8008258 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	dc02      	bgt.n	8008222 <USBD_GetConfig+0x2e>
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc03      	bgt.n	8008228 <USBD_GetConfig+0x34>
 8008220:	e015      	b.n	800824e <USBD_GetConfig+0x5a>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d00b      	beq.n	800823e <USBD_GetConfig+0x4a>
 8008226:	e012      	b.n	800824e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3308      	adds	r3, #8
 8008232:	2201      	movs	r2, #1
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f93c 	bl	80084b4 <USBD_CtlSendData>
        break;
 800823c:	e00c      	b.n	8008258 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3304      	adds	r3, #4
 8008242:	2201      	movs	r2, #1
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f934 	bl	80084b4 <USBD_CtlSendData>
        break;
 800824c:	e004      	b.n	8008258 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8be 	bl	80083d2 <USBD_CtlError>
        break;
 8008256:	bf00      	nop
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008270:	b2db      	uxtb	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	2b02      	cmp	r3, #2
 8008276:	d81e      	bhi.n	80082b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	88db      	ldrh	r3, [r3, #6]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d004      	beq.n	800828a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8a5 	bl	80083d2 <USBD_CtlError>
        break;
 8008288:	e01a      	b.n	80082c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f043 0202 	orr.w	r2, r3, #2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	330c      	adds	r3, #12
 80082aa:	2202      	movs	r2, #2
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f900 	bl	80084b4 <USBD_CtlSendData>
      break;
 80082b4:	e004      	b.n	80082c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f88a 	bl	80083d2 <USBD_CtlError>
      break;
 80082be:	bf00      	nop
  }
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d107      	bne.n	80082ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f940 	bl	8008568 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082e8:	e013      	b.n	8008312 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d10b      	bne.n	800830a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	889b      	ldrh	r3, [r3, #4]
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f930 	bl	8008568 <USBD_CtlSendStatus>
}
 8008308:	e003      	b.n	8008312 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f860 	bl	80083d2 <USBD_CtlError>
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832a:	b2db      	uxtb	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	2b02      	cmp	r3, #2
 8008330:	d80b      	bhi.n	800834a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	885b      	ldrh	r3, [r3, #2]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10c      	bne.n	8008354 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f910 	bl	8008568 <USBD_CtlSendStatus>
      }
      break;
 8008348:	e004      	b.n	8008354 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f840 	bl	80083d2 <USBD_CtlError>
      break;
 8008352:	e000      	b.n	8008356 <USBD_ClrFeature+0x3c>
      break;
 8008354:	bf00      	nop
  }
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7ff fa41 	bl	8007810 <SWAPBYTE>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7ff fa34 	bl	8007810 <SWAPBYTE>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3301      	adds	r3, #1
 80083ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fa27 	bl	8007810 <SWAPBYTE>
 80083c2:	4603      	mov	r3, r0
 80083c4:	461a      	mov	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	80da      	strh	r2, [r3, #6]
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083dc:	2180      	movs	r1, #128	; 0x80
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fc38 	bl	8008c54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083e4:	2100      	movs	r1, #0
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fc34 	bl	8008c54 <USBD_LL_StallEP>
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d036      	beq.n	8008478 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f000 f836 	bl	8008480 <USBD_GetLen>
 8008414:	4603      	mov	r3, r0
 8008416:	3301      	adds	r3, #1
 8008418:	b29b      	uxth	r3, r3
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4413      	add	r3, r2
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7812      	ldrb	r2, [r2, #0]
 800842c:	701a      	strb	r2, [r3, #0]
  idx++;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	3301      	adds	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	4413      	add	r3, r2
 800843a:	2203      	movs	r2, #3
 800843c:	701a      	strb	r2, [r3, #0]
  idx++;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	3301      	adds	r3, #1
 8008442:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008444:	e013      	b.n	800846e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4413      	add	r3, r2
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	3301      	adds	r3, #1
 8008456:	613b      	str	r3, [r7, #16]
    idx++;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	3301      	adds	r3, #1
 800845c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	4413      	add	r3, r2
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
    idx++;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	3301      	adds	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e7      	bne.n	8008446 <USBD_GetString+0x52>
 8008476:	e000      	b.n	800847a <USBD_GetString+0x86>
    return;
 8008478:	bf00      	nop
  }
}
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008490:	e005      	b.n	800849e <USBD_GetLen+0x1e>
  {
    len++;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	3301      	adds	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3301      	adds	r3, #1
 800849c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f5      	bne.n	8008492 <USBD_GetLen+0x12>
  }

  return len;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fc43 	bl	8008d66 <USBD_LL_Transmit>

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	2100      	movs	r1, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fc32 	bl	8008d66 <USBD_LL_Transmit>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2203      	movs	r2, #3
 800851c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	2100      	movs	r1, #0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fc36 	bl	8008da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	2100      	movs	r1, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fc25 	bl	8008da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2204      	movs	r2, #4
 8008574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008578:	2300      	movs	r3, #0
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fbf1 	bl	8008d66 <USBD_LL_Transmit>

  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2205      	movs	r2, #5
 800859a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	2100      	movs	r1, #0
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fbff 	bl	8008da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4912      	ldr	r1, [pc, #72]	; (8008604 <MX_USB_DEVICE_Init+0x50>)
 80085bc:	4812      	ldr	r0, [pc, #72]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085be:	f7fe fd07 	bl	8006fd0 <USBD_Init>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085c8:	f7f8 fc52 	bl	8000e70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80085cc:	490f      	ldr	r1, [pc, #60]	; (800860c <MX_USB_DEVICE_Init+0x58>)
 80085ce:	480e      	ldr	r0, [pc, #56]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085d0:	f7fe fd2e 	bl	8007030 <USBD_RegisterClass>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085da:	f7f8 fc49 	bl	8000e70 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80085de:	490c      	ldr	r1, [pc, #48]	; (8008610 <MX_USB_DEVICE_Init+0x5c>)
 80085e0:	4809      	ldr	r0, [pc, #36]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085e2:	f7fe fcdb 	bl	8006f9c <USBD_CUSTOM_HID_RegisterInterface>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085ec:	f7f8 fc40 	bl	8000e70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085f0:	4805      	ldr	r0, [pc, #20]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085f2:	f7fe fd53 	bl	800709c <USBD_Start>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085fc:	f7f8 fc38 	bl	8000e70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008600:	bf00      	nop
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200001a8 	.word	0x200001a8
 8008608:	200008c4 	.word	0x200008c4
 800860c:	20000084 	.word	0x20000084
 8008610:	20000198 	.word	0x20000198

08008614 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008618:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800861a:	4618      	mov	r0, r3
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008628:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800862a:	4618      	mov	r0, r3
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	460a      	mov	r2, r1
 800863e:	71fb      	strb	r3, [r7, #7]
 8008640:	4613      	mov	r3, r2
 8008642:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008644:	4806      	ldr	r0, [pc, #24]	; (8008660 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8008646:	f7fe fc47 	bl	8006ed8 <USBD_CUSTOM_HID_ReceivePacket>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8008650:	f04f 33ff 	mov.w	r3, #4294967295
 8008654:	e000      	b.n	8008658 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8008656:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200008c4 	.word	0x200008c4

08008664 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2212      	movs	r2, #18
 8008674:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008676:	4b03      	ldr	r3, [pc, #12]	; (8008684 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	200001c4 	.word	0x200001c4

08008688 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2204      	movs	r2, #4
 8008698:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800869a:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	200001d8 	.word	0x200001d8

080086ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	6039      	str	r1, [r7, #0]
 80086b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4907      	ldr	r1, [pc, #28]	; (80086e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80086c2:	4808      	ldr	r0, [pc, #32]	; (80086e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80086c4:	f7ff fe96 	bl	80083f4 <USBD_GetString>
 80086c8:	e004      	b.n	80086d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	4904      	ldr	r1, [pc, #16]	; (80086e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ce:	4805      	ldr	r0, [pc, #20]	; (80086e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80086d0:	f7ff fe90 	bl	80083f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000ba0 	.word	0x20000ba0
 80086e4:	08009814 	.word	0x08009814

080086e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	4904      	ldr	r1, [pc, #16]	; (8008708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086f8:	4804      	ldr	r0, [pc, #16]	; (800870c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086fa:	f7ff fe7b 	bl	80083f4 <USBD_GetString>
  return USBD_StrDesc;
 80086fe:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000ba0 	.word	0x20000ba0
 800870c:	08009824 	.word	0x08009824

08008710 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	221a      	movs	r2, #26
 8008720:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008722:	f000 f843 	bl	80087ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008726:	4b02      	ldr	r3, [pc, #8]	; (8008730 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	200001dc 	.word	0x200001dc

08008734 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	; (8008768 <USBD_FS_ConfigStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <USBD_FS_ConfigStrDescriptor+0x38>)
 800874c:	f7ff fe52 	bl	80083f4 <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008758:	f7ff fe4c 	bl	80083f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000ba0 	.word	0x20000ba0
 800876c:	08009838 	.word	0x08009838

08008770 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d105      	bne.n	800878e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	4907      	ldr	r1, [pc, #28]	; (80087a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008786:	4808      	ldr	r0, [pc, #32]	; (80087a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008788:	f7ff fe34 	bl	80083f4 <USBD_GetString>
 800878c:	e004      	b.n	8008798 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	4904      	ldr	r1, [pc, #16]	; (80087a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008792:	4805      	ldr	r0, [pc, #20]	; (80087a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008794:	f7ff fe2e 	bl	80083f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000ba0 	.word	0x20000ba0
 80087a8:	0800984c 	.word	0x0800984c

080087ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <Get_SerialNum+0x44>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <Get_SerialNum+0x48>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087be:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <Get_SerialNum+0x4c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087d2:	2208      	movs	r2, #8
 80087d4:	4909      	ldr	r1, [pc, #36]	; (80087fc <Get_SerialNum+0x50>)
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f814 	bl	8008804 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087dc:	2204      	movs	r2, #4
 80087de:	4908      	ldr	r1, [pc, #32]	; (8008800 <Get_SerialNum+0x54>)
 80087e0:	68b8      	ldr	r0, [r7, #8]
 80087e2:	f000 f80f 	bl	8008804 <IntToUnicode>
  }
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	1fff7a10 	.word	0x1fff7a10
 80087f4:	1fff7a14 	.word	0x1fff7a14
 80087f8:	1fff7a18 	.word	0x1fff7a18
 80087fc:	200001de 	.word	0x200001de
 8008800:	200001ee 	.word	0x200001ee

08008804 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008816:	2300      	movs	r3, #0
 8008818:	75fb      	strb	r3, [r7, #23]
 800881a:	e027      	b.n	800886c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	0f1b      	lsrs	r3, r3, #28
 8008820:	2b09      	cmp	r3, #9
 8008822:	d80b      	bhi.n	800883c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	0f1b      	lsrs	r3, r3, #28
 8008828:	b2da      	uxtb	r2, r3
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	4619      	mov	r1, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	440b      	add	r3, r1
 8008834:	3230      	adds	r2, #48	; 0x30
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	e00a      	b.n	8008852 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	0f1b      	lsrs	r3, r3, #28
 8008840:	b2da      	uxtb	r2, r3
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	4619      	mov	r1, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	440b      	add	r3, r1
 800884c:	3237      	adds	r2, #55	; 0x37
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	3301      	adds	r3, #1
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4413      	add	r3, r2
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	3301      	adds	r3, #1
 800886a:	75fb      	strb	r3, [r7, #23]
 800886c:	7dfa      	ldrb	r2, [r7, #23]
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	429a      	cmp	r2, r3
 8008872:	d3d3      	bcc.n	800881c <IntToUnicode+0x18>
  }
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
	...

08008884 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	605a      	str	r2, [r3, #4]
 8008896:	609a      	str	r2, [r3, #8]
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088a4:	d13a      	bne.n	800891c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088a6:	2300      	movs	r3, #0
 80088a8:	613b      	str	r3, [r7, #16]
 80088aa:	4b1e      	ldr	r3, [pc, #120]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	4a1d      	ldr	r2, [pc, #116]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	6313      	str	r3, [r2, #48]	; 0x30
 80088b6:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80088c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c8:	2302      	movs	r3, #2
 80088ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d0:	2303      	movs	r3, #3
 80088d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088d4:	230a      	movs	r3, #10
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	4619      	mov	r1, r3
 80088de:	4812      	ldr	r0, [pc, #72]	; (8008928 <HAL_PCD_MspInit+0xa4>)
 80088e0:	f7f9 fc70 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088e4:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	4a0e      	ldr	r2, [pc, #56]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ee:	6353      	str	r3, [r2, #52]	; 0x34
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f8:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 80088fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088fe:	6453      	str	r3, [r2, #68]	; 0x44
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <HAL_PCD_MspInit+0xa0>)
 8008902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	2043      	movs	r0, #67	; 0x43
 8008912:	f7f9 fc20 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008916:	2043      	movs	r0, #67	; 0x43
 8008918:	f7f9 fc39 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800891c:	bf00      	nop
 800891e:	3728      	adds	r7, #40	; 0x28
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40023800 	.word	0x40023800
 8008928:	40020000 	.word	0x40020000

0800892c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fe fbf7 	bl	8007136 <USBD_LL_SetupStage>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	4619      	mov	r1, r3
 800897a:	f7fe fc31 	bl	80071e0 <USBD_LL_DataOutStage>
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	334c      	adds	r3, #76	; 0x4c
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	4619      	mov	r1, r3
 80089ae:	f7fe fcca 	bl	8007346 <USBD_LL_DataInStage>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fdfe 	bl	80075ca <USBD_LL_SOF>
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089de:	2301      	movs	r3, #1
 80089e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d001      	beq.n	80089ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089ea:	f7f8 fa41 	bl	8000e70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089f4:	7bfa      	ldrb	r2, [r7, #15]
 80089f6:	4611      	mov	r1, r2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe fda8 	bl	800754e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fd50 	bl	80074aa <USBD_LL_Reset>
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fda3 	bl	800756e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <HAL_PCD_SuspendCallback+0x48>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	4a03      	ldr	r2, [pc, #12]	; (8008a5c <HAL_PCD_SuspendCallback+0x48>)
 8008a4e:	f043 0306 	orr.w	r3, r3, #6
 8008a52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	e000ed00 	.word	0xe000ed00

08008a60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd93 	bl	800759a <USBD_LL_Resume>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fdeb 	bl	800766e <USBD_LL_IsoOUTIncomplete>
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fda7 	bl	800760a <USBD_LL_IsoINIncomplete>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fdfd 	bl	80076d2 <USBD_LL_DevConnected>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fdfa 	bl	80076e8 <USBD_LL_DevDisconnected>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d13c      	bne.n	8008b86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b0c:	4a20      	ldr	r2, [pc, #128]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a1e      	ldr	r2, [pc, #120]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b18:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b1c:	4b1c      	ldr	r3, [pc, #112]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b24:	4b1a      	ldr	r3, [pc, #104]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b26:	2204      	movs	r2, #4
 8008b28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b2a:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b30:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b36:	4b16      	ldr	r3, [pc, #88]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b38:	2202      	movs	r2, #2
 8008b3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b42:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b48:	4b11      	ldr	r3, [pc, #68]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b54:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b5a:	480d      	ldr	r0, [pc, #52]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b5c:	f7fa f929 	bl	8002db2 <HAL_PCD_Init>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b66:	f7f8 f983 	bl	8000e70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b6a:	2180      	movs	r1, #128	; 0x80
 8008b6c:	4808      	ldr	r0, [pc, #32]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b6e:	f7fb fb68 	bl	8004242 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b72:	2240      	movs	r2, #64	; 0x40
 8008b74:	2100      	movs	r1, #0
 8008b76:	4806      	ldr	r0, [pc, #24]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b78:	f7fb fb1c 	bl	80041b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b7c:	2280      	movs	r2, #128	; 0x80
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4803      	ldr	r0, [pc, #12]	; (8008b90 <USBD_LL_Init+0x94>)
 8008b82:	f7fb fb17 	bl	80041b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000da0 	.word	0x20000da0

08008b94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fa fa1e 	bl	8002fec <HAL_PCD_Start>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f930 	bl	8008e1c <USBD_Get_USB_Status>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4603      	mov	r3, r0
 8008bda:	70fb      	strb	r3, [r7, #3]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70bb      	strb	r3, [r7, #2]
 8008be0:	4613      	mov	r3, r2
 8008be2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bf2:	78bb      	ldrb	r3, [r7, #2]
 8008bf4:	883a      	ldrh	r2, [r7, #0]
 8008bf6:	78f9      	ldrb	r1, [r7, #3]
 8008bf8:	f7fa feef 	bl	80039da <HAL_PCD_EP_Open>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f90a 	bl	8008e1c <USBD_Get_USB_Status>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fa ff38 	bl	8003aaa <HAL_PCD_EP_Close>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 f8eb 	bl	8008e1c <USBD_Get_USB_Status>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fa fff8 	bl	8003c68 <HAL_PCD_EP_SetStall>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f8cc 	bl	8008e1c <USBD_Get_USB_Status>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fb f83d 	bl	8003d30 <HAL_PCD_EP_ClrStall>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f8ad 	bl	8008e1c <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ce2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	da0b      	bge.n	8008d04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	333e      	adds	r3, #62	; 0x3e
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	e00b      	b.n	8008d1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0a:	68f9      	ldr	r1, [r7, #12]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fa fe22 	bl	8003990 <HAL_PCD_SetAddress>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 f862 	bl	8008e1c <USBD_Get_USB_Status>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
 8008d72:	460b      	mov	r3, r1
 8008d74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d84:	7af9      	ldrb	r1, [r7, #11]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	f7fa ff23 	bl	8003bd4 <HAL_PCD_EP_Transmit>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 f841 	bl	8008e1c <USBD_Get_USB_Status>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	607a      	str	r2, [r7, #4]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	460b      	mov	r3, r1
 8008db6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dc6:	7af9      	ldrb	r1, [r7, #11]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	f7fa feb7 	bl	8003b3e <HAL_PCD_EP_Receive>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f820 	bl	8008e1c <USBD_Get_USB_Status>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008de0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008df4:	4b03      	ldr	r3, [pc, #12]	; (8008e04 <USBD_static_malloc+0x18>)
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	200012ac 	.word	0x200012ac

08008e08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]

}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d817      	bhi.n	8008e60 <USBD_Get_USB_Status+0x44>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBD_Get_USB_Status+0x1c>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e49 	.word	0x08008e49
 8008e3c:	08008e4f 	.word	0x08008e4f
 8008e40:	08008e55 	.word	0x08008e55
 8008e44:	08008e5b 	.word	0x08008e5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4c:	e00b      	b.n	8008e66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	73fb      	strb	r3, [r7, #15]
    break;
 8008e52:	e008      	b.n	8008e66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e54:	2301      	movs	r3, #1
 8008e56:	73fb      	strb	r3, [r7, #15]
    break;
 8008e58:	e005      	b.n	8008e66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5e:	e002      	b.n	8008e66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e60:	2303      	movs	r3, #3
 8008e62:	73fb      	strb	r3, [r7, #15]
    break;
 8008e64:	bf00      	nop
  }
  return usb_status;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <__errno>:
 8008e74:	4b01      	ldr	r3, [pc, #4]	; (8008e7c <__errno+0x8>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	200001f8 	.word	0x200001f8

08008e80 <__libc_init_array>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	4d0d      	ldr	r5, [pc, #52]	; (8008eb8 <__libc_init_array+0x38>)
 8008e84:	4c0d      	ldr	r4, [pc, #52]	; (8008ebc <__libc_init_array+0x3c>)
 8008e86:	1b64      	subs	r4, r4, r5
 8008e88:	10a4      	asrs	r4, r4, #2
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	d109      	bne.n	8008ea4 <__libc_init_array+0x24>
 8008e90:	4d0b      	ldr	r5, [pc, #44]	; (8008ec0 <__libc_init_array+0x40>)
 8008e92:	4c0c      	ldr	r4, [pc, #48]	; (8008ec4 <__libc_init_array+0x44>)
 8008e94:	f000 fc8e 	bl	80097b4 <_init>
 8008e98:	1b64      	subs	r4, r4, r5
 8008e9a:	10a4      	asrs	r4, r4, #2
 8008e9c:	2600      	movs	r6, #0
 8008e9e:	42a6      	cmp	r6, r4
 8008ea0:	d105      	bne.n	8008eae <__libc_init_array+0x2e>
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea8:	4798      	blx	r3
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7ee      	b.n	8008e8c <__libc_init_array+0xc>
 8008eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb2:	4798      	blx	r3
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	e7f2      	b.n	8008e9e <__libc_init_array+0x1e>
 8008eb8:	08009ea8 	.word	0x08009ea8
 8008ebc:	08009ea8 	.word	0x08009ea8
 8008ec0:	08009ea8 	.word	0x08009ea8
 8008ec4:	08009eac 	.word	0x08009eac

08008ec8 <memcpy>:
 8008ec8:	440a      	add	r2, r1
 8008eca:	4291      	cmp	r1, r2
 8008ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ed0:	d100      	bne.n	8008ed4 <memcpy+0xc>
 8008ed2:	4770      	bx	lr
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ede:	4291      	cmp	r1, r2
 8008ee0:	d1f9      	bne.n	8008ed6 <memcpy+0xe>
 8008ee2:	bd10      	pop	{r4, pc}

08008ee4 <memmove>:
 8008ee4:	4288      	cmp	r0, r1
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	eb01 0402 	add.w	r4, r1, r2
 8008eec:	d902      	bls.n	8008ef4 <memmove+0x10>
 8008eee:	4284      	cmp	r4, r0
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	d807      	bhi.n	8008f04 <memmove+0x20>
 8008ef4:	1e43      	subs	r3, r0, #1
 8008ef6:	42a1      	cmp	r1, r4
 8008ef8:	d008      	beq.n	8008f0c <memmove+0x28>
 8008efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f02:	e7f8      	b.n	8008ef6 <memmove+0x12>
 8008f04:	4402      	add	r2, r0
 8008f06:	4601      	mov	r1, r0
 8008f08:	428a      	cmp	r2, r1
 8008f0a:	d100      	bne.n	8008f0e <memmove+0x2a>
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f16:	e7f7      	b.n	8008f08 <memmove+0x24>

08008f18 <memset>:
 8008f18:	4402      	add	r2, r0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d100      	bne.n	8008f22 <memset+0xa>
 8008f20:	4770      	bx	lr
 8008f22:	f803 1b01 	strb.w	r1, [r3], #1
 8008f26:	e7f9      	b.n	8008f1c <memset+0x4>

08008f28 <siprintf>:
 8008f28:	b40e      	push	{r1, r2, r3}
 8008f2a:	b500      	push	{lr}
 8008f2c:	b09c      	sub	sp, #112	; 0x70
 8008f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f30:	9002      	str	r0, [sp, #8]
 8008f32:	9006      	str	r0, [sp, #24]
 8008f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f38:	4809      	ldr	r0, [pc, #36]	; (8008f60 <siprintf+0x38>)
 8008f3a:	9107      	str	r1, [sp, #28]
 8008f3c:	9104      	str	r1, [sp, #16]
 8008f3e:	4909      	ldr	r1, [pc, #36]	; (8008f64 <siprintf+0x3c>)
 8008f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f44:	9105      	str	r1, [sp, #20]
 8008f46:	6800      	ldr	r0, [r0, #0]
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	a902      	add	r1, sp, #8
 8008f4c:	f000 f868 	bl	8009020 <_svfiprintf_r>
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	b01c      	add	sp, #112	; 0x70
 8008f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f5c:	b003      	add	sp, #12
 8008f5e:	4770      	bx	lr
 8008f60:	200001f8 	.word	0x200001f8
 8008f64:	ffff0208 	.word	0xffff0208

08008f68 <__ssputs_r>:
 8008f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	688e      	ldr	r6, [r1, #8]
 8008f6e:	429e      	cmp	r6, r3
 8008f70:	4682      	mov	sl, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	4690      	mov	r8, r2
 8008f76:	461f      	mov	r7, r3
 8008f78:	d838      	bhi.n	8008fec <__ssputs_r+0x84>
 8008f7a:	898a      	ldrh	r2, [r1, #12]
 8008f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f80:	d032      	beq.n	8008fe8 <__ssputs_r+0x80>
 8008f82:	6825      	ldr	r5, [r4, #0]
 8008f84:	6909      	ldr	r1, [r1, #16]
 8008f86:	eba5 0901 	sub.w	r9, r5, r1
 8008f8a:	6965      	ldr	r5, [r4, #20]
 8008f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f94:	3301      	adds	r3, #1
 8008f96:	444b      	add	r3, r9
 8008f98:	106d      	asrs	r5, r5, #1
 8008f9a:	429d      	cmp	r5, r3
 8008f9c:	bf38      	it	cc
 8008f9e:	461d      	movcc	r5, r3
 8008fa0:	0553      	lsls	r3, r2, #21
 8008fa2:	d531      	bpl.n	8009008 <__ssputs_r+0xa0>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f000 fb3b 	bl	8009620 <_malloc_r>
 8008faa:	4606      	mov	r6, r0
 8008fac:	b950      	cbnz	r0, 8008fc4 <__ssputs_r+0x5c>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	f8ca 3000 	str.w	r3, [sl]
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc4:	6921      	ldr	r1, [r4, #16]
 8008fc6:	464a      	mov	r2, r9
 8008fc8:	f7ff ff7e 	bl	8008ec8 <memcpy>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	6126      	str	r6, [r4, #16]
 8008fda:	6165      	str	r5, [r4, #20]
 8008fdc:	444e      	add	r6, r9
 8008fde:	eba5 0509 	sub.w	r5, r5, r9
 8008fe2:	6026      	str	r6, [r4, #0]
 8008fe4:	60a5      	str	r5, [r4, #8]
 8008fe6:	463e      	mov	r6, r7
 8008fe8:	42be      	cmp	r6, r7
 8008fea:	d900      	bls.n	8008fee <__ssputs_r+0x86>
 8008fec:	463e      	mov	r6, r7
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	f7ff ff76 	bl	8008ee4 <memmove>
 8008ff8:	68a3      	ldr	r3, [r4, #8]
 8008ffa:	1b9b      	subs	r3, r3, r6
 8008ffc:	60a3      	str	r3, [r4, #8]
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	4433      	add	r3, r6
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	2000      	movs	r0, #0
 8009006:	e7db      	b.n	8008fc0 <__ssputs_r+0x58>
 8009008:	462a      	mov	r2, r5
 800900a:	f000 fb7d 	bl	8009708 <_realloc_r>
 800900e:	4606      	mov	r6, r0
 8009010:	2800      	cmp	r0, #0
 8009012:	d1e1      	bne.n	8008fd8 <__ssputs_r+0x70>
 8009014:	6921      	ldr	r1, [r4, #16]
 8009016:	4650      	mov	r0, sl
 8009018:	f000 fa96 	bl	8009548 <_free_r>
 800901c:	e7c7      	b.n	8008fae <__ssputs_r+0x46>
	...

08009020 <_svfiprintf_r>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	4698      	mov	r8, r3
 8009026:	898b      	ldrh	r3, [r1, #12]
 8009028:	061b      	lsls	r3, r3, #24
 800902a:	b09d      	sub	sp, #116	; 0x74
 800902c:	4607      	mov	r7, r0
 800902e:	460d      	mov	r5, r1
 8009030:	4614      	mov	r4, r2
 8009032:	d50e      	bpl.n	8009052 <_svfiprintf_r+0x32>
 8009034:	690b      	ldr	r3, [r1, #16]
 8009036:	b963      	cbnz	r3, 8009052 <_svfiprintf_r+0x32>
 8009038:	2140      	movs	r1, #64	; 0x40
 800903a:	f000 faf1 	bl	8009620 <_malloc_r>
 800903e:	6028      	str	r0, [r5, #0]
 8009040:	6128      	str	r0, [r5, #16]
 8009042:	b920      	cbnz	r0, 800904e <_svfiprintf_r+0x2e>
 8009044:	230c      	movs	r3, #12
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	e0d1      	b.n	80091f2 <_svfiprintf_r+0x1d2>
 800904e:	2340      	movs	r3, #64	; 0x40
 8009050:	616b      	str	r3, [r5, #20]
 8009052:	2300      	movs	r3, #0
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	2320      	movs	r3, #32
 8009058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800905c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009060:	2330      	movs	r3, #48	; 0x30
 8009062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800920c <_svfiprintf_r+0x1ec>
 8009066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800906a:	f04f 0901 	mov.w	r9, #1
 800906e:	4623      	mov	r3, r4
 8009070:	469a      	mov	sl, r3
 8009072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009076:	b10a      	cbz	r2, 800907c <_svfiprintf_r+0x5c>
 8009078:	2a25      	cmp	r2, #37	; 0x25
 800907a:	d1f9      	bne.n	8009070 <_svfiprintf_r+0x50>
 800907c:	ebba 0b04 	subs.w	fp, sl, r4
 8009080:	d00b      	beq.n	800909a <_svfiprintf_r+0x7a>
 8009082:	465b      	mov	r3, fp
 8009084:	4622      	mov	r2, r4
 8009086:	4629      	mov	r1, r5
 8009088:	4638      	mov	r0, r7
 800908a:	f7ff ff6d 	bl	8008f68 <__ssputs_r>
 800908e:	3001      	adds	r0, #1
 8009090:	f000 80aa 	beq.w	80091e8 <_svfiprintf_r+0x1c8>
 8009094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009096:	445a      	add	r2, fp
 8009098:	9209      	str	r2, [sp, #36]	; 0x24
 800909a:	f89a 3000 	ldrb.w	r3, [sl]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 80a2 	beq.w	80091e8 <_svfiprintf_r+0x1c8>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295
 80090aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ae:	f10a 0a01 	add.w	sl, sl, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	9307      	str	r3, [sp, #28]
 80090b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ba:	931a      	str	r3, [sp, #104]	; 0x68
 80090bc:	4654      	mov	r4, sl
 80090be:	2205      	movs	r2, #5
 80090c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c4:	4851      	ldr	r0, [pc, #324]	; (800920c <_svfiprintf_r+0x1ec>)
 80090c6:	f7f7 f88b 	bl	80001e0 <memchr>
 80090ca:	9a04      	ldr	r2, [sp, #16]
 80090cc:	b9d8      	cbnz	r0, 8009106 <_svfiprintf_r+0xe6>
 80090ce:	06d0      	lsls	r0, r2, #27
 80090d0:	bf44      	itt	mi
 80090d2:	2320      	movmi	r3, #32
 80090d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d8:	0711      	lsls	r1, r2, #28
 80090da:	bf44      	itt	mi
 80090dc:	232b      	movmi	r3, #43	; 0x2b
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e2:	f89a 3000 	ldrb.w	r3, [sl]
 80090e6:	2b2a      	cmp	r3, #42	; 0x2a
 80090e8:	d015      	beq.n	8009116 <_svfiprintf_r+0xf6>
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	4654      	mov	r4, sl
 80090ee:	2000      	movs	r0, #0
 80090f0:	f04f 0c0a 	mov.w	ip, #10
 80090f4:	4621      	mov	r1, r4
 80090f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fa:	3b30      	subs	r3, #48	; 0x30
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	d94e      	bls.n	800919e <_svfiprintf_r+0x17e>
 8009100:	b1b0      	cbz	r0, 8009130 <_svfiprintf_r+0x110>
 8009102:	9207      	str	r2, [sp, #28]
 8009104:	e014      	b.n	8009130 <_svfiprintf_r+0x110>
 8009106:	eba0 0308 	sub.w	r3, r0, r8
 800910a:	fa09 f303 	lsl.w	r3, r9, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	46a2      	mov	sl, r4
 8009114:	e7d2      	b.n	80090bc <_svfiprintf_r+0x9c>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	1d19      	adds	r1, r3, #4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	9103      	str	r1, [sp, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfbb      	ittet	lt
 8009122:	425b      	neglt	r3, r3
 8009124:	f042 0202 	orrlt.w	r2, r2, #2
 8009128:	9307      	strge	r3, [sp, #28]
 800912a:	9307      	strlt	r3, [sp, #28]
 800912c:	bfb8      	it	lt
 800912e:	9204      	strlt	r2, [sp, #16]
 8009130:	7823      	ldrb	r3, [r4, #0]
 8009132:	2b2e      	cmp	r3, #46	; 0x2e
 8009134:	d10c      	bne.n	8009150 <_svfiprintf_r+0x130>
 8009136:	7863      	ldrb	r3, [r4, #1]
 8009138:	2b2a      	cmp	r3, #42	; 0x2a
 800913a:	d135      	bne.n	80091a8 <_svfiprintf_r+0x188>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	1d1a      	adds	r2, r3, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	9203      	str	r2, [sp, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfb8      	it	lt
 8009148:	f04f 33ff 	movlt.w	r3, #4294967295
 800914c:	3402      	adds	r4, #2
 800914e:	9305      	str	r3, [sp, #20]
 8009150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800921c <_svfiprintf_r+0x1fc>
 8009154:	7821      	ldrb	r1, [r4, #0]
 8009156:	2203      	movs	r2, #3
 8009158:	4650      	mov	r0, sl
 800915a:	f7f7 f841 	bl	80001e0 <memchr>
 800915e:	b140      	cbz	r0, 8009172 <_svfiprintf_r+0x152>
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	eba0 000a 	sub.w	r0, r0, sl
 8009166:	fa03 f000 	lsl.w	r0, r3, r0
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	4303      	orrs	r3, r0
 800916e:	3401      	adds	r4, #1
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009176:	4826      	ldr	r0, [pc, #152]	; (8009210 <_svfiprintf_r+0x1f0>)
 8009178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800917c:	2206      	movs	r2, #6
 800917e:	f7f7 f82f 	bl	80001e0 <memchr>
 8009182:	2800      	cmp	r0, #0
 8009184:	d038      	beq.n	80091f8 <_svfiprintf_r+0x1d8>
 8009186:	4b23      	ldr	r3, [pc, #140]	; (8009214 <_svfiprintf_r+0x1f4>)
 8009188:	bb1b      	cbnz	r3, 80091d2 <_svfiprintf_r+0x1b2>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	3307      	adds	r3, #7
 800918e:	f023 0307 	bic.w	r3, r3, #7
 8009192:	3308      	adds	r3, #8
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009198:	4433      	add	r3, r6
 800919a:	9309      	str	r3, [sp, #36]	; 0x24
 800919c:	e767      	b.n	800906e <_svfiprintf_r+0x4e>
 800919e:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a2:	460c      	mov	r4, r1
 80091a4:	2001      	movs	r0, #1
 80091a6:	e7a5      	b.n	80090f4 <_svfiprintf_r+0xd4>
 80091a8:	2300      	movs	r3, #0
 80091aa:	3401      	adds	r4, #1
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	4619      	mov	r1, r3
 80091b0:	f04f 0c0a 	mov.w	ip, #10
 80091b4:	4620      	mov	r0, r4
 80091b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ba:	3a30      	subs	r2, #48	; 0x30
 80091bc:	2a09      	cmp	r2, #9
 80091be:	d903      	bls.n	80091c8 <_svfiprintf_r+0x1a8>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0c5      	beq.n	8009150 <_svfiprintf_r+0x130>
 80091c4:	9105      	str	r1, [sp, #20]
 80091c6:	e7c3      	b.n	8009150 <_svfiprintf_r+0x130>
 80091c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091cc:	4604      	mov	r4, r0
 80091ce:	2301      	movs	r3, #1
 80091d0:	e7f0      	b.n	80091b4 <_svfiprintf_r+0x194>
 80091d2:	ab03      	add	r3, sp, #12
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	462a      	mov	r2, r5
 80091d8:	4b0f      	ldr	r3, [pc, #60]	; (8009218 <_svfiprintf_r+0x1f8>)
 80091da:	a904      	add	r1, sp, #16
 80091dc:	4638      	mov	r0, r7
 80091de:	f3af 8000 	nop.w
 80091e2:	1c42      	adds	r2, r0, #1
 80091e4:	4606      	mov	r6, r0
 80091e6:	d1d6      	bne.n	8009196 <_svfiprintf_r+0x176>
 80091e8:	89ab      	ldrh	r3, [r5, #12]
 80091ea:	065b      	lsls	r3, r3, #25
 80091ec:	f53f af2c 	bmi.w	8009048 <_svfiprintf_r+0x28>
 80091f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f2:	b01d      	add	sp, #116	; 0x74
 80091f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f8:	ab03      	add	r3, sp, #12
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	462a      	mov	r2, r5
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <_svfiprintf_r+0x1f8>)
 8009200:	a904      	add	r1, sp, #16
 8009202:	4638      	mov	r0, r7
 8009204:	f000 f87a 	bl	80092fc <_printf_i>
 8009208:	e7eb      	b.n	80091e2 <_svfiprintf_r+0x1c2>
 800920a:	bf00      	nop
 800920c:	08009e6c 	.word	0x08009e6c
 8009210:	08009e76 	.word	0x08009e76
 8009214:	00000000 	.word	0x00000000
 8009218:	08008f69 	.word	0x08008f69
 800921c:	08009e72 	.word	0x08009e72

08009220 <_printf_common>:
 8009220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	4616      	mov	r6, r2
 8009226:	4699      	mov	r9, r3
 8009228:	688a      	ldr	r2, [r1, #8]
 800922a:	690b      	ldr	r3, [r1, #16]
 800922c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009230:	4293      	cmp	r3, r2
 8009232:	bfb8      	it	lt
 8009234:	4613      	movlt	r3, r2
 8009236:	6033      	str	r3, [r6, #0]
 8009238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800923c:	4607      	mov	r7, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b10a      	cbz	r2, 8009246 <_printf_common+0x26>
 8009242:	3301      	adds	r3, #1
 8009244:	6033      	str	r3, [r6, #0]
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	0699      	lsls	r1, r3, #26
 800924a:	bf42      	ittt	mi
 800924c:	6833      	ldrmi	r3, [r6, #0]
 800924e:	3302      	addmi	r3, #2
 8009250:	6033      	strmi	r3, [r6, #0]
 8009252:	6825      	ldr	r5, [r4, #0]
 8009254:	f015 0506 	ands.w	r5, r5, #6
 8009258:	d106      	bne.n	8009268 <_printf_common+0x48>
 800925a:	f104 0a19 	add.w	sl, r4, #25
 800925e:	68e3      	ldr	r3, [r4, #12]
 8009260:	6832      	ldr	r2, [r6, #0]
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	42ab      	cmp	r3, r5
 8009266:	dc26      	bgt.n	80092b6 <_printf_common+0x96>
 8009268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800926c:	1e13      	subs	r3, r2, #0
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	bf18      	it	ne
 8009272:	2301      	movne	r3, #1
 8009274:	0692      	lsls	r2, r2, #26
 8009276:	d42b      	bmi.n	80092d0 <_printf_common+0xb0>
 8009278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800927c:	4649      	mov	r1, r9
 800927e:	4638      	mov	r0, r7
 8009280:	47c0      	blx	r8
 8009282:	3001      	adds	r0, #1
 8009284:	d01e      	beq.n	80092c4 <_printf_common+0xa4>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	68e5      	ldr	r5, [r4, #12]
 800928a:	6832      	ldr	r2, [r6, #0]
 800928c:	f003 0306 	and.w	r3, r3, #6
 8009290:	2b04      	cmp	r3, #4
 8009292:	bf08      	it	eq
 8009294:	1aad      	subeq	r5, r5, r2
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	6922      	ldr	r2, [r4, #16]
 800929a:	bf0c      	ite	eq
 800929c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092a0:	2500      	movne	r5, #0
 80092a2:	4293      	cmp	r3, r2
 80092a4:	bfc4      	itt	gt
 80092a6:	1a9b      	subgt	r3, r3, r2
 80092a8:	18ed      	addgt	r5, r5, r3
 80092aa:	2600      	movs	r6, #0
 80092ac:	341a      	adds	r4, #26
 80092ae:	42b5      	cmp	r5, r6
 80092b0:	d11a      	bne.n	80092e8 <_printf_common+0xc8>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e008      	b.n	80092c8 <_printf_common+0xa8>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4652      	mov	r2, sl
 80092ba:	4649      	mov	r1, r9
 80092bc:	4638      	mov	r0, r7
 80092be:	47c0      	blx	r8
 80092c0:	3001      	adds	r0, #1
 80092c2:	d103      	bne.n	80092cc <_printf_common+0xac>
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092cc:	3501      	adds	r5, #1
 80092ce:	e7c6      	b.n	800925e <_printf_common+0x3e>
 80092d0:	18e1      	adds	r1, r4, r3
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	2030      	movs	r0, #48	; 0x30
 80092d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092da:	4422      	add	r2, r4
 80092dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092e4:	3302      	adds	r3, #2
 80092e6:	e7c7      	b.n	8009278 <_printf_common+0x58>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4622      	mov	r2, r4
 80092ec:	4649      	mov	r1, r9
 80092ee:	4638      	mov	r0, r7
 80092f0:	47c0      	blx	r8
 80092f2:	3001      	adds	r0, #1
 80092f4:	d0e6      	beq.n	80092c4 <_printf_common+0xa4>
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7d9      	b.n	80092ae <_printf_common+0x8e>
	...

080092fc <_printf_i>:
 80092fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	7e0f      	ldrb	r7, [r1, #24]
 8009302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009304:	2f78      	cmp	r7, #120	; 0x78
 8009306:	4691      	mov	r9, r2
 8009308:	4680      	mov	r8, r0
 800930a:	460c      	mov	r4, r1
 800930c:	469a      	mov	sl, r3
 800930e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009312:	d807      	bhi.n	8009324 <_printf_i+0x28>
 8009314:	2f62      	cmp	r7, #98	; 0x62
 8009316:	d80a      	bhi.n	800932e <_printf_i+0x32>
 8009318:	2f00      	cmp	r7, #0
 800931a:	f000 80d8 	beq.w	80094ce <_printf_i+0x1d2>
 800931e:	2f58      	cmp	r7, #88	; 0x58
 8009320:	f000 80a3 	beq.w	800946a <_printf_i+0x16e>
 8009324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800932c:	e03a      	b.n	80093a4 <_printf_i+0xa8>
 800932e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009332:	2b15      	cmp	r3, #21
 8009334:	d8f6      	bhi.n	8009324 <_printf_i+0x28>
 8009336:	a101      	add	r1, pc, #4	; (adr r1, 800933c <_printf_i+0x40>)
 8009338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800933c:	08009395 	.word	0x08009395
 8009340:	080093a9 	.word	0x080093a9
 8009344:	08009325 	.word	0x08009325
 8009348:	08009325 	.word	0x08009325
 800934c:	08009325 	.word	0x08009325
 8009350:	08009325 	.word	0x08009325
 8009354:	080093a9 	.word	0x080093a9
 8009358:	08009325 	.word	0x08009325
 800935c:	08009325 	.word	0x08009325
 8009360:	08009325 	.word	0x08009325
 8009364:	08009325 	.word	0x08009325
 8009368:	080094b5 	.word	0x080094b5
 800936c:	080093d9 	.word	0x080093d9
 8009370:	08009497 	.word	0x08009497
 8009374:	08009325 	.word	0x08009325
 8009378:	08009325 	.word	0x08009325
 800937c:	080094d7 	.word	0x080094d7
 8009380:	08009325 	.word	0x08009325
 8009384:	080093d9 	.word	0x080093d9
 8009388:	08009325 	.word	0x08009325
 800938c:	08009325 	.word	0x08009325
 8009390:	0800949f 	.word	0x0800949f
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	602a      	str	r2, [r5, #0]
 800939c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0a3      	b.n	80094f0 <_printf_i+0x1f4>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	6829      	ldr	r1, [r5, #0]
 80093ac:	0606      	lsls	r6, r0, #24
 80093ae:	f101 0304 	add.w	r3, r1, #4
 80093b2:	d50a      	bpl.n	80093ca <_printf_i+0xce>
 80093b4:	680e      	ldr	r6, [r1, #0]
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	2e00      	cmp	r6, #0
 80093ba:	da03      	bge.n	80093c4 <_printf_i+0xc8>
 80093bc:	232d      	movs	r3, #45	; 0x2d
 80093be:	4276      	negs	r6, r6
 80093c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c4:	485e      	ldr	r0, [pc, #376]	; (8009540 <_printf_i+0x244>)
 80093c6:	230a      	movs	r3, #10
 80093c8:	e019      	b.n	80093fe <_printf_i+0x102>
 80093ca:	680e      	ldr	r6, [r1, #0]
 80093cc:	602b      	str	r3, [r5, #0]
 80093ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093d2:	bf18      	it	ne
 80093d4:	b236      	sxthne	r6, r6
 80093d6:	e7ef      	b.n	80093b8 <_printf_i+0xbc>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	6820      	ldr	r0, [r4, #0]
 80093dc:	1d19      	adds	r1, r3, #4
 80093de:	6029      	str	r1, [r5, #0]
 80093e0:	0601      	lsls	r1, r0, #24
 80093e2:	d501      	bpl.n	80093e8 <_printf_i+0xec>
 80093e4:	681e      	ldr	r6, [r3, #0]
 80093e6:	e002      	b.n	80093ee <_printf_i+0xf2>
 80093e8:	0646      	lsls	r6, r0, #25
 80093ea:	d5fb      	bpl.n	80093e4 <_printf_i+0xe8>
 80093ec:	881e      	ldrh	r6, [r3, #0]
 80093ee:	4854      	ldr	r0, [pc, #336]	; (8009540 <_printf_i+0x244>)
 80093f0:	2f6f      	cmp	r7, #111	; 0x6f
 80093f2:	bf0c      	ite	eq
 80093f4:	2308      	moveq	r3, #8
 80093f6:	230a      	movne	r3, #10
 80093f8:	2100      	movs	r1, #0
 80093fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093fe:	6865      	ldr	r5, [r4, #4]
 8009400:	60a5      	str	r5, [r4, #8]
 8009402:	2d00      	cmp	r5, #0
 8009404:	bfa2      	ittt	ge
 8009406:	6821      	ldrge	r1, [r4, #0]
 8009408:	f021 0104 	bicge.w	r1, r1, #4
 800940c:	6021      	strge	r1, [r4, #0]
 800940e:	b90e      	cbnz	r6, 8009414 <_printf_i+0x118>
 8009410:	2d00      	cmp	r5, #0
 8009412:	d04d      	beq.n	80094b0 <_printf_i+0x1b4>
 8009414:	4615      	mov	r5, r2
 8009416:	fbb6 f1f3 	udiv	r1, r6, r3
 800941a:	fb03 6711 	mls	r7, r3, r1, r6
 800941e:	5dc7      	ldrb	r7, [r0, r7]
 8009420:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009424:	4637      	mov	r7, r6
 8009426:	42bb      	cmp	r3, r7
 8009428:	460e      	mov	r6, r1
 800942a:	d9f4      	bls.n	8009416 <_printf_i+0x11a>
 800942c:	2b08      	cmp	r3, #8
 800942e:	d10b      	bne.n	8009448 <_printf_i+0x14c>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	07de      	lsls	r6, r3, #31
 8009434:	d508      	bpl.n	8009448 <_printf_i+0x14c>
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	6861      	ldr	r1, [r4, #4]
 800943a:	4299      	cmp	r1, r3
 800943c:	bfde      	ittt	le
 800943e:	2330      	movle	r3, #48	; 0x30
 8009440:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009444:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009448:	1b52      	subs	r2, r2, r5
 800944a:	6122      	str	r2, [r4, #16]
 800944c:	f8cd a000 	str.w	sl, [sp]
 8009450:	464b      	mov	r3, r9
 8009452:	aa03      	add	r2, sp, #12
 8009454:	4621      	mov	r1, r4
 8009456:	4640      	mov	r0, r8
 8009458:	f7ff fee2 	bl	8009220 <_printf_common>
 800945c:	3001      	adds	r0, #1
 800945e:	d14c      	bne.n	80094fa <_printf_i+0x1fe>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	b004      	add	sp, #16
 8009466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946a:	4835      	ldr	r0, [pc, #212]	; (8009540 <_printf_i+0x244>)
 800946c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009470:	6829      	ldr	r1, [r5, #0]
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	f851 6b04 	ldr.w	r6, [r1], #4
 8009478:	6029      	str	r1, [r5, #0]
 800947a:	061d      	lsls	r5, r3, #24
 800947c:	d514      	bpl.n	80094a8 <_printf_i+0x1ac>
 800947e:	07df      	lsls	r7, r3, #31
 8009480:	bf44      	itt	mi
 8009482:	f043 0320 	orrmi.w	r3, r3, #32
 8009486:	6023      	strmi	r3, [r4, #0]
 8009488:	b91e      	cbnz	r6, 8009492 <_printf_i+0x196>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	f023 0320 	bic.w	r3, r3, #32
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	2310      	movs	r3, #16
 8009494:	e7b0      	b.n	80093f8 <_printf_i+0xfc>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	f043 0320 	orr.w	r3, r3, #32
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	2378      	movs	r3, #120	; 0x78
 80094a0:	4828      	ldr	r0, [pc, #160]	; (8009544 <_printf_i+0x248>)
 80094a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094a6:	e7e3      	b.n	8009470 <_printf_i+0x174>
 80094a8:	0659      	lsls	r1, r3, #25
 80094aa:	bf48      	it	mi
 80094ac:	b2b6      	uxthmi	r6, r6
 80094ae:	e7e6      	b.n	800947e <_printf_i+0x182>
 80094b0:	4615      	mov	r5, r2
 80094b2:	e7bb      	b.n	800942c <_printf_i+0x130>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	6826      	ldr	r6, [r4, #0]
 80094b8:	6961      	ldr	r1, [r4, #20]
 80094ba:	1d18      	adds	r0, r3, #4
 80094bc:	6028      	str	r0, [r5, #0]
 80094be:	0635      	lsls	r5, r6, #24
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	d501      	bpl.n	80094c8 <_printf_i+0x1cc>
 80094c4:	6019      	str	r1, [r3, #0]
 80094c6:	e002      	b.n	80094ce <_printf_i+0x1d2>
 80094c8:	0670      	lsls	r0, r6, #25
 80094ca:	d5fb      	bpl.n	80094c4 <_printf_i+0x1c8>
 80094cc:	8019      	strh	r1, [r3, #0]
 80094ce:	2300      	movs	r3, #0
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	4615      	mov	r5, r2
 80094d4:	e7ba      	b.n	800944c <_printf_i+0x150>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	1d1a      	adds	r2, r3, #4
 80094da:	602a      	str	r2, [r5, #0]
 80094dc:	681d      	ldr	r5, [r3, #0]
 80094de:	6862      	ldr	r2, [r4, #4]
 80094e0:	2100      	movs	r1, #0
 80094e2:	4628      	mov	r0, r5
 80094e4:	f7f6 fe7c 	bl	80001e0 <memchr>
 80094e8:	b108      	cbz	r0, 80094ee <_printf_i+0x1f2>
 80094ea:	1b40      	subs	r0, r0, r5
 80094ec:	6060      	str	r0, [r4, #4]
 80094ee:	6863      	ldr	r3, [r4, #4]
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	2300      	movs	r3, #0
 80094f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094f8:	e7a8      	b.n	800944c <_printf_i+0x150>
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	462a      	mov	r2, r5
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	47d0      	blx	sl
 8009504:	3001      	adds	r0, #1
 8009506:	d0ab      	beq.n	8009460 <_printf_i+0x164>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	079b      	lsls	r3, r3, #30
 800950c:	d413      	bmi.n	8009536 <_printf_i+0x23a>
 800950e:	68e0      	ldr	r0, [r4, #12]
 8009510:	9b03      	ldr	r3, [sp, #12]
 8009512:	4298      	cmp	r0, r3
 8009514:	bfb8      	it	lt
 8009516:	4618      	movlt	r0, r3
 8009518:	e7a4      	b.n	8009464 <_printf_i+0x168>
 800951a:	2301      	movs	r3, #1
 800951c:	4632      	mov	r2, r6
 800951e:	4649      	mov	r1, r9
 8009520:	4640      	mov	r0, r8
 8009522:	47d0      	blx	sl
 8009524:	3001      	adds	r0, #1
 8009526:	d09b      	beq.n	8009460 <_printf_i+0x164>
 8009528:	3501      	adds	r5, #1
 800952a:	68e3      	ldr	r3, [r4, #12]
 800952c:	9903      	ldr	r1, [sp, #12]
 800952e:	1a5b      	subs	r3, r3, r1
 8009530:	42ab      	cmp	r3, r5
 8009532:	dcf2      	bgt.n	800951a <_printf_i+0x21e>
 8009534:	e7eb      	b.n	800950e <_printf_i+0x212>
 8009536:	2500      	movs	r5, #0
 8009538:	f104 0619 	add.w	r6, r4, #25
 800953c:	e7f5      	b.n	800952a <_printf_i+0x22e>
 800953e:	bf00      	nop
 8009540:	08009e7d 	.word	0x08009e7d
 8009544:	08009e8e 	.word	0x08009e8e

08009548 <_free_r>:
 8009548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800954a:	2900      	cmp	r1, #0
 800954c:	d044      	beq.n	80095d8 <_free_r+0x90>
 800954e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009552:	9001      	str	r0, [sp, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f1a1 0404 	sub.w	r4, r1, #4
 800955a:	bfb8      	it	lt
 800955c:	18e4      	addlt	r4, r4, r3
 800955e:	f000 f913 	bl	8009788 <__malloc_lock>
 8009562:	4a1e      	ldr	r2, [pc, #120]	; (80095dc <_free_r+0x94>)
 8009564:	9801      	ldr	r0, [sp, #4]
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	b933      	cbnz	r3, 8009578 <_free_r+0x30>
 800956a:	6063      	str	r3, [r4, #4]
 800956c:	6014      	str	r4, [r2, #0]
 800956e:	b003      	add	sp, #12
 8009570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009574:	f000 b90e 	b.w	8009794 <__malloc_unlock>
 8009578:	42a3      	cmp	r3, r4
 800957a:	d908      	bls.n	800958e <_free_r+0x46>
 800957c:	6825      	ldr	r5, [r4, #0]
 800957e:	1961      	adds	r1, r4, r5
 8009580:	428b      	cmp	r3, r1
 8009582:	bf01      	itttt	eq
 8009584:	6819      	ldreq	r1, [r3, #0]
 8009586:	685b      	ldreq	r3, [r3, #4]
 8009588:	1949      	addeq	r1, r1, r5
 800958a:	6021      	streq	r1, [r4, #0]
 800958c:	e7ed      	b.n	800956a <_free_r+0x22>
 800958e:	461a      	mov	r2, r3
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	b10b      	cbz	r3, 8009598 <_free_r+0x50>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d9fa      	bls.n	800958e <_free_r+0x46>
 8009598:	6811      	ldr	r1, [r2, #0]
 800959a:	1855      	adds	r5, r2, r1
 800959c:	42a5      	cmp	r5, r4
 800959e:	d10b      	bne.n	80095b8 <_free_r+0x70>
 80095a0:	6824      	ldr	r4, [r4, #0]
 80095a2:	4421      	add	r1, r4
 80095a4:	1854      	adds	r4, r2, r1
 80095a6:	42a3      	cmp	r3, r4
 80095a8:	6011      	str	r1, [r2, #0]
 80095aa:	d1e0      	bne.n	800956e <_free_r+0x26>
 80095ac:	681c      	ldr	r4, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	6053      	str	r3, [r2, #4]
 80095b2:	4421      	add	r1, r4
 80095b4:	6011      	str	r1, [r2, #0]
 80095b6:	e7da      	b.n	800956e <_free_r+0x26>
 80095b8:	d902      	bls.n	80095c0 <_free_r+0x78>
 80095ba:	230c      	movs	r3, #12
 80095bc:	6003      	str	r3, [r0, #0]
 80095be:	e7d6      	b.n	800956e <_free_r+0x26>
 80095c0:	6825      	ldr	r5, [r4, #0]
 80095c2:	1961      	adds	r1, r4, r5
 80095c4:	428b      	cmp	r3, r1
 80095c6:	bf04      	itt	eq
 80095c8:	6819      	ldreq	r1, [r3, #0]
 80095ca:	685b      	ldreq	r3, [r3, #4]
 80095cc:	6063      	str	r3, [r4, #4]
 80095ce:	bf04      	itt	eq
 80095d0:	1949      	addeq	r1, r1, r5
 80095d2:	6021      	streq	r1, [r4, #0]
 80095d4:	6054      	str	r4, [r2, #4]
 80095d6:	e7ca      	b.n	800956e <_free_r+0x26>
 80095d8:	b003      	add	sp, #12
 80095da:	bd30      	pop	{r4, r5, pc}
 80095dc:	200012f4 	.word	0x200012f4

080095e0 <sbrk_aligned>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	4e0e      	ldr	r6, [pc, #56]	; (800961c <sbrk_aligned+0x3c>)
 80095e4:	460c      	mov	r4, r1
 80095e6:	6831      	ldr	r1, [r6, #0]
 80095e8:	4605      	mov	r5, r0
 80095ea:	b911      	cbnz	r1, 80095f2 <sbrk_aligned+0x12>
 80095ec:	f000 f8bc 	bl	8009768 <_sbrk_r>
 80095f0:	6030      	str	r0, [r6, #0]
 80095f2:	4621      	mov	r1, r4
 80095f4:	4628      	mov	r0, r5
 80095f6:	f000 f8b7 	bl	8009768 <_sbrk_r>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d00a      	beq.n	8009614 <sbrk_aligned+0x34>
 80095fe:	1cc4      	adds	r4, r0, #3
 8009600:	f024 0403 	bic.w	r4, r4, #3
 8009604:	42a0      	cmp	r0, r4
 8009606:	d007      	beq.n	8009618 <sbrk_aligned+0x38>
 8009608:	1a21      	subs	r1, r4, r0
 800960a:	4628      	mov	r0, r5
 800960c:	f000 f8ac 	bl	8009768 <_sbrk_r>
 8009610:	3001      	adds	r0, #1
 8009612:	d101      	bne.n	8009618 <sbrk_aligned+0x38>
 8009614:	f04f 34ff 	mov.w	r4, #4294967295
 8009618:	4620      	mov	r0, r4
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	200012f8 	.word	0x200012f8

08009620 <_malloc_r>:
 8009620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009624:	1ccd      	adds	r5, r1, #3
 8009626:	f025 0503 	bic.w	r5, r5, #3
 800962a:	3508      	adds	r5, #8
 800962c:	2d0c      	cmp	r5, #12
 800962e:	bf38      	it	cc
 8009630:	250c      	movcc	r5, #12
 8009632:	2d00      	cmp	r5, #0
 8009634:	4607      	mov	r7, r0
 8009636:	db01      	blt.n	800963c <_malloc_r+0x1c>
 8009638:	42a9      	cmp	r1, r5
 800963a:	d905      	bls.n	8009648 <_malloc_r+0x28>
 800963c:	230c      	movs	r3, #12
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	2600      	movs	r6, #0
 8009642:	4630      	mov	r0, r6
 8009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009648:	4e2e      	ldr	r6, [pc, #184]	; (8009704 <_malloc_r+0xe4>)
 800964a:	f000 f89d 	bl	8009788 <__malloc_lock>
 800964e:	6833      	ldr	r3, [r6, #0]
 8009650:	461c      	mov	r4, r3
 8009652:	bb34      	cbnz	r4, 80096a2 <_malloc_r+0x82>
 8009654:	4629      	mov	r1, r5
 8009656:	4638      	mov	r0, r7
 8009658:	f7ff ffc2 	bl	80095e0 <sbrk_aligned>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	4604      	mov	r4, r0
 8009660:	d14d      	bne.n	80096fe <_malloc_r+0xde>
 8009662:	6834      	ldr	r4, [r6, #0]
 8009664:	4626      	mov	r6, r4
 8009666:	2e00      	cmp	r6, #0
 8009668:	d140      	bne.n	80096ec <_malloc_r+0xcc>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	4631      	mov	r1, r6
 800966e:	4638      	mov	r0, r7
 8009670:	eb04 0803 	add.w	r8, r4, r3
 8009674:	f000 f878 	bl	8009768 <_sbrk_r>
 8009678:	4580      	cmp	r8, r0
 800967a:	d13a      	bne.n	80096f2 <_malloc_r+0xd2>
 800967c:	6821      	ldr	r1, [r4, #0]
 800967e:	3503      	adds	r5, #3
 8009680:	1a6d      	subs	r5, r5, r1
 8009682:	f025 0503 	bic.w	r5, r5, #3
 8009686:	3508      	adds	r5, #8
 8009688:	2d0c      	cmp	r5, #12
 800968a:	bf38      	it	cc
 800968c:	250c      	movcc	r5, #12
 800968e:	4629      	mov	r1, r5
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff ffa5 	bl	80095e0 <sbrk_aligned>
 8009696:	3001      	adds	r0, #1
 8009698:	d02b      	beq.n	80096f2 <_malloc_r+0xd2>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	442b      	add	r3, r5
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	e00e      	b.n	80096c0 <_malloc_r+0xa0>
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	1b52      	subs	r2, r2, r5
 80096a6:	d41e      	bmi.n	80096e6 <_malloc_r+0xc6>
 80096a8:	2a0b      	cmp	r2, #11
 80096aa:	d916      	bls.n	80096da <_malloc_r+0xba>
 80096ac:	1961      	adds	r1, r4, r5
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	6025      	str	r5, [r4, #0]
 80096b2:	bf18      	it	ne
 80096b4:	6059      	strne	r1, [r3, #4]
 80096b6:	6863      	ldr	r3, [r4, #4]
 80096b8:	bf08      	it	eq
 80096ba:	6031      	streq	r1, [r6, #0]
 80096bc:	5162      	str	r2, [r4, r5]
 80096be:	604b      	str	r3, [r1, #4]
 80096c0:	4638      	mov	r0, r7
 80096c2:	f104 060b 	add.w	r6, r4, #11
 80096c6:	f000 f865 	bl	8009794 <__malloc_unlock>
 80096ca:	f026 0607 	bic.w	r6, r6, #7
 80096ce:	1d23      	adds	r3, r4, #4
 80096d0:	1af2      	subs	r2, r6, r3
 80096d2:	d0b6      	beq.n	8009642 <_malloc_r+0x22>
 80096d4:	1b9b      	subs	r3, r3, r6
 80096d6:	50a3      	str	r3, [r4, r2]
 80096d8:	e7b3      	b.n	8009642 <_malloc_r+0x22>
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	42a3      	cmp	r3, r4
 80096de:	bf0c      	ite	eq
 80096e0:	6032      	streq	r2, [r6, #0]
 80096e2:	605a      	strne	r2, [r3, #4]
 80096e4:	e7ec      	b.n	80096c0 <_malloc_r+0xa0>
 80096e6:	4623      	mov	r3, r4
 80096e8:	6864      	ldr	r4, [r4, #4]
 80096ea:	e7b2      	b.n	8009652 <_malloc_r+0x32>
 80096ec:	4634      	mov	r4, r6
 80096ee:	6876      	ldr	r6, [r6, #4]
 80096f0:	e7b9      	b.n	8009666 <_malloc_r+0x46>
 80096f2:	230c      	movs	r3, #12
 80096f4:	603b      	str	r3, [r7, #0]
 80096f6:	4638      	mov	r0, r7
 80096f8:	f000 f84c 	bl	8009794 <__malloc_unlock>
 80096fc:	e7a1      	b.n	8009642 <_malloc_r+0x22>
 80096fe:	6025      	str	r5, [r4, #0]
 8009700:	e7de      	b.n	80096c0 <_malloc_r+0xa0>
 8009702:	bf00      	nop
 8009704:	200012f4 	.word	0x200012f4

08009708 <_realloc_r>:
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	4680      	mov	r8, r0
 800970e:	4614      	mov	r4, r2
 8009710:	460e      	mov	r6, r1
 8009712:	b921      	cbnz	r1, 800971e <_realloc_r+0x16>
 8009714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	4611      	mov	r1, r2
 800971a:	f7ff bf81 	b.w	8009620 <_malloc_r>
 800971e:	b92a      	cbnz	r2, 800972c <_realloc_r+0x24>
 8009720:	f7ff ff12 	bl	8009548 <_free_r>
 8009724:	4625      	mov	r5, r4
 8009726:	4628      	mov	r0, r5
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972c:	f000 f838 	bl	80097a0 <_malloc_usable_size_r>
 8009730:	4284      	cmp	r4, r0
 8009732:	4607      	mov	r7, r0
 8009734:	d802      	bhi.n	800973c <_realloc_r+0x34>
 8009736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800973a:	d812      	bhi.n	8009762 <_realloc_r+0x5a>
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff ff6e 	bl	8009620 <_malloc_r>
 8009744:	4605      	mov	r5, r0
 8009746:	2800      	cmp	r0, #0
 8009748:	d0ed      	beq.n	8009726 <_realloc_r+0x1e>
 800974a:	42bc      	cmp	r4, r7
 800974c:	4622      	mov	r2, r4
 800974e:	4631      	mov	r1, r6
 8009750:	bf28      	it	cs
 8009752:	463a      	movcs	r2, r7
 8009754:	f7ff fbb8 	bl	8008ec8 <memcpy>
 8009758:	4631      	mov	r1, r6
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff fef4 	bl	8009548 <_free_r>
 8009760:	e7e1      	b.n	8009726 <_realloc_r+0x1e>
 8009762:	4635      	mov	r5, r6
 8009764:	e7df      	b.n	8009726 <_realloc_r+0x1e>
	...

08009768 <_sbrk_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d06      	ldr	r5, [pc, #24]	; (8009784 <_sbrk_r+0x1c>)
 800976c:	2300      	movs	r3, #0
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	602b      	str	r3, [r5, #0]
 8009774:	f7f7 ff2a 	bl	80015cc <_sbrk>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_sbrk_r+0x1a>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_sbrk_r+0x1a>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	200012fc 	.word	0x200012fc

08009788 <__malloc_lock>:
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__malloc_lock+0x8>)
 800978a:	f000 b811 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 800978e:	bf00      	nop
 8009790:	20001300 	.word	0x20001300

08009794 <__malloc_unlock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_unlock+0x8>)
 8009796:	f000 b80c 	b.w	80097b2 <__retarget_lock_release_recursive>
 800979a:	bf00      	nop
 800979c:	20001300 	.word	0x20001300

080097a0 <_malloc_usable_size_r>:
 80097a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a4:	1f18      	subs	r0, r3, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfbc      	itt	lt
 80097aa:	580b      	ldrlt	r3, [r1, r0]
 80097ac:	18c0      	addlt	r0, r0, r3
 80097ae:	4770      	bx	lr

080097b0 <__retarget_lock_acquire_recursive>:
 80097b0:	4770      	bx	lr

080097b2 <__retarget_lock_release_recursive>:
 80097b2:	4770      	bx	lr

080097b4 <_init>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr

080097c0 <_fini>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr
